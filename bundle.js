/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={523:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var r=n(973),a=n.n(r),o=n(314),i=n.n(o),l=n(806),s=i()(a());s.i(l.A),s.push([e.id,"* {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n}\n\nhtml {\n    font-size: 62.5%; /* 1rem = 10px */\n}\n\nbody {\n    font-family: 'Open Sans', sans-serif;\n    font-size: 1rem;\n    font-weight: 600;\n    line-height: 1.3;\n}\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAEA;IACI,UAAU;IACV,SAAS;IACT,sBAAsB;AAC1B;;AAEA;IACI,gBAAgB,EAAE,gBAAgB;AACtC;;AAEA;IACI,oCAAoC;IACpC,eAAe;IACf,gBAAgB;IAChB,gBAAgB;AACpB",sourcesContent:["@import \"./styles/colors.css\";\r\n\r\n* {\r\n    padding: 0;\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\nhtml {\r\n    font-size: 62.5%; /* 1rem = 10px */\r\n}\r\n\r\nbody {\r\n    font-family: 'Open Sans', sans-serif;\r\n    font-size: 1rem;\r\n    font-weight: 600;\r\n    line-height: 1.3;\r\n}\r\n"],sourceRoot:""}]);const u=s},806:(e,t,n)=>{"use strict";n.d(t,{A:()=>l});var r=n(973),a=n.n(r),o=n(314),i=n.n(o)()(a());i.push([e.id,":root {\n    --text-primary: #5A57CB;\n    --text-secondary: #6A7988;\n    --text-tertiary: #728096;\n    --text-hightlight: #5A57CB;\n\n    --bg-primary: #FFFFFFCC;\n    --bg-secondary: #F3F5F8;\n    --bg-tertiary: #DFDFDF;\n    --bg-hightlight: #8dadbd;\n\n    --interactive: #A0A8B1;\n    --active: #aac8d9;\n    --hightlight: #1313ec;\n}\n","",{version:3,sources:["webpack://./src/styles/colors.css"],names:[],mappings:"AAAA;IACI,uBAAuB;IACvB,yBAAyB;IACzB,wBAAwB;IACxB,0BAA0B;;IAE1B,uBAAuB;IACvB,uBAAuB;IACvB,sBAAsB;IACtB,wBAAwB;;IAExB,sBAAsB;IACtB,iBAAiB;IACjB,qBAAqB;AACzB",sourcesContent:[":root {\r\n    --text-primary: #5A57CB;\r\n    --text-secondary: #6A7988;\r\n    --text-tertiary: #728096;\r\n    --text-hightlight: #5A57CB;\r\n\r\n    --bg-primary: #FFFFFFCC;\r\n    --bg-secondary: #F3F5F8;\r\n    --bg-tertiary: #DFDFDF;\r\n    --bg-hightlight: #8dadbd;\r\n\r\n    --interactive: #A0A8B1;\r\n    --active: #aac8d9;\r\n    --hightlight: #1313ec;\r\n}\r\n"],sourceRoot:""}]);const l=i},314:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(i[s]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&i[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},973:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},17:e=>{"use strict";e.exports=function e(t,n){if(t===n)return!0;if(t&&n&&"object"==typeof t&&"object"==typeof n){if(t.constructor!==n.constructor)return!1;var r,a,o;if(Array.isArray(t)){if((r=t.length)!=n.length)return!1;for(a=r;0!=a--;)if(!e(t[a],n[a]))return!1;return!0}if(t.constructor===RegExp)return t.source===n.source&&t.flags===n.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===n.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===n.toString();if((r=(o=Object.keys(t)).length)!==Object.keys(n).length)return!1;for(a=r;0!=a--;)if(!Object.prototype.hasOwnProperty.call(n,o[a]))return!1;for(a=r;0!=a--;){var i=o[a];if(!e(t[i],n[i]))return!1}return!0}return t!=t&&n!=n}},146:(e,t,n)=>{"use strict";var r=n(404),a={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function s(e){return r.isMemo(e)?i:l[e.$$typeof]||a}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var u=Object.defineProperty,c=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var a=p(n);a&&a!==h&&e(t,a,r)}var i=c(n);d&&(i=i.concat(d(n)));for(var l=s(t),g=s(n),m=0;m<i.length;++m){var v=i[m];if(!(o[v]||r&&r[v]||g&&g[v]||l&&l[v])){var y=f(n,v);try{u(t,v,y)}catch(e){}}}}return t}},691:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,a=n?Symbol.for("react.portal"):60106,o=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,s=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,f=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,g=n?Symbol.for("react.memo"):60115,m=n?Symbol.for("react.lazy"):60116,v=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function S(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case d:case o:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case u:case f:case m:case g:case s:return e;default:return t}}case a:return t}}}function k(e){return S(e)===d}t.AsyncMode=c,t.ConcurrentMode=d,t.ContextConsumer=u,t.ContextProvider=s,t.Element=r,t.ForwardRef=f,t.Fragment=o,t.Lazy=m,t.Memo=g,t.Portal=a,t.Profiler=l,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return k(e)||S(e)===c},t.isConcurrentMode=k,t.isContextConsumer=function(e){return S(e)===u},t.isContextProvider=function(e){return S(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return S(e)===f},t.isFragment=function(e){return S(e)===o},t.isLazy=function(e){return S(e)===m},t.isMemo=function(e){return S(e)===g},t.isPortal=function(e){return S(e)===a},t.isProfiler=function(e){return S(e)===l},t.isStrictMode=function(e){return S(e)===i},t.isSuspense=function(e){return S(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===d||e===l||e===i||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===g||e.$$typeof===s||e.$$typeof===u||e.$$typeof===f||e.$$typeof===y||e.$$typeof===b||e.$$typeof===w||e.$$typeof===v)},t.typeOf=S},404:(e,t,n)=>{"use strict";e.exports=n(691)},551:(e,t,n)=>{"use strict";var r=n(159),a=n(982);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function s(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(l[e]=t,e=0;e<t.length;e++)i.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function g(e,t,n,r,a,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=i}var m={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){m[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];m[t]=new g(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){m[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){m[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){m[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){m[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){m[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){m[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){m[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function b(e,t,n,r){var a=m.hasOwnProperty(t)?m[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!d.call(h,e)||!d.call(p,e)&&(f.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,y);m[t]=new g(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,y);m[t]=new g(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,y);m[t]=new g(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),m.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,S=Symbol.for("react.element"),k=Symbol.for("react.portal"),x=Symbol.for("react.fragment"),C=Symbol.for("react.strict_mode"),E=Symbol.for("react.profiler"),O=Symbol.for("react.provider"),D=Symbol.for("react.context"),I=Symbol.for("react.forward_ref"),T=Symbol.for("react.suspense"),P=Symbol.for("react.suspense_list"),_=Symbol.for("react.memo"),N=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var A=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var R=Symbol.iterator;function L(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=R&&e[R]||e["@@iterator"])?e:null}var M,z=Object.assign;function j(e){if(void 0===M)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);M=t&&t[1]||""}return"\n"+M+e}var F=!1;function U(e,t){if(!e||F)return"";F=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),o=r.stack.split("\n"),i=a.length-1,l=o.length-1;1<=i&&0<=l&&a[i]!==o[l];)l--;for(;1<=i&&0<=l;i--,l--)if(a[i]!==o[l]){if(1!==i||1!==l)do{if(i--,0>--l||a[i]!==o[l]){var s="\n"+a[i].replace(" at new "," at ");return e.displayName&&s.includes("<anonymous>")&&(s=s.replace("<anonymous>",e.displayName)),s}}while(1<=i&&0<=l);break}}}finally{F=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?j(e):""}function B(e){switch(e.tag){case 5:return j(e.type);case 16:return j("Lazy");case 13:return j("Suspense");case 19:return j("SuspenseList");case 0:case 2:case 15:return U(e.type,!1);case 11:return U(e.type.render,!1);case 1:return U(e.type,!0);default:return""}}function $(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case x:return"Fragment";case k:return"Portal";case E:return"Profiler";case C:return"StrictMode";case T:return"Suspense";case P:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case D:return(e.displayName||"Context")+".Consumer";case O:return(e._context.displayName||"Context")+".Provider";case I:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case _:return null!==(t=e.displayName||null)?t:$(e.type)||"Memo";case N:t=e._payload,e=e._init;try{return $(e(t))}catch(e){}}return null}function H(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return $(t);case 8:return t===C?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function W(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function V(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Q(e){e._valueTracker||(e._valueTracker=function(e){var t=V(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=V(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Y(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function G(e,t){var n=t.checked;return z({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function K(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=W(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function Z(e,t){X(e,t);var n=W(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,W(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&Y(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+W(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return z({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(te(n)){if(1<n.length)throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:W(n)}}function oe(e,t){var n=W(t.value),r=W(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function se(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ue,ce,de=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ue=ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function ge(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function me(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=ge(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ve=z({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(ve[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function Se(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var ke=null,xe=null,Ce=null;function Ee(e){if(e=ba(e)){if("function"!=typeof ke)throw Error(o(280));var t=e.stateNode;t&&(t=Sa(t),ke(e.stateNode,e.type,t))}}function Oe(e){xe?Ce?Ce.push(e):Ce=[e]:xe=e}function De(){if(xe){var e=xe,t=Ce;if(Ce=xe=null,Ee(e),t)for(e=0;e<t.length;e++)Ee(t[e])}}function Ie(e,t){return e(t)}function Te(){}var Pe=!1;function _e(e,t,n){if(Pe)return e(t,n);Pe=!0;try{return Ie(e,t,n)}finally{Pe=!1,(null!==xe||null!==Ce)&&(Te(),De())}}function Ne(e,t){var n=e.stateNode;if(null===n)return null;var r=Sa(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Ae=!1;if(c)try{var Re={};Object.defineProperty(Re,"passive",{get:function(){Ae=!0}}),window.addEventListener("test",Re,Re),window.removeEventListener("test",Re,Re)}catch(ce){Ae=!1}function Le(e,t,n,r,a,o,i,l,s){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var Me=!1,ze=null,je=!1,Fe=null,Ue={onError:function(e){Me=!0,ze=e}};function Be(e,t,n,r,a,o,i,l,s){Me=!1,ze=null,Le.apply(Ue,arguments)}function $e(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function He(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function We(e){if($e(e)!==e)throw Error(o(188))}function Ve(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=$e(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){n=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===n)return We(a),e;if(i===r)return We(a),t;i=i.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=i;else{for(var l=!1,s=a.child;s;){if(s===n){l=!0,n=a,r=i;break}if(s===r){l=!0,r=a,n=i;break}s=s.sibling}if(!l){for(s=i.child;s;){if(s===n){l=!0,n=i,r=a;break}if(s===r){l=!0,r=i,n=a;break}s=s.sibling}if(!l)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e))?Qe(e):null}function Qe(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Qe(e);if(null!==t)return t;e=e.sibling}return null}var qe=a.unstable_scheduleCallback,Ye=a.unstable_cancelCallback,Ge=a.unstable_shouldYield,Ke=a.unstable_requestPaint,Xe=a.unstable_now,Ze=a.unstable_getCurrentPriorityLevel,Je=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,ot=null,it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/st|0)|0},lt=Math.log,st=Math.LN2,ut=64,ct=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ft(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,o=e.pingedLanes,i=268435455&n;if(0!==i){var l=i&~a;0!==l?r=dt(l):0!=(o&=i)&&(r=dt(o))}else 0!=(i=n&~a)?r=dt(i):0!==o&&(r=dt(o));if(0===r)return 0;if(0!==t&&t!==r&&!(t&a)&&((a=r&-r)>=(o=t&-t)||16===a&&4194240&o))return t;if(4&r&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-it(t)),r|=e[n],t&=~a;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function gt(){var e=ut;return!(4194240&(ut<<=1))&&(ut=64),e}function mt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function vt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function yt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var St,kt,xt,Ct,Et,Ot=!1,Dt=[],It=null,Tt=null,Pt=null,_t=new Map,Nt=new Map,At=[],Rt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Lt(e,t){switch(e){case"focusin":case"focusout":It=null;break;case"dragenter":case"dragleave":Tt=null;break;case"mouseover":case"mouseout":Pt=null;break;case"pointerover":case"pointerout":_t.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Nt.delete(t.pointerId)}}function Mt(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==t&&null!==(t=ba(t))&&kt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function zt(e){var t=ya(e.target);if(null!==t){var n=$e(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=He(n)))return e.blockedOn=t,void Et(e.priority,(function(){xt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function jt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Gt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ba(n))&&kt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function Ft(e,t,n){jt(e)&&n.delete(t)}function Ut(){Ot=!1,null!==It&&jt(It)&&(It=null),null!==Tt&&jt(Tt)&&(Tt=null),null!==Pt&&jt(Pt)&&(Pt=null),_t.forEach(Ft),Nt.forEach(Ft)}function Bt(e,t){e.blockedOn===t&&(e.blockedOn=null,Ot||(Ot=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,Ut)))}function $t(e){function t(t){return Bt(t,e)}if(0<Dt.length){Bt(Dt[0],e);for(var n=1;n<Dt.length;n++){var r=Dt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==It&&Bt(It,e),null!==Tt&&Bt(Tt,e),null!==Pt&&Bt(Pt,e),_t.forEach(t),Nt.forEach(t),n=0;n<At.length;n++)(r=At[n]).blockedOn===e&&(r.blockedOn=null);for(;0<At.length&&null===(n=At[0]).blockedOn;)zt(n),null===n.blockedOn&&At.shift()}var Ht=w.ReactCurrentBatchConfig,Wt=!0;function Vt(e,t,n,r){var a=bt,o=Ht.transition;Ht.transition=null;try{bt=1,qt(e,t,n,r)}finally{bt=a,Ht.transition=o}}function Qt(e,t,n,r){var a=bt,o=Ht.transition;Ht.transition=null;try{bt=4,qt(e,t,n,r)}finally{bt=a,Ht.transition=o}}function qt(e,t,n,r){if(Wt){var a=Gt(e,t,n,r);if(null===a)Wr(e,t,r,Yt,n),Lt(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return It=Mt(It,e,t,n,r,a),!0;case"dragenter":return Tt=Mt(Tt,e,t,n,r,a),!0;case"mouseover":return Pt=Mt(Pt,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return _t.set(o,Mt(_t.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,Nt.set(o,Mt(Nt.get(o)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(Lt(e,r),4&t&&-1<Rt.indexOf(e)){for(;null!==a;){var o=ba(a);if(null!==o&&St(o),null===(o=Gt(e,t,n,r))&&Wr(e,t,r,Yt,n),o===a)break;a=o}null!==a&&r.stopPropagation()}else Wr(e,t,r,null,n)}}var Yt=null;function Gt(e,t,n,r){if(Yt=null,null!==(e=ya(e=Se(r))))if(null===(t=$e(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=He(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Yt=e,null}function Kt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ze()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Zt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Zt,r=n.length,a="value"in Xt?Xt.value:Xt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);return Jt=a.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,a,o){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return z(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var on,ln,sn,un={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=an(un),dn=z({},un,{view:0,detail:0}),fn=an(dn),pn=z({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:En,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==sn&&(sn&&"mousemove"===e.type?(on=e.screenX-sn.screenX,ln=e.screenY-sn.screenY):ln=on=0,sn=e),on)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),hn=an(pn),gn=an(z({},pn,{dataTransfer:0})),mn=an(z({},dn,{relatedTarget:0})),vn=an(z({},un,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=z({},un,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=an(yn),wn=an(z({},un,{data:0})),Sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=xn[e])&&!!t[e]}function En(){return Cn}var On=z({},dn,{key:function(e){if(e.key){var t=Sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:En,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Dn=an(On),In=an(z({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Tn=an(z({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:En})),Pn=an(z({},un,{propertyName:0,elapsedTime:0,pseudoElement:0})),_n=z({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Nn=an(_n),An=[9,13,27,32],Rn=c&&"CompositionEvent"in window,Ln=null;c&&"documentMode"in document&&(Ln=document.documentMode);var Mn=c&&"TextEvent"in window&&!Ln,zn=c&&(!Rn||Ln&&8<Ln&&11>=Ln),jn=String.fromCharCode(32),Fn=!1;function Un(e,t){switch(e){case"keyup":return-1!==An.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Bn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var $n=!1,Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function Vn(e,t,n,r){Oe(r),0<(t=Qr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Qn=null,qn=null;function Yn(e){jr(e,0)}function Gn(e){if(q(wa(e)))return e}function Kn(e,t){if("change"===e)return t}var Xn=!1;if(c){var Zn;if(c){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Zn=Jn}else Zn=!1;Xn=Zn&&(!document.documentMode||9<document.documentMode)}function tr(){Qn&&(Qn.detachEvent("onpropertychange",nr),qn=Qn=null)}function nr(e){if("value"===e.propertyName&&Gn(qn)){var t=[];Vn(t,qn,e,Se(e)),_e(Yn,t)}}function rr(e,t,n){"focusin"===e?(tr(),qn=n,(Qn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Gn(qn)}function or(e,t){if("click"===e)return Gn(t)}function ir(e,t){if("input"===e||"change"===e)return Gn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function sr(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!d.call(t,a)||!lr(e[a],t[a]))return!1}return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=Y();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Y((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=fr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!e.extend&&o>r&&(a=r,r=o,o=a),a=cr(n,o);var i=cr(n,r);a&&i&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var gr=c&&"documentMode"in document&&11>=document.documentMode,mr=null,vr=null,yr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==mr||mr!==Y(r)||(r="selectionStart"in(r=mr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&sr(yr,r)||(yr=r,0<(r=Qr(vr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=mr)))}function Sr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kr={animationend:Sr("Animation","AnimationEnd"),animationiteration:Sr("Animation","AnimationIteration"),animationstart:Sr("Animation","AnimationStart"),transitionend:Sr("Transition","TransitionEnd")},xr={},Cr={};function Er(e){if(xr[e])return xr[e];if(!kr[e])return e;var t,n=kr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Cr)return xr[e]=n[t];return e}c&&(Cr=document.createElement("div").style,"AnimationEvent"in window||(delete kr.animationend.animation,delete kr.animationiteration.animation,delete kr.animationstart.animation),"TransitionEvent"in window||delete kr.transitionend.transition);var Or=Er("animationend"),Dr=Er("animationiteration"),Ir=Er("animationstart"),Tr=Er("transitionend"),Pr=new Map,_r="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Nr(e,t){Pr.set(e,t),s(t,[e])}for(var Ar=0;Ar<_r.length;Ar++){var Rr=_r[Ar];Nr(Rr.toLowerCase(),"on"+(Rr[0].toUpperCase()+Rr.slice(1)))}Nr(Or,"onAnimationEnd"),Nr(Dr,"onAnimationIteration"),Nr(Ir,"onAnimationStart"),Nr("dblclick","onDoubleClick"),Nr("focusin","onFocus"),Nr("focusout","onBlur"),Nr(Tr,"onTransitionEnd"),u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Lr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Mr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Lr));function zr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,i,l,s,u){if(Be.apply(this,arguments),Me){if(!Me)throw Error(o(198));var c=ze;Me=!1,ze=null,je||(je=!0,Fe=c)}}(r,t,void 0,e),e.currentTarget=null}function jr(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],s=l.instance,u=l.currentTarget;if(l=l.listener,s!==o&&a.isPropagationStopped())break e;zr(a,l,u),o=s}else for(i=0;i<r.length;i++){if(s=(l=r[i]).instance,u=l.currentTarget,l=l.listener,s!==o&&a.isPropagationStopped())break e;zr(a,l,u),o=s}}}if(je)throw e=Fe,je=!1,Fe=null,e}function Fr(e,t){var n=t[ga];void 0===n&&(n=t[ga]=new Set);var r=e+"__bubble";n.has(r)||(Hr(t,e,2,!1),n.add(r))}function Ur(e,t,n){var r=0;t&&(r|=4),Hr(n,e,r,t)}var Br="_reactListening"+Math.random().toString(36).slice(2);function $r(e){if(!e[Br]){e[Br]=!0,i.forEach((function(t){"selectionchange"!==t&&(Mr.has(t)||Ur(t,!1,e),Ur(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Br]||(t[Br]=!0,Ur("selectionchange",!1,t))}}function Hr(e,t,n,r){switch(Kt(t)){case 1:var a=Vt;break;case 4:a=Qt;break;default:a=qt}n=a.bind(null,t,n,e),a=void 0,!Ae||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Wr(e,t,n,r,a){var o=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===a||8===l.nodeType&&l.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var s=i.tag;if((3===s||4===s)&&((s=i.stateNode.containerInfo)===a||8===s.nodeType&&s.parentNode===a))return;i=i.return}for(;null!==l;){if(null===(i=ya(l)))return;if(5===(s=i.tag)||6===s){r=o=i;continue e}l=l.parentNode}}r=r.return}_e((function(){var r=o,a=Se(n),i=[];e:{var l=Pr.get(e);if(void 0!==l){var s=cn,u=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":s=Dn;break;case"focusin":u="focus",s=mn;break;case"focusout":u="blur",s=mn;break;case"beforeblur":case"afterblur":s=mn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=Tn;break;case Or:case Dr:case Ir:s=vn;break;case Tr:s=Pn;break;case"scroll":s=fn;break;case"wheel":s=Nn;break;case"copy":case"cut":case"paste":s=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=In}var c=!!(4&t),d=!c&&"scroll"===e,f=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var g=(p=h).stateNode;if(5===p.tag&&null!==g&&(p=g,null!==f&&null!=(g=Ne(h,f))&&c.push(Vr(h,g,p))),d)break;h=h.return}0<c.length&&(l=new s(l,u,null,n,a),i.push({event:l,listeners:c}))}}if(!(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===we||!(u=n.relatedTarget||n.fromElement)||!ya(u)&&!u[ha])&&(s||l)&&(l=a.window===a?a:(l=a.ownerDocument)?l.defaultView||l.parentWindow:window,s?(s=r,null!==(u=(u=n.relatedTarget||n.toElement)?ya(u):null)&&(u!==(d=$e(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(s=null,u=r),s!==u)){if(c=hn,g="onMouseLeave",f="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=In,g="onPointerLeave",f="onPointerEnter",h="pointer"),d=null==s?l:wa(s),p=null==u?l:wa(u),(l=new c(g,h+"leave",s,n,a)).target=d,l.relatedTarget=p,g=null,ya(a)===r&&((c=new c(f,h+"enter",u,n,a)).target=p,c.relatedTarget=d,g=c),d=g,s&&u)e:{for(f=u,h=0,p=c=s;p;p=qr(p))h++;for(p=0,g=f;g;g=qr(g))p++;for(;0<h-p;)c=qr(c),h--;for(;0<p-h;)f=qr(f),p--;for(;h--;){if(c===f||null!==f&&c===f.alternate)break e;c=qr(c),f=qr(f)}c=null}else c=null;null!==s&&Yr(i,l,s,c,!1),null!==u&&null!==d&&Yr(i,d,u,c,!0)}if("select"===(s=(l=r?wa(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===s&&"file"===l.type)var m=Kn;else if(Wn(l))if(Xn)m=ir;else{m=ar;var v=rr}else(s=l.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(m=or);switch(m&&(m=m(e,r))?Vn(i,m,n,a):(v&&v(e,l,r),"focusout"===e&&(v=l._wrapperState)&&v.controlled&&"number"===l.type&&ee(l,"number",l.value)),v=r?wa(r):window,e){case"focusin":(Wn(v)||"true"===v.contentEditable)&&(mr=v,vr=r,yr=null);break;case"focusout":yr=vr=mr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(i,n,a);break;case"selectionchange":if(gr)break;case"keydown":case"keyup":wr(i,n,a)}var y;if(Rn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else $n?Un(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(zn&&"ko"!==n.locale&&($n||"onCompositionStart"!==b?"onCompositionEnd"===b&&$n&&(y=en()):(Zt="value"in(Xt=a)?Xt.value:Xt.textContent,$n=!0)),0<(v=Qr(r,b)).length&&(b=new wn(b,e,null,n,a),i.push({event:b,listeners:v}),(y||null!==(y=Bn(n)))&&(b.data=y))),(y=Mn?function(e,t){switch(e){case"compositionend":return Bn(t);case"keypress":return 32!==t.which?null:(Fn=!0,jn);case"textInput":return(e=t.data)===jn&&Fn?null:e;default:return null}}(e,n):function(e,t){if($n)return"compositionend"===e||!Rn&&Un(e,t)?(e=en(),Jt=Zt=Xt=null,$n=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return zn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Qr(r,"onBeforeInput")).length&&(a=new wn("onBeforeInput","beforeinput",null,n,a),i.push({event:a,listeners:r}),a.data=y)}jr(i,t)}))}function Vr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Qr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=Ne(e,n))&&r.unshift(Vr(e,o,a)),null!=(o=Ne(e,t))&&r.push(Vr(e,o,a))),e=e.return}return r}function qr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Yr(e,t,n,r,a){for(var o=t._reactName,i=[];null!==n&&n!==r;){var l=n,s=l.alternate,u=l.stateNode;if(null!==s&&s===r)break;5===l.tag&&null!==u&&(l=u,a?null!=(s=Ne(n,o))&&i.unshift(Vr(n,s,l)):a||null!=(s=Ne(n,o))&&i.push(Vr(n,s,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Gr=/\r\n?/g,Kr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Gr,"\n").replace(Kr,"")}function Zr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(o(425))}function Jr(){}var ea=null,ta=null;function na(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,oa="function"==typeof Promise?Promise:void 0,ia="function"==typeof queueMicrotask?queueMicrotask:void 0!==oa?function(e){return oa.resolve(null).then(e).catch(la)}:ra;function la(e){setTimeout((function(){throw e}))}function sa(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void $t(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);$t(t)}function ua(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ca(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var da=Math.random().toString(36).slice(2),fa="__reactFiber$"+da,pa="__reactProps$"+da,ha="__reactContainer$"+da,ga="__reactEvents$"+da,ma="__reactListeners$"+da,va="__reactHandles$"+da;function ya(e){var t=e[fa];if(t)return t;for(var n=e.parentNode;n;){if(t=n[ha]||n[fa]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ca(e);null!==e;){if(n=e[fa])return n;e=ca(e)}return t}n=(e=n).parentNode}return null}function ba(e){return!(e=e[fa]||e[ha])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function wa(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function Sa(e){return e[pa]||null}var ka=[],xa=-1;function Ca(e){return{current:e}}function Ea(e){0>xa||(e.current=ka[xa],ka[xa]=null,xa--)}function Oa(e,t){xa++,ka[xa]=e.current,e.current=t}var Da={},Ia=Ca(Da),Ta=Ca(!1),Pa=Da;function _a(e,t){var n=e.type.contextTypes;if(!n)return Da;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Na(e){return null!=e.childContextTypes}function Aa(){Ea(Ta),Ea(Ia)}function Ra(e,t,n){if(Ia.current!==Da)throw Error(o(168));Oa(Ia,t),Oa(Ta,n)}function La(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(o(108,H(e)||"Unknown",a));return z({},n,r)}function Ma(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Da,Pa=Ia.current,Oa(Ia,e),Oa(Ta,Ta.current),!0}function za(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=La(e,t,Pa),r.__reactInternalMemoizedMergedChildContext=e,Ea(Ta),Ea(Ia),Oa(Ia,e)):Ea(Ta),Oa(Ta,n)}var ja=null,Fa=!1,Ua=!1;function Ba(e){null===ja?ja=[e]:ja.push(e)}function $a(){if(!Ua&&null!==ja){Ua=!0;var e=0,t=bt;try{var n=ja;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}ja=null,Fa=!1}catch(t){throw null!==ja&&(ja=ja.slice(e+1)),qe(Je,$a),t}finally{bt=t,Ua=!1}}return null}var Ha=[],Wa=0,Va=null,Qa=0,qa=[],Ya=0,Ga=null,Ka=1,Xa="";function Za(e,t){Ha[Wa++]=Qa,Ha[Wa++]=Va,Va=e,Qa=t}function Ja(e,t,n){qa[Ya++]=Ka,qa[Ya++]=Xa,qa[Ya++]=Ga,Ga=e;var r=Ka;e=Xa;var a=32-it(r)-1;r&=~(1<<a),n+=1;var o=32-it(t)+a;if(30<o){var i=a-a%5;o=(r&(1<<i)-1).toString(32),r>>=i,a-=i,Ka=1<<32-it(t)+a|n<<a|r,Xa=o+e}else Ka=1<<o|n<<a|r,Xa=e}function eo(e){null!==e.return&&(Za(e,1),Ja(e,1,0))}function to(e){for(;e===Va;)Va=Ha[--Wa],Ha[Wa]=null,Qa=Ha[--Wa],Ha[Wa]=null;for(;e===Ga;)Ga=qa[--Ya],qa[Ya]=null,Xa=qa[--Ya],qa[Ya]=null,Ka=qa[--Ya],qa[Ya]=null}var no=null,ro=null,ao=!1,oo=null;function io(e,t){var n=_u(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function lo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,no=e,ro=ua(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,no=e,ro=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Ga?{id:Ka,overflow:Xa}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=_u(18,null,null,0)).stateNode=t,n.return=e,e.child=n,no=e,ro=null,!0);default:return!1}}function so(e){return!(!(1&e.mode)||128&e.flags)}function uo(e){if(ao){var t=ro;if(t){var n=t;if(!lo(e,t)){if(so(e))throw Error(o(418));t=ua(n.nextSibling);var r=no;t&&lo(e,t)?io(r,n):(e.flags=-4097&e.flags|2,ao=!1,no=e)}}else{if(so(e))throw Error(o(418));e.flags=-4097&e.flags|2,ao=!1,no=e}}}function co(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;no=e}function fo(e){if(e!==no)return!1;if(!ao)return co(e),ao=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!na(e.type,e.memoizedProps)),t&&(t=ro)){if(so(e))throw po(),Error(o(418));for(;t;)io(e,t),t=ua(t.nextSibling)}if(co(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ro=ua(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ro=null}}else ro=no?ua(e.stateNode.nextSibling):null;return!0}function po(){for(var e=ro;e;)e=ua(e.nextSibling)}function ho(){ro=no=null,ao=!1}function go(e){null===oo?oo=[e]:oo.push(e)}var mo=w.ReactCurrentBatchConfig;function vo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var a=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=a.refs;null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function yo(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function bo(e){return(0,e._init)(e._payload)}function wo(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Au(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=zu(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function u(e,t,n,r){var o=n.type;return o===x?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===N&&bo(o)===t.type)?((r=a(t,n.props)).ref=vo(e,t,n),r.return=e,r):((r=Ru(n.type,n.key,n.props,null,e.mode,r)).ref=vo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=ju(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function d(e,t,n,r,o){return null===t||7!==t.tag?((t=Lu(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=zu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case S:return(n=Ru(t.type,t.key,t.props,null,e.mode,n)).ref=vo(e,null,t),n.return=e,n;case k:return(t=ju(t,e.mode,n)).return=e,t;case N:return f(e,(0,t._init)(t._payload),n)}if(te(t)||L(t))return(t=Lu(t,e.mode,n,null)).return=e,t;yo(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case S:return n.key===a?u(e,t,n,r):null;case k:return n.key===a?c(e,t,n,r):null;case N:return p(e,t,(a=n._init)(n._payload),r)}if(te(n)||L(n))return null!==a?null:d(e,t,n,r,null);yo(e,n)}return null}function h(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case S:return u(t,e=e.get(null===r.key?n:r.key)||null,r,a);case k:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case N:return h(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||L(r))return d(t,e=e.get(n)||null,r,a,null);yo(t,r)}return null}function g(a,o,l,s){for(var u=null,c=null,d=o,g=o=0,m=null;null!==d&&g<l.length;g++){d.index>g?(m=d,d=null):m=d.sibling;var v=p(a,d,l[g],s);if(null===v){null===d&&(d=m);break}e&&d&&null===v.alternate&&t(a,d),o=i(v,o,g),null===c?u=v:c.sibling=v,c=v,d=m}if(g===l.length)return n(a,d),ao&&Za(a,g),u;if(null===d){for(;g<l.length;g++)null!==(d=f(a,l[g],s))&&(o=i(d,o,g),null===c?u=d:c.sibling=d,c=d);return ao&&Za(a,g),u}for(d=r(a,d);g<l.length;g++)null!==(m=h(d,a,g,l[g],s))&&(e&&null!==m.alternate&&d.delete(null===m.key?g:m.key),o=i(m,o,g),null===c?u=m:c.sibling=m,c=m);return e&&d.forEach((function(e){return t(a,e)})),ao&&Za(a,g),u}function m(a,l,s,u){var c=L(s);if("function"!=typeof c)throw Error(o(150));if(null==(s=c.call(s)))throw Error(o(151));for(var d=c=null,g=l,m=l=0,v=null,y=s.next();null!==g&&!y.done;m++,y=s.next()){g.index>m?(v=g,g=null):v=g.sibling;var b=p(a,g,y.value,u);if(null===b){null===g&&(g=v);break}e&&g&&null===b.alternate&&t(a,g),l=i(b,l,m),null===d?c=b:d.sibling=b,d=b,g=v}if(y.done)return n(a,g),ao&&Za(a,m),c;if(null===g){for(;!y.done;m++,y=s.next())null!==(y=f(a,y.value,u))&&(l=i(y,l,m),null===d?c=y:d.sibling=y,d=y);return ao&&Za(a,m),c}for(g=r(a,g);!y.done;m++,y=s.next())null!==(y=h(g,a,m,y.value,u))&&(e&&null!==y.alternate&&g.delete(null===y.key?m:y.key),l=i(y,l,m),null===d?c=y:d.sibling=y,d=y);return e&&g.forEach((function(e){return t(a,e)})),ao&&Za(a,m),c}return function e(r,o,i,s){if("object"==typeof i&&null!==i&&i.type===x&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case S:e:{for(var u=i.key,c=o;null!==c;){if(c.key===u){if((u=i.type)===x){if(7===c.tag){n(r,c.sibling),(o=a(c,i.props.children)).return=r,r=o;break e}}else if(c.elementType===u||"object"==typeof u&&null!==u&&u.$$typeof===N&&bo(u)===c.type){n(r,c.sibling),(o=a(c,i.props)).ref=vo(r,c,i),o.return=r,r=o;break e}n(r,c);break}t(r,c),c=c.sibling}i.type===x?((o=Lu(i.props.children,r.mode,s,i.key)).return=r,r=o):((s=Ru(i.type,i.key,i.props,null,r.mode,s)).ref=vo(r,o,i),s.return=r,r=s)}return l(r);case k:e:{for(c=i.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===i.containerInfo&&o.stateNode.implementation===i.implementation){n(r,o.sibling),(o=a(o,i.children||[])).return=r,r=o;break e}n(r,o);break}t(r,o),o=o.sibling}(o=ju(i,r.mode,s)).return=r,r=o}return l(r);case N:return e(r,o,(c=i._init)(i._payload),s)}if(te(i))return g(r,o,i,s);if(L(i))return m(r,o,i,s);yo(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==o&&6===o.tag?(n(r,o.sibling),(o=a(o,i)).return=r,r=o):(n(r,o),(o=zu(i,r.mode,s)).return=r,r=o),l(r)):n(r,o)}}var So=wo(!0),ko=wo(!1),xo=Ca(null),Co=null,Eo=null,Oo=null;function Do(){Oo=Eo=Co=null}function Io(e){var t=xo.current;Ea(xo),e._currentValue=t}function To(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Po(e,t){Co=e,Oo=Eo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(!!(e.lanes&t)&&(bl=!0),e.firstContext=null)}function _o(e){var t=e._currentValue;if(Oo!==e)if(e={context:e,memoizedValue:t,next:null},null===Eo){if(null===Co)throw Error(o(308));Eo=e,Co.dependencies={lanes:0,firstContext:e}}else Eo=Eo.next=e;return t}var No=null;function Ao(e){null===No?No=[e]:No.push(e)}function Ro(e,t,n,r){var a=t.interleaved;return null===a?(n.next=n,Ao(t)):(n.next=a.next,a.next=n),t.interleaved=n,Lo(e,r)}function Lo(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Mo=!1;function zo(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function jo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Fo(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Uo(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Is){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,Lo(e,n)}return null===(a=r.interleaved)?(t.next=t,Ao(r)):(t.next=a.next,a.next=t),r.interleaved=t,Lo(e,n)}function Bo(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}function $o(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?a=o=i:o=o.next=i,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Ho(e,t,n,r){var a=e.updateQueue;Mo=!1;var o=a.firstBaseUpdate,i=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var s=l,u=s.next;s.next=null,null===i?o=u:i.next=u,i=s;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===l?c.firstBaseUpdate=u:l.next=u,c.lastBaseUpdate=s)}if(null!==o){var d=a.baseState;for(i=0,c=u=s=null,l=o;;){var f=l.lane,p=l.eventTime;if((r&f)===f){null!==c&&(c=c.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var h=e,g=l;switch(f=t,p=n,g.tag){case 1:if("function"==typeof(h=g.payload)){d=h.call(p,d,f);break e}d=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(f="function"==typeof(h=g.payload)?h.call(p,d,f):h))break e;d=z({},d,f);break e;case 2:Mo=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(f=a.effects)?a.effects=[l]:f.push(l))}else p={eventTime:p,lane:f,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(u=c=p,s=d):c=c.next=p,i|=f;if(null===(l=l.next)){if(null===(l=a.shared.pending))break;l=(f=l).next,f.next=null,a.lastBaseUpdate=f,a.shared.pending=null}}if(null===c&&(s=d),a.baseState=s,a.firstBaseUpdate=u,a.lastBaseUpdate=c,null!==(t=a.shared.interleaved)){a=t;do{i|=a.lane,a=a.next}while(a!==t)}else null===o&&(a.shared.lanes=0);Ms|=i,e.lanes=i,e.memoizedState=d}}function Wo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var Vo={},Qo=Ca(Vo),qo=Ca(Vo),Yo=Ca(Vo);function Go(e){if(e===Vo)throw Error(o(174));return e}function Ko(e,t){switch(Oa(Yo,t),Oa(qo,e),Oa(Qo,Vo),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:se(null,"");break;default:t=se(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Ea(Qo),Oa(Qo,t)}function Xo(){Ea(Qo),Ea(qo),Ea(Yo)}function Zo(e){Go(Yo.current);var t=Go(Qo.current),n=se(t,e.type);t!==n&&(Oa(qo,e),Oa(Qo,n))}function Jo(e){qo.current===e&&(Ea(Qo),Ea(qo))}var ei=Ca(0);function ti(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ni=[];function ri(){for(var e=0;e<ni.length;e++)ni[e]._workInProgressVersionPrimary=null;ni.length=0}var ai=w.ReactCurrentDispatcher,oi=w.ReactCurrentBatchConfig,ii=0,li=null,si=null,ui=null,ci=!1,di=!1,fi=0,pi=0;function hi(){throw Error(o(321))}function gi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function mi(e,t,n,r,a,i){if(ii=i,li=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ai.current=null===e||null===e.memoizedState?Ji:el,e=n(r,a),di){i=0;do{if(di=!1,fi=0,25<=i)throw Error(o(301));i+=1,ui=si=null,t.updateQueue=null,ai.current=tl,e=n(r,a)}while(di)}if(ai.current=Zi,t=null!==si&&null!==si.next,ii=0,ui=si=li=null,ci=!1,t)throw Error(o(300));return e}function vi(){var e=0!==fi;return fi=0,e}function yi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ui?li.memoizedState=ui=e:ui=ui.next=e,ui}function bi(){if(null===si){var e=li.alternate;e=null!==e?e.memoizedState:null}else e=si.next;var t=null===ui?li.memoizedState:ui.next;if(null!==t)ui=t,si=e;else{if(null===e)throw Error(o(310));e={memoizedState:(si=e).memoizedState,baseState:si.baseState,baseQueue:si.baseQueue,queue:si.queue,next:null},null===ui?li.memoizedState=ui=e:ui=ui.next=e}return ui}function wi(e,t){return"function"==typeof t?t(e):t}function Si(e){var t=bi(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=si,a=r.baseQueue,i=n.pending;if(null!==i){if(null!==a){var l=a.next;a.next=i.next,i.next=l}r.baseQueue=a=i,n.pending=null}if(null!==a){i=a.next,r=r.baseState;var s=l=null,u=null,c=i;do{var d=c.lane;if((ii&d)===d)null!==u&&(u=u.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var f={lane:d,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===u?(s=u=f,l=r):u=u.next=f,li.lanes|=d,Ms|=d}c=c.next}while(null!==c&&c!==i);null===u?l=r:u.next=s,lr(r,t.memoizedState)||(bl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=u,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{i=a.lane,li.lanes|=i,Ms|=i,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function ki(e){var t=bi(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,i=t.memoizedState;if(null!==a){n.pending=null;var l=a=a.next;do{i=e(i,l.action),l=l.next}while(l!==a);lr(i,t.memoizedState)||(bl=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function xi(){}function Ci(e,t){var n=li,r=bi(),a=t(),i=!lr(r.memoizedState,a);if(i&&(r.memoizedState=a,bl=!0),r=r.queue,Mi(Di.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==ui&&1&ui.memoizedState.tag){if(n.flags|=2048,_i(9,Oi.bind(null,n,r,a,t),void 0,null),null===Ts)throw Error(o(349));30&ii||Ei(n,t,a)}return a}function Ei(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=li.updateQueue)?(t={lastEffect:null,stores:null},li.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Oi(e,t,n,r){t.value=n,t.getSnapshot=r,Ii(t)&&Ti(e)}function Di(e,t,n){return n((function(){Ii(t)&&Ti(e)}))}function Ii(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function Ti(e){var t=Lo(e,1);null!==t&&nu(t,e,1,-1)}function Pi(e){var t=yi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:wi,lastRenderedState:e},t.queue=e,e=e.dispatch=Yi.bind(null,li,e),[t.memoizedState,e]}function _i(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=li.updateQueue)?(t={lastEffect:null,stores:null},li.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Ni(){return bi().memoizedState}function Ai(e,t,n,r){var a=yi();li.flags|=e,a.memoizedState=_i(1|t,n,void 0,void 0===r?null:r)}function Ri(e,t,n,r){var a=bi();r=void 0===r?null:r;var o=void 0;if(null!==si){var i=si.memoizedState;if(o=i.destroy,null!==r&&gi(r,i.deps))return void(a.memoizedState=_i(t,n,o,r))}li.flags|=e,a.memoizedState=_i(1|t,n,o,r)}function Li(e,t){return Ai(8390656,8,e,t)}function Mi(e,t){return Ri(2048,8,e,t)}function zi(e,t){return Ri(4,2,e,t)}function ji(e,t){return Ri(4,4,e,t)}function Fi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ui(e,t,n){return n=null!=n?n.concat([e]):null,Ri(4,4,Fi.bind(null,t,e),n)}function Bi(){}function $i(e,t){var n=bi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&gi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Hi(e,t){var n=bi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&gi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Wi(e,t,n){return 21&ii?(lr(n,t)||(n=gt(),li.lanes|=n,Ms|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,bl=!0),e.memoizedState=n)}function Vi(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=oi.transition;oi.transition={};try{e(!1),t()}finally{bt=n,oi.transition=r}}function Qi(){return bi().memoizedState}function qi(e,t,n){var r=tu(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Gi(e)?Ki(t,n):null!==(n=Ro(e,t,n,r))&&(nu(n,e,r,eu()),Xi(n,t,r))}function Yi(e,t,n){var r=tu(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Gi(e))Ki(t,a);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=o(i,n);if(a.hasEagerState=!0,a.eagerState=l,lr(l,i)){var s=t.interleaved;return null===s?(a.next=a,Ao(t)):(a.next=s.next,s.next=a),void(t.interleaved=a)}}catch(e){}null!==(n=Ro(e,t,a,r))&&(nu(n,e,r,a=eu()),Xi(n,t,r))}}function Gi(e){var t=e.alternate;return e===li||null!==t&&t===li}function Ki(e,t){di=ci=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Xi(e,t,n){if(4194240&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}var Zi={readContext:_o,useCallback:hi,useContext:hi,useEffect:hi,useImperativeHandle:hi,useInsertionEffect:hi,useLayoutEffect:hi,useMemo:hi,useReducer:hi,useRef:hi,useState:hi,useDebugValue:hi,useDeferredValue:hi,useTransition:hi,useMutableSource:hi,useSyncExternalStore:hi,useId:hi,unstable_isNewReconciler:!1},Ji={readContext:_o,useCallback:function(e,t){return yi().memoizedState=[e,void 0===t?null:t],e},useContext:_o,useEffect:Li,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ai(4194308,4,Fi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ai(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ai(4,2,e,t)},useMemo:function(e,t){var n=yi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=yi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=qi.bind(null,li,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},yi().memoizedState=e},useState:Pi,useDebugValue:Bi,useDeferredValue:function(e){return yi().memoizedState=e},useTransition:function(){var e=Pi(!1),t=e[0];return e=Vi.bind(null,e[1]),yi().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=li,a=yi();if(ao){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===Ts)throw Error(o(349));30&ii||Ei(r,t,n)}a.memoizedState=n;var i={value:n,getSnapshot:t};return a.queue=i,Li(Di.bind(null,r,i,e),[e]),r.flags|=2048,_i(9,Oi.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=yi(),t=Ts.identifierPrefix;if(ao){var n=Xa;t=":"+t+"R"+(n=(Ka&~(1<<32-it(Ka)-1)).toString(32)+n),0<(n=fi++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=pi++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},el={readContext:_o,useCallback:$i,useContext:_o,useEffect:Mi,useImperativeHandle:Ui,useInsertionEffect:zi,useLayoutEffect:ji,useMemo:Hi,useReducer:Si,useRef:Ni,useState:function(){return Si(wi)},useDebugValue:Bi,useDeferredValue:function(e){return Wi(bi(),si.memoizedState,e)},useTransition:function(){return[Si(wi)[0],bi().memoizedState]},useMutableSource:xi,useSyncExternalStore:Ci,useId:Qi,unstable_isNewReconciler:!1},tl={readContext:_o,useCallback:$i,useContext:_o,useEffect:Mi,useImperativeHandle:Ui,useInsertionEffect:zi,useLayoutEffect:ji,useMemo:Hi,useReducer:ki,useRef:Ni,useState:function(){return ki(wi)},useDebugValue:Bi,useDeferredValue:function(e){var t=bi();return null===si?t.memoizedState=e:Wi(t,si.memoizedState,e)},useTransition:function(){return[ki(wi)[0],bi().memoizedState]},useMutableSource:xi,useSyncExternalStore:Ci,useId:Qi,unstable_isNewReconciler:!1};function nl(e,t){if(e&&e.defaultProps){for(var n in t=z({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}function rl(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:z({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var al={isMounted:function(e){return!!(e=e._reactInternals)&&$e(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=eu(),a=tu(e),o=Fo(r,a);o.payload=t,null!=n&&(o.callback=n),null!==(t=Uo(e,o,a))&&(nu(t,e,a,r),Bo(t,e,a))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=eu(),a=tu(e),o=Fo(r,a);o.tag=1,o.payload=t,null!=n&&(o.callback=n),null!==(t=Uo(e,o,a))&&(nu(t,e,a,r),Bo(t,e,a))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=eu(),r=tu(e),a=Fo(n,r);a.tag=2,null!=t&&(a.callback=t),null!==(t=Uo(e,a,r))&&(nu(t,e,r,n),Bo(t,e,r))}};function ol(e,t,n,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!(t.prototype&&t.prototype.isPureReactComponent&&sr(n,r)&&sr(a,o))}function il(e,t,n){var r=!1,a=Da,o=t.contextType;return"object"==typeof o&&null!==o?o=_o(o):(a=Na(t)?Pa:Ia.current,o=(r=null!=(r=t.contextTypes))?_a(e,a):Da),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=al,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function ll(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&al.enqueueReplaceState(t,t.state,null)}function sl(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs={},zo(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=_o(o):(o=Na(t)?Pa:Ia.current,a.context=_a(e,o)),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(rl(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&al.enqueueReplaceState(a,a.state,null),Ho(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function ul(e,t){try{var n="",r=t;do{n+=B(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a,digest:null}}function cl(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function dl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var fl="function"==typeof WeakMap?WeakMap:Map;function pl(e,t,n){(n=Fo(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ws||(Ws=!0,Vs=r),dl(0,t)},n}function hl(e,t,n){(n=Fo(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){dl(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){dl(0,t),"function"!=typeof r&&(null===Qs?Qs=new Set([this]):Qs.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function gl(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new fl;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=Eu.bind(null,e,t,n),t.then(e,e))}function ml(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function vl(e,t,n,r,a){return 1&e.mode?(e.flags|=65536,e.lanes=a,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Fo(-1,1)).tag=2,Uo(n,t,1))),n.lanes|=1),e)}var yl=w.ReactCurrentOwner,bl=!1;function wl(e,t,n,r){t.child=null===e?ko(t,null,n,r):So(t,e.child,n,r)}function Sl(e,t,n,r,a){n=n.render;var o=t.ref;return Po(t,a),r=mi(e,t,n,r,o,a),n=vi(),null===e||bl?(ao&&n&&eo(t),t.flags|=1,wl(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Wl(e,t,a))}function kl(e,t,n,r,a){if(null===e){var o=n.type;return"function"!=typeof o||Nu(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ru(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,xl(e,t,o,r,a))}if(o=e.child,!(e.lanes&a)){var i=o.memoizedProps;if((n=null!==(n=n.compare)?n:sr)(i,r)&&e.ref===t.ref)return Wl(e,t,a)}return t.flags|=1,(e=Au(o,r)).ref=t.ref,e.return=t,t.child=e}function xl(e,t,n,r,a){if(null!==e){var o=e.memoizedProps;if(sr(o,r)&&e.ref===t.ref){if(bl=!1,t.pendingProps=r=o,!(e.lanes&a))return t.lanes=e.lanes,Wl(e,t,a);131072&e.flags&&(bl=!0)}}return Ol(e,t,n,r,a)}function Cl(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(1&t.mode){if(!(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Oa(As,Ns),Ns|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:n,Oa(As,Ns),Ns|=r}else t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Oa(As,Ns),Ns|=n;else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,Oa(As,Ns),Ns|=r;return wl(e,t,a,n),t.child}function El(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Ol(e,t,n,r,a){var o=Na(n)?Pa:Ia.current;return o=_a(t,o),Po(t,a),n=mi(e,t,n,r,o,a),r=vi(),null===e||bl?(ao&&r&&eo(t),t.flags|=1,wl(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Wl(e,t,a))}function Dl(e,t,n,r,a){if(Na(n)){var o=!0;Ma(t)}else o=!1;if(Po(t,a),null===t.stateNode)Hl(e,t),il(t,n,r),sl(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var s=i.context,u=n.contextType;u="object"==typeof u&&null!==u?_o(u):_a(t,u=Na(n)?Pa:Ia.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||s!==u)&&ll(t,i,r,u),Mo=!1;var f=t.memoizedState;i.state=f,Ho(t,r,i,a),s=t.memoizedState,l!==r||f!==s||Ta.current||Mo?("function"==typeof c&&(rl(t,n,c,r),s=t.memoizedState),(l=Mo||ol(t,n,l,r,f,s,u))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=s),i.props=r,i.state=s,i.context=u,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,jo(e,t),l=t.memoizedProps,u=t.type===t.elementType?l:nl(t.type,l),i.props=u,d=t.pendingProps,f=i.context,s="object"==typeof(s=n.contextType)&&null!==s?_o(s):_a(t,s=Na(n)?Pa:Ia.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==d||f!==s)&&ll(t,i,r,s),Mo=!1,f=t.memoizedState,i.state=f,Ho(t,r,i,a);var h=t.memoizedState;l!==d||f!==h||Ta.current||Mo?("function"==typeof p&&(rl(t,n,p,r),h=t.memoizedState),(u=Mo||ol(t,n,u,r,f,h,s)||!1)?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,s),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,s)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=s,r=u):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return Il(e,t,n,r,o,a)}function Il(e,t,n,r,a,o){El(e,t);var i=!!(128&t.flags);if(!r&&!i)return a&&za(t,n,!1),Wl(e,t,o);r=t.stateNode,yl.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=So(t,e.child,null,o),t.child=So(t,null,l,o)):wl(e,t,l,o),t.memoizedState=r.state,a&&za(t,n,!0),t.child}function Tl(e){var t=e.stateNode;t.pendingContext?Ra(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ra(0,t.context,!1),Ko(e,t.containerInfo)}function Pl(e,t,n,r,a){return ho(),go(a),t.flags|=256,wl(e,t,n,r),t.child}var _l,Nl,Al,Rl,Ll={dehydrated:null,treeContext:null,retryLane:0};function Ml(e){return{baseLanes:e,cachePool:null,transitions:null}}function zl(e,t,n){var r,a=t.pendingProps,i=ei.current,l=!1,s=!!(128&t.flags);if((r=s)||(r=(null===e||null!==e.memoizedState)&&!!(2&i)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Oa(ei,1&i),null===e)return uo(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(1&t.mode?"$!"===e.data?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(s=a.children,e=a.fallback,l?(a=t.mode,l=t.child,s={mode:"hidden",children:s},1&a||null===l?l=Mu(s,a,0,null):(l.childLanes=0,l.pendingProps=s),e=Lu(e,a,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Ml(n),t.memoizedState=Ll,e):jl(t,s));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,a,i,l){if(n)return 256&t.flags?(t.flags&=-257,Fl(e,t,l,r=cl(Error(o(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,a=t.mode,r=Mu({mode:"visible",children:r.children},a,0,null),(i=Lu(i,a,l,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,1&t.mode&&So(t,e.child,null,l),t.child.memoizedState=Ml(l),t.memoizedState=Ll,i);if(!(1&t.mode))return Fl(e,t,l,null);if("$!"===a.data){if(r=a.nextSibling&&a.nextSibling.dataset)var s=r.dgst;return r=s,Fl(e,t,l,r=cl(i=Error(o(419)),r,void 0))}if(s=!!(l&e.childLanes),bl||s){if(null!==(r=Ts)){switch(l&-l){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=a&(r.suspendedLanes|l)?0:a)&&a!==i.retryLane&&(i.retryLane=a,Lo(e,a),nu(r,e,a,-1))}return gu(),Fl(e,t,l,r=cl(Error(o(421))))}return"$?"===a.data?(t.flags|=128,t.child=e.child,t=Du.bind(null,e),a._reactRetry=t,null):(e=i.treeContext,ro=ua(a.nextSibling),no=t,ao=!0,oo=null,null!==e&&(qa[Ya++]=Ka,qa[Ya++]=Xa,qa[Ya++]=Ga,Ka=e.id,Xa=e.overflow,Ga=t),(t=jl(t,r.children)).flags|=4096,t)}(e,t,s,a,r,i,n);if(l){l=a.fallback,s=t.mode,r=(i=e.child).sibling;var u={mode:"hidden",children:a.children};return 1&s||t.child===i?(a=Au(i,u)).subtreeFlags=14680064&i.subtreeFlags:((a=t.child).childLanes=0,a.pendingProps=u,t.deletions=null),null!==r?l=Au(r,l):(l=Lu(l,s,n,null)).flags|=2,l.return=t,a.return=t,a.sibling=l,t.child=a,a=l,l=t.child,s=null===(s=e.child.memoizedState)?Ml(n):{baseLanes:s.baseLanes|n,cachePool:null,transitions:s.transitions},l.memoizedState=s,l.childLanes=e.childLanes&~n,t.memoizedState=Ll,a}return e=(l=e.child).sibling,a=Au(l,{mode:"visible",children:a.children}),!(1&t.mode)&&(a.lanes=n),a.return=t,a.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=a,t.memoizedState=null,a}function jl(e,t){return(t=Mu({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Fl(e,t,n,r){return null!==r&&go(r),So(t,e.child,null,n),(e=jl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Ul(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),To(e.return,t,n)}function Bl(e,t,n,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a)}function $l(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(wl(e,t,r.children,n),2&(r=ei.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ul(e,n,t);else if(19===e.tag)Ul(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Oa(ei,r),1&t.mode)switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===ti(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Bl(t,!1,a,n,o);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===ti(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Bl(t,!0,n,null,o);break;case"together":Bl(t,!1,null,null,void 0);break;default:t.memoizedState=null}else t.memoizedState=null;return t.child}function Hl(e,t){!(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Wl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ms|=t.lanes,!(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Au(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Au(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Vl(e,t){if(!ao)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ql(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function ql(e,t,n){var r=t.pendingProps;switch(to(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Ql(t),null;case 1:case 17:return Na(t.type)&&Aa(),Ql(t),null;case 3:return r=t.stateNode,Xo(),Ea(Ta),Ea(Ia),ri(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(fo(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==oo&&(iu(oo),oo=null))),Nl(e,t),Ql(t),null;case 5:Jo(t);var a=Go(Yo.current);if(n=t.type,null!==e&&null!=t.stateNode)Al(e,t,n,r,a),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(o(166));return Ql(t),null}if(e=Go(Qo.current),fo(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[fa]=t,r[pa]=i,e=!!(1&t.mode),n){case"dialog":Fr("cancel",r),Fr("close",r);break;case"iframe":case"object":case"embed":Fr("load",r);break;case"video":case"audio":for(a=0;a<Lr.length;a++)Fr(Lr[a],r);break;case"source":Fr("error",r);break;case"img":case"image":case"link":Fr("error",r),Fr("load",r);break;case"details":Fr("toggle",r);break;case"input":K(r,i),Fr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Fr("invalid",r);break;case"textarea":ae(r,i),Fr("invalid",r)}for(var s in ye(n,i),a=null,i)if(i.hasOwnProperty(s)){var u=i[s];"children"===s?"string"==typeof u?r.textContent!==u&&(!0!==i.suppressHydrationWarning&&Zr(r.textContent,u,e),a=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(!0!==i.suppressHydrationWarning&&Zr(r.textContent,u,e),a=["children",""+u]):l.hasOwnProperty(s)&&null!=u&&"onScroll"===s&&Fr("scroll",r)}switch(n){case"input":Q(r),J(r,i,!0);break;case"textarea":Q(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Jr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{s=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[fa]=t,e[pa]=r,_l(e,t,!1,!1),t.stateNode=e;e:{switch(s=be(n,r),n){case"dialog":Fr("cancel",e),Fr("close",e),a=r;break;case"iframe":case"object":case"embed":Fr("load",e),a=r;break;case"video":case"audio":for(a=0;a<Lr.length;a++)Fr(Lr[a],e);a=r;break;case"source":Fr("error",e),a=r;break;case"img":case"image":case"link":Fr("error",e),Fr("load",e),a=r;break;case"details":Fr("toggle",e),a=r;break;case"input":K(e,r),a=G(e,r),Fr("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=z({},r,{value:void 0}),Fr("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),Fr("invalid",e)}for(i in ye(n,a),u=a)if(u.hasOwnProperty(i)){var c=u[i];"style"===i?me(e,c):"dangerouslySetInnerHTML"===i?null!=(c=c?c.__html:void 0)&&de(e,c):"children"===i?"string"==typeof c?("textarea"!==n||""!==c)&&fe(e,c):"number"==typeof c&&fe(e,""+c):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=c&&"onScroll"===i&&Fr("scroll",e):null!=c&&b(e,i,c,s))}switch(n){case"input":Q(e),J(e,r,!1);break;case"textarea":Q(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+W(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Ql(t),null;case 6:if(e&&null!=t.stateNode)Rl(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(n=Go(Yo.current),Go(Qo.current),fo(t)){if(r=t.stateNode,n=t.memoizedProps,r[fa]=t,(i=r.nodeValue!==n)&&null!==(e=no))switch(e.tag){case 3:Zr(r.nodeValue,n,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Zr(r.nodeValue,n,!!(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[fa]=t,t.stateNode=r}return Ql(t),null;case 13:if(Ea(ei),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ao&&null!==ro&&1&t.mode&&!(128&t.flags))po(),ho(),t.flags|=98560,i=!1;else if(i=fo(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(o(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(o(317));i[fa]=t}else ho(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Ql(t),i=!1}else null!==oo&&(iu(oo),oo=null),i=!0;if(!i)return 65536&t.flags?t:null}return 128&t.flags?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,1&t.mode&&(null===e||1&ei.current?0===Rs&&(Rs=3):gu())),null!==t.updateQueue&&(t.flags|=4),Ql(t),null);case 4:return Xo(),Nl(e,t),null===e&&$r(t.stateNode.containerInfo),Ql(t),null;case 10:return Io(t.type._context),Ql(t),null;case 19:if(Ea(ei),null===(i=t.memoizedState))return Ql(t),null;if(r=!!(128&t.flags),null===(s=i.rendering))if(r)Vl(i,!1);else{if(0!==Rs||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(s=ti(e))){for(t.flags|=128,Vl(i,!1),null!==(r=s.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(s=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=s.childLanes,i.lanes=s.lanes,i.child=s.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=s.memoizedProps,i.memoizedState=s.memoizedState,i.updateQueue=s.updateQueue,i.type=s.type,e=s.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Oa(ei,1&ei.current|2),t.child}e=e.sibling}null!==i.tail&&Xe()>$s&&(t.flags|=128,r=!0,Vl(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ti(s))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Vl(i,!0),null===i.tail&&"hidden"===i.tailMode&&!s.alternate&&!ao)return Ql(t),null}else 2*Xe()-i.renderingStartTime>$s&&1073741824!==n&&(t.flags|=128,r=!0,Vl(i,!1),t.lanes=4194304);i.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=i.last)?n.sibling=s:t.child=s,i.last=s)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Xe(),t.sibling=null,n=ei.current,Oa(ei,r?1&n|2:1&n),t):(Ql(t),null);case 22:case 23:return du(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&1&t.mode?!!(1073741824&Ns)&&(Ql(t),6&t.subtreeFlags&&(t.flags|=8192)):Ql(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}function Yl(e,t){switch(to(t),t.tag){case 1:return Na(t.type)&&Aa(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Xo(),Ea(Ta),Ea(Ia),ri(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 5:return Jo(t),null;case 13:if(Ea(ei),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));ho()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Ea(ei),null;case 4:return Xo(),null;case 10:return Io(t.type._context),null;case 22:case 23:return du(),null;default:return null}}_l=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Nl=function(){},Al=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Go(Qo.current);var o,i=null;switch(n){case"input":a=G(e,a),r=G(e,r),i=[];break;case"select":a=z({},a,{value:void 0}),r=z({},r,{value:void 0}),i=[];break;case"textarea":a=re(e,a),r=re(e,r),i=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(c in ye(n,r),n=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c){var s=a[c];for(o in s)s.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(l.hasOwnProperty(c)?i||(i=[]):(i=i||[]).push(c,null));for(c in r){var u=r[c];if(s=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&u!==s&&(null!=u||null!=s))if("style"===c)if(s){for(o in s)!s.hasOwnProperty(o)||u&&u.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in u)u.hasOwnProperty(o)&&s[o]!==u[o]&&(n||(n={}),n[o]=u[o])}else n||(i||(i=[]),i.push(c,n)),n=u;else"dangerouslySetInnerHTML"===c?(u=u?u.__html:void 0,s=s?s.__html:void 0,null!=u&&s!==u&&(i=i||[]).push(c,u)):"children"===c?"string"!=typeof u&&"number"!=typeof u||(i=i||[]).push(c,""+u):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(l.hasOwnProperty(c)?(null!=u&&"onScroll"===c&&Fr("scroll",e),i||s===u||(i=[])):(i=i||[]).push(c,u))}n&&(i=i||[]).push("style",n);var c=i;(t.updateQueue=c)&&(t.flags|=4)}},Rl=function(e,t,n,r){n!==r&&(t.flags|=4)};var Gl=!1,Kl=!1,Xl="function"==typeof WeakSet?WeakSet:Set,Zl=null;function Jl(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Cu(e,t,n)}else n.current=null}function es(e,t,n){try{n()}catch(n){Cu(e,t,n)}}var ts=!1;function ns(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var o=a.destroy;a.destroy=void 0,void 0!==o&&es(t,n,o)}a=a.next}while(a!==r)}}function rs(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function as(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function os(e){var t=e.alternate;null!==t&&(e.alternate=null,os(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[fa],delete t[pa],delete t[ga],delete t[ma],delete t[va]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function is(e){return 5===e.tag||3===e.tag||4===e.tag}function ls(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||is(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ss(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(ss(e,t,n),e=e.sibling;null!==e;)ss(e,t,n),e=e.sibling}function us(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(us(e,t,n),e=e.sibling;null!==e;)us(e,t,n),e=e.sibling}var cs=null,ds=!1;function fs(e,t,n){for(n=n.child;null!==n;)ps(e,t,n),n=n.sibling}function ps(e,t,n){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(at,n)}catch(e){}switch(n.tag){case 5:Kl||Jl(n,t);case 6:var r=cs,a=ds;cs=null,fs(e,t,n),ds=a,null!==(cs=r)&&(ds?(e=cs,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):cs.removeChild(n.stateNode));break;case 18:null!==cs&&(ds?(e=cs,n=n.stateNode,8===e.nodeType?sa(e.parentNode,n):1===e.nodeType&&sa(e,n),$t(e)):sa(cs,n.stateNode));break;case 4:r=cs,a=ds,cs=n.stateNode.containerInfo,ds=!0,fs(e,t,n),cs=r,ds=a;break;case 0:case 11:case 14:case 15:if(!Kl&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var o=a,i=o.destroy;o=o.tag,void 0!==i&&(2&o||4&o)&&es(n,t,i),a=a.next}while(a!==r)}fs(e,t,n);break;case 1:if(!Kl&&(Jl(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Cu(n,t,e)}fs(e,t,n);break;case 21:fs(e,t,n);break;case 22:1&n.mode?(Kl=(r=Kl)||null!==n.memoizedState,fs(e,t,n),Kl=r):fs(e,t,n);break;default:fs(e,t,n)}}function hs(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Xl),t.forEach((function(t){var r=Iu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function gs(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{var i=e,l=t,s=l;e:for(;null!==s;){switch(s.tag){case 5:cs=s.stateNode,ds=!1;break e;case 3:case 4:cs=s.stateNode.containerInfo,ds=!0;break e}s=s.return}if(null===cs)throw Error(o(160));ps(i,l,a),cs=null,ds=!1;var u=a.alternate;null!==u&&(u.return=null),a.return=null}catch(e){Cu(a,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)ms(t,e),t=t.sibling}function ms(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(gs(t,e),vs(e),4&r){try{ns(3,e,e.return),rs(3,e)}catch(t){Cu(e,e.return,t)}try{ns(5,e,e.return)}catch(t){Cu(e,e.return,t)}}break;case 1:gs(t,e),vs(e),512&r&&null!==n&&Jl(n,n.return);break;case 5:if(gs(t,e),vs(e),512&r&&null!==n&&Jl(n,n.return),32&e.flags){var a=e.stateNode;try{fe(a,"")}catch(t){Cu(e,e.return,t)}}if(4&r&&null!=(a=e.stateNode)){var i=e.memoizedProps,l=null!==n?n.memoizedProps:i,s=e.type,u=e.updateQueue;if(e.updateQueue=null,null!==u)try{"input"===s&&"radio"===i.type&&null!=i.name&&X(a,i),be(s,l);var c=be(s,i);for(l=0;l<u.length;l+=2){var d=u[l],f=u[l+1];"style"===d?me(a,f):"dangerouslySetInnerHTML"===d?de(a,f):"children"===d?fe(a,f):b(a,d,f,c)}switch(s){case"input":Z(a,i);break;case"textarea":oe(a,i);break;case"select":var p=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!i.multiple;var h=i.value;null!=h?ne(a,!!i.multiple,h,!1):p!==!!i.multiple&&(null!=i.defaultValue?ne(a,!!i.multiple,i.defaultValue,!0):ne(a,!!i.multiple,i.multiple?[]:"",!1))}a[pa]=i}catch(t){Cu(e,e.return,t)}}break;case 6:if(gs(t,e),vs(e),4&r){if(null===e.stateNode)throw Error(o(162));a=e.stateNode,i=e.memoizedProps;try{a.nodeValue=i}catch(t){Cu(e,e.return,t)}}break;case 3:if(gs(t,e),vs(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{$t(t.containerInfo)}catch(t){Cu(e,e.return,t)}break;case 4:default:gs(t,e),vs(e);break;case 13:gs(t,e),vs(e),8192&(a=e.child).flags&&(i=null!==a.memoizedState,a.stateNode.isHidden=i,!i||null!==a.alternate&&null!==a.alternate.memoizedState||(Bs=Xe())),4&r&&hs(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Kl=(c=Kl)||d,gs(t,e),Kl=c):gs(t,e),vs(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!d&&1&e.mode)for(Zl=e,d=e.child;null!==d;){for(f=Zl=d;null!==Zl;){switch(h=(p=Zl).child,p.tag){case 0:case 11:case 14:case 15:ns(4,p,p.return);break;case 1:Jl(p,p.return);var g=p.stateNode;if("function"==typeof g.componentWillUnmount){r=p,n=p.return;try{t=r,g.props=t.memoizedProps,g.state=t.memoizedState,g.componentWillUnmount()}catch(e){Cu(r,n,e)}}break;case 5:Jl(p,p.return);break;case 22:if(null!==p.memoizedState){Ss(f);continue}}null!==h?(h.return=p,Zl=h):Ss(f)}d=d.sibling}e:for(d=null,f=e;;){if(5===f.tag){if(null===d){d=f;try{a=f.stateNode,c?"function"==typeof(i=a.style).setProperty?i.setProperty("display","none","important"):i.display="none":(s=f.stateNode,l=null!=(u=f.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null,s.style.display=ge("display",l))}catch(t){Cu(e,e.return,t)}}}else if(6===f.tag){if(null===d)try{f.stateNode.nodeValue=c?"":f.memoizedProps}catch(t){Cu(e,e.return,t)}}else if((22!==f.tag&&23!==f.tag||null===f.memoizedState||f===e)&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;null===f.sibling;){if(null===f.return||f.return===e)break e;d===f&&(d=null),f=f.return}d===f&&(d=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:gs(t,e),vs(e),4&r&&hs(e);case 21:}}function vs(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(is(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(fe(a,""),r.flags&=-33),us(e,ls(e),a);break;case 3:case 4:var i=r.stateNode.containerInfo;ss(e,ls(e),i);break;default:throw Error(o(161))}}catch(t){Cu(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function ys(e,t,n){Zl=e,bs(e,t,n)}function bs(e,t,n){for(var r=!!(1&e.mode);null!==Zl;){var a=Zl,o=a.child;if(22===a.tag&&r){var i=null!==a.memoizedState||Gl;if(!i){var l=a.alternate,s=null!==l&&null!==l.memoizedState||Kl;l=Gl;var u=Kl;if(Gl=i,(Kl=s)&&!u)for(Zl=a;null!==Zl;)s=(i=Zl).child,22===i.tag&&null!==i.memoizedState?ks(a):null!==s?(s.return=i,Zl=s):ks(a);for(;null!==o;)Zl=o,bs(o,t,n),o=o.sibling;Zl=a,Gl=l,Kl=u}ws(e)}else 8772&a.subtreeFlags&&null!==o?(o.return=a,Zl=o):ws(e)}}function ws(e){for(;null!==Zl;){var t=Zl;if(8772&t.flags){var n=t.alternate;try{if(8772&t.flags)switch(t.tag){case 0:case 11:case 15:Kl||rs(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Kl)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:nl(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&Wo(t,i,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Wo(t,l,n)}break;case 5:var s=t.stateNode;if(null===n&&4&t.flags){n=s;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&n.focus();break;case"img":u.src&&(n.src=u.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var d=c.memoizedState;if(null!==d){var f=d.dehydrated;null!==f&&$t(f)}}}break;default:throw Error(o(163))}Kl||512&t.flags&&as(t)}catch(e){Cu(t,t.return,e)}}if(t===e){Zl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Zl=n;break}Zl=t.return}}function Ss(e){for(;null!==Zl;){var t=Zl;if(t===e){Zl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Zl=n;break}Zl=t.return}}function ks(e){for(;null!==Zl;){var t=Zl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{rs(4,t)}catch(e){Cu(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){Cu(t,a,e)}}var o=t.return;try{as(t)}catch(e){Cu(t,o,e)}break;case 5:var i=t.return;try{as(t)}catch(e){Cu(t,i,e)}}}catch(e){Cu(t,t.return,e)}if(t===e){Zl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Zl=l;break}Zl=t.return}}var xs,Cs=Math.ceil,Es=w.ReactCurrentDispatcher,Os=w.ReactCurrentOwner,Ds=w.ReactCurrentBatchConfig,Is=0,Ts=null,Ps=null,_s=0,Ns=0,As=Ca(0),Rs=0,Ls=null,Ms=0,zs=0,js=0,Fs=null,Us=null,Bs=0,$s=1/0,Hs=null,Ws=!1,Vs=null,Qs=null,qs=!1,Ys=null,Gs=0,Ks=0,Xs=null,Zs=-1,Js=0;function eu(){return 6&Is?Xe():-1!==Zs?Zs:Zs=Xe()}function tu(e){return 1&e.mode?2&Is&&0!==_s?_s&-_s:null!==mo.transition?(0===Js&&(Js=gt()),Js):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Kt(e.type):1}function nu(e,t,n,r){if(50<Ks)throw Ks=0,Xs=null,Error(o(185));vt(e,n,r),2&Is&&e===Ts||(e===Ts&&(!(2&Is)&&(zs|=n),4===Rs&&lu(e,_s)),ru(e,r),1===n&&0===Is&&!(1&t.mode)&&($s=Xe()+500,Fa&&$a()))}function ru(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=e.pendingLanes;0<o;){var i=31-it(o),l=1<<i,s=a[i];-1===s?l&n&&!(l&r)||(a[i]=pt(l,t)):s<=t&&(e.expiredLanes|=l),o&=~l}}(e,t);var r=ft(e,e===Ts?_s:0);if(0===r)null!==n&&Ye(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ye(n),1===t)0===e.tag?function(e){Fa=!0,Ba(e)}(su.bind(null,e)):Ba(su.bind(null,e)),ia((function(){!(6&Is)&&$a()})),n=null;else{switch(wt(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Tu(n,au.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function au(e,t){if(Zs=-1,Js=0,6&Is)throw Error(o(327));var n=e.callbackNode;if(ku()&&e.callbackNode!==n)return null;var r=ft(e,e===Ts?_s:0);if(0===r)return null;if(30&r||r&e.expiredLanes||t)t=mu(e,r);else{t=r;var a=Is;Is|=2;var i=hu();for(Ts===e&&_s===t||(Hs=null,$s=Xe()+500,fu(e,t));;)try{yu();break}catch(t){pu(e,t)}Do(),Es.current=i,Is=a,null!==Ps?t=0:(Ts=null,_s=0,t=Rs)}if(0!==t){if(2===t&&0!==(a=ht(e))&&(r=a,t=ou(e,a)),1===t)throw n=Ls,fu(e,0),lu(e,r),ru(e,Xe()),n;if(6===t)lu(e,r);else{if(a=e.current.alternate,!(30&r||function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],o=a.getSnapshot;a=a.value;try{if(!lr(o(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)||(t=mu(e,r),2===t&&(i=ht(e),0!==i&&(r=i,t=ou(e,i))),1!==t)))throw n=Ls,fu(e,0),lu(e,r),ru(e,Xe()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(o(345));case 2:case 5:Su(e,Us,Hs);break;case 3:if(lu(e,r),(130023424&r)===r&&10<(t=Bs+500-Xe())){if(0!==ft(e,0))break;if(((a=e.suspendedLanes)&r)!==r){eu(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(Su.bind(null,e,Us,Hs),t);break}Su(e,Us,Hs);break;case 4:if(lu(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var l=31-it(r);i=1<<l,(l=t[l])>a&&(a=l),r&=~i}if(r=a,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Cs(r/1960))-r)){e.timeoutHandle=ra(Su.bind(null,e,Us,Hs),r);break}Su(e,Us,Hs);break;default:throw Error(o(329))}}}return ru(e,Xe()),e.callbackNode===n?au.bind(null,e):null}function ou(e,t){var n=Fs;return e.current.memoizedState.isDehydrated&&(fu(e,t).flags|=256),2!==(e=mu(e,t))&&(t=Us,Us=n,null!==t&&iu(t)),e}function iu(e){null===Us?Us=e:Us.push.apply(Us,e)}function lu(e,t){for(t&=~js,t&=~zs,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function su(e){if(6&Is)throw Error(o(327));ku();var t=ft(e,0);if(!(1&t))return ru(e,Xe()),null;var n=mu(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=ou(e,r))}if(1===n)throw n=Ls,fu(e,0),lu(e,t),ru(e,Xe()),n;if(6===n)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Su(e,Us,Hs),ru(e,Xe()),null}function uu(e,t){var n=Is;Is|=1;try{return e(t)}finally{0===(Is=n)&&($s=Xe()+500,Fa&&$a())}}function cu(e){null!==Ys&&0===Ys.tag&&!(6&Is)&&ku();var t=Is;Is|=1;var n=Ds.transition,r=bt;try{if(Ds.transition=null,bt=1,e)return e()}finally{bt=r,Ds.transition=n,!(6&(Is=t))&&$a()}}function du(){Ns=As.current,Ea(As)}function fu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,aa(n)),null!==Ps)for(n=Ps.return;null!==n;){var r=n;switch(to(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Aa();break;case 3:Xo(),Ea(Ta),Ea(Ia),ri();break;case 5:Jo(r);break;case 4:Xo();break;case 13:case 19:Ea(ei);break;case 10:Io(r.type._context);break;case 22:case 23:du()}n=n.return}if(Ts=e,Ps=e=Au(e.current,null),_s=Ns=t,Rs=0,Ls=null,js=zs=Ms=0,Us=Fs=null,null!==No){for(t=0;t<No.length;t++)if(null!==(r=(n=No[t]).interleaved)){n.interleaved=null;var a=r.next,o=n.pending;if(null!==o){var i=o.next;o.next=a,r.next=i}n.pending=r}No=null}return e}function pu(e,t){for(;;){var n=Ps;try{if(Do(),ai.current=Zi,ci){for(var r=li.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}ci=!1}if(ii=0,ui=si=li=null,di=!1,fi=0,Os.current=null,null===n||null===n.return){Rs=1,Ls=t,Ps=null;break}e:{var i=e,l=n.return,s=n,u=t;if(t=_s,s.flags|=32768,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u,d=s,f=d.tag;if(!(1&d.mode||0!==f&&11!==f&&15!==f)){var p=d.alternate;p?(d.updateQueue=p.updateQueue,d.memoizedState=p.memoizedState,d.lanes=p.lanes):(d.updateQueue=null,d.memoizedState=null)}var h=ml(l);if(null!==h){h.flags&=-257,vl(h,l,s,0,t),1&h.mode&&gl(i,c,t),u=c;var g=(t=h).updateQueue;if(null===g){var m=new Set;m.add(u),t.updateQueue=m}else g.add(u);break e}if(!(1&t)){gl(i,c,t),gu();break e}u=Error(o(426))}else if(ao&&1&s.mode){var v=ml(l);if(null!==v){!(65536&v.flags)&&(v.flags|=256),vl(v,l,s,0,t),go(ul(u,s));break e}}i=u=ul(u,s),4!==Rs&&(Rs=2),null===Fs?Fs=[i]:Fs.push(i),i=l;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,$o(i,pl(0,u,t));break e;case 1:s=u;var y=i.type,b=i.stateNode;if(!(128&i.flags||"function"!=typeof y.getDerivedStateFromError&&(null===b||"function"!=typeof b.componentDidCatch||null!==Qs&&Qs.has(b)))){i.flags|=65536,t&=-t,i.lanes|=t,$o(i,hl(i,s,t));break e}}i=i.return}while(null!==i)}wu(n)}catch(e){t=e,Ps===n&&null!==n&&(Ps=n=n.return);continue}break}}function hu(){var e=Es.current;return Es.current=Zi,null===e?Zi:e}function gu(){0!==Rs&&3!==Rs&&2!==Rs||(Rs=4),null===Ts||!(268435455&Ms)&&!(268435455&zs)||lu(Ts,_s)}function mu(e,t){var n=Is;Is|=2;var r=hu();for(Ts===e&&_s===t||(Hs=null,fu(e,t));;)try{vu();break}catch(t){pu(e,t)}if(Do(),Is=n,Es.current=r,null!==Ps)throw Error(o(261));return Ts=null,_s=0,Rs}function vu(){for(;null!==Ps;)bu(Ps)}function yu(){for(;null!==Ps&&!Ge();)bu(Ps)}function bu(e){var t=xs(e.alternate,e,Ns);e.memoizedProps=e.pendingProps,null===t?wu(e):Ps=t,Os.current=null}function wu(e){var t=e;do{var n=t.alternate;if(e=t.return,32768&t.flags){if(null!==(n=Yl(n,t)))return n.flags&=32767,void(Ps=n);if(null===e)return Rs=6,void(Ps=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(n=ql(n,t,Ns)))return void(Ps=n);if(null!==(t=t.sibling))return void(Ps=t);Ps=t=e}while(null!==t);0===Rs&&(Rs=5)}function Su(e,t,n){var r=bt,a=Ds.transition;try{Ds.transition=null,bt=1,function(e,t,n,r){do{ku()}while(null!==Ys);if(6&Is)throw Error(o(327));n=e.finishedWork;var a=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-it(n),o=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~o}}(e,i),e===Ts&&(Ps=Ts=null,_s=0),!(2064&n.subtreeFlags)&&!(2064&n.flags)||qs||(qs=!0,Tu(tt,(function(){return ku(),null}))),i=!!(15990&n.flags),15990&n.subtreeFlags||i){i=Ds.transition,Ds.transition=null;var l=bt;bt=1;var s=Is;Is|=4,Os.current=null,function(e,t){if(ea=Wt,pr(e=fr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var l=0,s=-1,u=-1,c=0,d=0,f=e,p=null;t:for(;;){for(var h;f!==n||0!==a&&3!==f.nodeType||(s=l+a),f!==i||0!==r&&3!==f.nodeType||(u=l+r),3===f.nodeType&&(l+=f.nodeValue.length),null!==(h=f.firstChild);)p=f,f=h;for(;;){if(f===e)break t;if(p===n&&++c===a&&(s=l),p===i&&++d===r&&(u=l),null!==(h=f.nextSibling))break;p=(f=p).parentNode}f=h}n=-1===s||-1===u?null:{start:s,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(ta={focusedElem:e,selectionRange:n},Wt=!1,Zl=t;null!==Zl;)if(e=(t=Zl).child,1028&t.subtreeFlags&&null!==e)e.return=t,Zl=e;else for(;null!==Zl;){t=Zl;try{var g=t.alternate;if(1024&t.flags)switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==g){var m=g.memoizedProps,v=g.memoizedState,y=t.stateNode,b=y.getSnapshotBeforeUpdate(t.elementType===t.type?m:nl(t.type,m),v);y.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(o(163))}}catch(e){Cu(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Zl=e;break}Zl=t.return}g=ts,ts=!1}(e,n),ms(n,e),hr(ta),Wt=!!ea,ta=ea=null,e.current=n,ys(n,e,a),Ke(),Is=s,bt=l,Ds.transition=i}else e.current=n;if(qs&&(qs=!1,Ys=e,Gs=a),0===(i=e.pendingLanes)&&(Qs=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(at,e,void 0,!(128&~e.current.flags))}catch(e){}}(n.stateNode),ru(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((a=t[n]).value,{componentStack:a.stack,digest:a.digest});if(Ws)throw Ws=!1,e=Vs,Vs=null,e;!!(1&Gs)&&0!==e.tag&&ku(),1&(i=e.pendingLanes)?e===Xs?Ks++:(Ks=0,Xs=e):Ks=0,$a()}(e,t,n,r)}finally{Ds.transition=a,bt=r}return null}function ku(){if(null!==Ys){var e=wt(Gs),t=Ds.transition,n=bt;try{if(Ds.transition=null,bt=16>e?16:e,null===Ys)var r=!1;else{if(e=Ys,Ys=null,Gs=0,6&Is)throw Error(o(331));var a=Is;for(Is|=4,Zl=e.current;null!==Zl;){var i=Zl,l=i.child;if(16&Zl.flags){var s=i.deletions;if(null!==s){for(var u=0;u<s.length;u++){var c=s[u];for(Zl=c;null!==Zl;){var d=Zl;switch(d.tag){case 0:case 11:case 15:ns(8,d,i)}var f=d.child;if(null!==f)f.return=d,Zl=f;else for(;null!==Zl;){var p=(d=Zl).sibling,h=d.return;if(os(d),d===c){Zl=null;break}if(null!==p){p.return=h,Zl=p;break}Zl=h}}}var g=i.alternate;if(null!==g){var m=g.child;if(null!==m){g.child=null;do{var v=m.sibling;m.sibling=null,m=v}while(null!==m)}}Zl=i}}if(2064&i.subtreeFlags&&null!==l)l.return=i,Zl=l;else e:for(;null!==Zl;){if(2048&(i=Zl).flags)switch(i.tag){case 0:case 11:case 15:ns(9,i,i.return)}var y=i.sibling;if(null!==y){y.return=i.return,Zl=y;break e}Zl=i.return}}var b=e.current;for(Zl=b;null!==Zl;){var w=(l=Zl).child;if(2064&l.subtreeFlags&&null!==w)w.return=l,Zl=w;else e:for(l=b;null!==Zl;){if(2048&(s=Zl).flags)try{switch(s.tag){case 0:case 11:case 15:rs(9,s)}}catch(e){Cu(s,s.return,e)}if(s===l){Zl=null;break e}var S=s.sibling;if(null!==S){S.return=s.return,Zl=S;break e}Zl=s.return}}if(Is=a,$a(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{bt=n,Ds.transition=t}}return!1}function xu(e,t,n){e=Uo(e,t=pl(0,t=ul(n,t),1),1),t=eu(),null!==e&&(vt(e,1,t),ru(e,t))}function Cu(e,t,n){if(3===e.tag)xu(e,e,n);else for(;null!==t;){if(3===t.tag){xu(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Qs||!Qs.has(r))){t=Uo(t,e=hl(t,e=ul(n,e),1),1),e=eu(),null!==t&&(vt(t,1,e),ru(t,e));break}}t=t.return}}function Eu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=eu(),e.pingedLanes|=e.suspendedLanes&n,Ts===e&&(_s&n)===n&&(4===Rs||3===Rs&&(130023424&_s)===_s&&500>Xe()-Bs?fu(e,0):js|=n),ru(e,t)}function Ou(e,t){0===t&&(1&e.mode?(t=ct,!(130023424&(ct<<=1))&&(ct=4194304)):t=1);var n=eu();null!==(e=Lo(e,t))&&(vt(e,t,n),ru(e,n))}function Du(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Ou(e,n)}function Iu(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(t),Ou(e,n)}function Tu(e,t){return qe(e,t)}function Pu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function _u(e,t,n,r){return new Pu(e,t,n,r)}function Nu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Au(e,t){var n=e.alternate;return null===n?((n=_u(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ru(e,t,n,r,a,i){var l=2;if(r=e,"function"==typeof e)Nu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case x:return Lu(n.children,a,i,t);case C:l=8,a|=8;break;case E:return(e=_u(12,n,t,2|a)).elementType=E,e.lanes=i,e;case T:return(e=_u(13,n,t,a)).elementType=T,e.lanes=i,e;case P:return(e=_u(19,n,t,a)).elementType=P,e.lanes=i,e;case A:return Mu(n,a,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case O:l=10;break e;case D:l=9;break e;case I:l=11;break e;case _:l=14;break e;case N:l=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=_u(l,n,t,a)).elementType=e,t.type=r,t.lanes=i,t}function Lu(e,t,n,r){return(e=_u(7,e,r,t)).lanes=n,e}function Mu(e,t,n,r){return(e=_u(22,e,r,t)).elementType=A,e.lanes=n,e.stateNode={isHidden:!1},e}function zu(e,t,n){return(e=_u(6,e,null,t)).lanes=n,e}function ju(e,t,n){return(t=_u(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Fu(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=mt(0),this.expirationTimes=mt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=mt(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function Uu(e,t,n,r,a,o,i,l,s){return e=new Fu(e,t,n,l,s),1===t?(t=1,!0===o&&(t|=8)):t=0,o=_u(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},zo(o),e}function Bu(e){if(!e)return Da;e:{if($e(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Na(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var n=e.type;if(Na(n))return La(e,n,t)}return t}function $u(e,t,n,r,a,o,i,l,s){return(e=Uu(n,r,!0,e,0,o,0,l,s)).context=Bu(null),n=e.current,(o=Fo(r=eu(),a=tu(n))).callback=null!=t?t:null,Uo(n,o,a),e.current.lanes=a,vt(e,a,r),ru(e,r),e}function Hu(e,t,n,r){var a=t.current,o=eu(),i=tu(a);return n=Bu(n),null===t.context?t.context=n:t.pendingContext=n,(t=Fo(o,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Uo(a,t,i))&&(nu(e,a,i,o),Bo(e,a,i)),i}function Wu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Vu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Qu(e,t){Vu(e,t),(e=e.alternate)&&Vu(e,t)}xs=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Ta.current)bl=!0;else{if(!(e.lanes&n||128&t.flags))return bl=!1,function(e,t,n){switch(t.tag){case 3:Tl(t),ho();break;case 5:Zo(t);break;case 1:Na(t.type)&&Ma(t);break;case 4:Ko(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;Oa(xo,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Oa(ei,1&ei.current),t.flags|=128,null):n&t.child.childLanes?zl(e,t,n):(Oa(ei,1&ei.current),null!==(e=Wl(e,t,n))?e.sibling:null);Oa(ei,1&ei.current);break;case 19:if(r=!!(n&t.childLanes),128&e.flags){if(r)return $l(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),Oa(ei,ei.current),r)break;return null;case 22:case 23:return t.lanes=0,Cl(e,t,n)}return Wl(e,t,n)}(e,t,n);bl=!!(131072&e.flags)}else bl=!1,ao&&1048576&t.flags&&Ja(t,Qa,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Hl(e,t),e=t.pendingProps;var a=_a(t,Ia.current);Po(t,n),a=mi(null,t,r,e,a,n);var i=vi();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Na(r)?(i=!0,Ma(t)):i=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,zo(t),a.updater=al,t.stateNode=a,a._reactInternals=t,sl(t,r,e,n),t=Il(null,t,r,!0,i,n)):(t.tag=0,ao&&i&&eo(t),wl(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Hl(e,t),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return Nu(e)?1:0;if(null!=e){if((e=e.$$typeof)===I)return 11;if(e===_)return 14}return 2}(r),e=nl(r,e),a){case 0:t=Ol(null,t,r,e,n);break e;case 1:t=Dl(null,t,r,e,n);break e;case 11:t=Sl(null,t,r,e,n);break e;case 14:t=kl(null,t,r,nl(r.type,e),n);break e}throw Error(o(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,Ol(e,t,r,a=t.elementType===r?a:nl(r,a),n);case 1:return r=t.type,a=t.pendingProps,Dl(e,t,r,a=t.elementType===r?a:nl(r,a),n);case 3:e:{if(Tl(t),null===e)throw Error(o(387));r=t.pendingProps,a=(i=t.memoizedState).element,jo(e,t),Ho(t,r,null,n);var l=t.memoizedState;if(r=l.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=Pl(e,t,r,n,a=ul(Error(o(423)),t));break e}if(r!==a){t=Pl(e,t,r,n,a=ul(Error(o(424)),t));break e}for(ro=ua(t.stateNode.containerInfo.firstChild),no=t,ao=!0,oo=null,n=ko(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ho(),r===a){t=Wl(e,t,n);break e}wl(e,t,r,n)}t=t.child}return t;case 5:return Zo(t),null===e&&uo(t),r=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,l=a.children,na(r,a)?l=null:null!==i&&na(r,i)&&(t.flags|=32),El(e,t),wl(e,t,l,n),t.child;case 6:return null===e&&uo(t),null;case 13:return zl(e,t,n);case 4:return Ko(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=So(t,null,r,n):wl(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,Sl(e,t,r,a=t.elementType===r?a:nl(r,a),n);case 7:return wl(e,t,t.pendingProps,n),t.child;case 8:case 12:return wl(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,i=t.memoizedProps,l=a.value,Oa(xo,r._currentValue),r._currentValue=l,null!==i)if(lr(i.value,l)){if(i.children===a.children&&!Ta.current){t=Wl(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var s=i.dependencies;if(null!==s){l=i.child;for(var u=s.firstContext;null!==u;){if(u.context===r){if(1===i.tag){(u=Fo(-1,n&-n)).tag=2;var c=i.updateQueue;if(null!==c){var d=(c=c.shared).pending;null===d?u.next=u:(u.next=d.next,d.next=u),c.pending=u}}i.lanes|=n,null!==(u=i.alternate)&&(u.lanes|=n),To(i.return,n,t),s.lanes|=n;break}u=u.next}}else if(10===i.tag)l=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(o(341));l.lanes|=n,null!==(s=l.alternate)&&(s.lanes|=n),To(l,n,t),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===t){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}wl(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,Po(t,n),r=r(a=_o(a)),t.flags|=1,wl(e,t,r,n),t.child;case 14:return a=nl(r=t.type,t.pendingProps),kl(e,t,r,a=nl(r.type,a),n);case 15:return xl(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:nl(r,a),Hl(e,t),t.tag=1,Na(r)?(e=!0,Ma(t)):e=!1,Po(t,n),il(t,r,a),sl(t,r,a,n),Il(null,t,r,!0,e,n);case 19:return $l(e,t,n);case 22:return Cl(e,t,n)}throw Error(o(156,t.tag))};var qu="function"==typeof reportError?reportError:function(e){console.error(e)};function Yu(e){this._internalRoot=e}function Gu(e){this._internalRoot=e}function Ku(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Xu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zu(){}function Ju(e,t,n,r,a){var o=n._reactRootContainer;if(o){var i=o;if("function"==typeof a){var l=a;a=function(){var e=Wu(i);l.call(e)}}Hu(t,i,e,a)}else i=function(e,t,n,r,a){if(a){if("function"==typeof r){var o=r;r=function(){var e=Wu(i);o.call(e)}}var i=$u(t,r,e,0,null,!1,0,"",Zu);return e._reactRootContainer=i,e[ha]=i.current,$r(8===e.nodeType?e.parentNode:e),cu(),i}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var l=r;r=function(){var e=Wu(s);l.call(e)}}var s=Uu(e,0,!1,null,0,!1,0,"",Zu);return e._reactRootContainer=s,e[ha]=s.current,$r(8===e.nodeType?e.parentNode:e),cu((function(){Hu(t,s,n,r)})),s}(n,t,e,a,r);return Wu(i)}Gu.prototype.render=Yu.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Hu(e,t,null,null)},Gu.prototype.unmount=Yu.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;cu((function(){Hu(null,e,null,null)})),t[ha]=null}},Gu.prototype.unstable_scheduleHydration=function(e){if(e){var t=Ct();e={blockedOn:null,target:e,priority:t};for(var n=0;n<At.length&&0!==t&&t<At[n].priority;n++);At.splice(n,0,e),0===n&&zt(e)}},St=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(yt(t,1|n),ru(t,Xe()),!(6&Is)&&($s=Xe()+500,$a()))}break;case 13:cu((function(){var t=Lo(e,1);if(null!==t){var n=eu();nu(t,e,1,n)}})),Qu(e,1)}},kt=function(e){if(13===e.tag){var t=Lo(e,134217728);null!==t&&nu(t,e,134217728,eu()),Qu(e,134217728)}},xt=function(e){if(13===e.tag){var t=tu(e),n=Lo(e,t);null!==n&&nu(n,e,t,eu()),Qu(e,t)}},Ct=function(){return bt},Et=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},ke=function(e,t,n){switch(t){case"input":if(Z(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=Sa(r);if(!a)throw Error(o(90));q(r),Z(r,a)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Ie=uu,Te=cu;var ec={usingClientEntryPoint:!1,Events:[ba,wa,Sa,Oe,De,uu]},tc={findFiberByHostInstance:ya,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},nc={bundleType:tc.bundleType,version:tc.version,rendererPackageName:tc.rendererPackageName,rendererConfig:tc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ve(e))?null:e.stateNode},findFiberByHostInstance:tc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var rc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!rc.isDisabled&&rc.supportsFiber)try{at=rc.inject(nc),ot=rc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ec,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Ku(t))throw Error(o(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Ku(e))throw Error(o(299));var n=!1,r="",a=qu;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=Uu(e,1,!1,null,0,n,0,r,a),e[ha]=t.current,$r(8===e.nodeType?e.parentNode:e),new Yu(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=Ve(t))?null:e.stateNode},t.flushSync=function(e){return cu(e)},t.hydrate=function(e,t,n){if(!Xu(t))throw Error(o(200));return Ju(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Ku(e))throw Error(o(405));var r=null!=n&&n.hydratedSources||null,a=!1,i="",l=qu;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=$u(t,null,e,1,null!=n?n:null,a,0,i,l),e[ha]=t.current,$r(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new Gu(t)},t.render=function(e,t,n){if(!Xu(t))throw Error(o(200));return Ju(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Xu(e))throw Error(o(40));return!!e._reactRootContainer&&(cu((function(){Ju(null,null,e,!1,(function(){e._reactRootContainer=null,e[ha]=null}))})),!0)},t.unstable_batchedUpdates=uu,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Xu(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return Ju(e,t,n,!1,r)},t.version="18.3.1-next-f1338f8080-20240426"},338:(e,t,n)=>{"use strict";var r=n(961);t.H=r.createRoot,r.hydrateRoot},961:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(551)},405:(e,t)=>{"use strict";var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler");Symbol.for("react.provider");var l=Symbol.for("react.consumer"),s=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.suspense_list"),f=Symbol.for("react.memo"),p=Symbol.for("react.lazy"),h=Symbol.for("react.offscreen"),g=Symbol.for("react.client.reference");t.Hy=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===i||e===o||e===c||e===d||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===p||e.$$typeof===f||e.$$typeof===s||e.$$typeof===l||e.$$typeof===u||e.$$typeof===g||void 0!==e.getModuleId)},t.QP=function(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case n:switch(e=e.type){case a:case i:case o:case c:case d:return e;default:switch(e=e&&e.$$typeof){case s:case u:case p:case f:case l:return e;default:return t}}case r:return t}}}},20:(e,t,n)=>{"use strict";var r=n(159),a=Symbol.for("react.element"),o=(Symbol.for("react.fragment"),Object.prototype.hasOwnProperty),i=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function s(e,t,n){var r,s={},u=null,c=null;for(r in void 0!==n&&(u=""+n),void 0!==t.key&&(u=""+t.key),void 0!==t.ref&&(c=t.ref),t)o.call(t,r)&&!l.hasOwnProperty(r)&&(s[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===s[r]&&(s[r]=t[r]);return{$$typeof:a,type:e,key:u,ref:c,props:s,_owner:i.current}}t.jsx=s,t.jsxs=s},287:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),s=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g=Object.assign,m={};function v(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=v.prototype;var w=b.prototype=new y;w.constructor=b,g(w,v.prototype),w.isPureReactComponent=!0;var S=Array.isArray,k=Object.prototype.hasOwnProperty,x={current:null},C={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,r){var a,o={},i=null,l=null;if(null!=t)for(a in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)k.call(t,a)&&!C.hasOwnProperty(a)&&(o[a]=t[a]);var s=arguments.length-2;if(1===s)o.children=r;else if(1<s){for(var u=Array(s),c=0;c<s;c++)u[c]=arguments[c+2];o.children=u}if(e&&e.defaultProps)for(a in s=e.defaultProps)void 0===o[a]&&(o[a]=s[a]);return{$$typeof:n,type:e,key:i,ref:l,props:o,_owner:x.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var D=/\/+/g;function I(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function T(e,t,a,o,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s=!1;if(null===e)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case n:case r:s=!0}}if(s)return i=i(s=e),e=""===o?"."+I(s,0):o,S(i)?(a="",null!=e&&(a=e.replace(D,"$&/")+"/"),T(i,t,a,"",(function(e){return e}))):null!=i&&(O(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,a+(!i.key||s&&s.key===i.key?"":(""+i.key).replace(D,"$&/")+"/")+e)),t.push(i)),1;if(s=0,o=""===o?".":o+":",S(e))for(var u=0;u<e.length;u++){var c=o+I(l=e[u],u);s+=T(l,t,a,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(l=e.next()).done;)s+=T(l=l.value,t,a,c=o+I(l,u++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return s}function P(e,t,n){if(null==e)return e;var r=[],a=0;return T(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function _(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var N={current:null},A={transition:null},R={ReactCurrentDispatcher:N,ReactCurrentBatchConfig:A,ReactCurrentOwner:x};function L(){throw Error("act(...) is not supported in production builds of React.")}t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!O(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=a,t.Profiler=i,t.PureComponent=b,t.StrictMode=o,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=R,t.act=L,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=g({},e.props),o=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=x.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(u in t)k.call(t,u)&&!C.hasOwnProperty(u)&&(a[u]=void 0===t[u]&&void 0!==s?s[u]:t[u])}var u=arguments.length-2;if(1===u)a.children=r;else if(1<u){s=Array(u);for(var c=0;c<u;c++)s[c]=arguments[c+2];a.children=s}return{$$typeof:n,type:e.type,key:o,ref:i,props:a,_owner:l}},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=O,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:_}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=A.transition;A.transition={};try{e()}finally{A.transition=t}},t.unstable_act=L,t.useCallback=function(e,t){return N.current.useCallback(e,t)},t.useContext=function(e){return N.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return N.current.useDeferredValue(e)},t.useEffect=function(e,t){return N.current.useEffect(e,t)},t.useId=function(){return N.current.useId()},t.useImperativeHandle=function(e,t,n){return N.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return N.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return N.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return N.current.useMemo(e,t)},t.useReducer=function(e,t,n){return N.current.useReducer(e,t,n)},t.useRef=function(e){return N.current.useRef(e)},t.useState=function(e){return N.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return N.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return N.current.useTransition()},t.version="18.3.1"},159:(e,t,n)=>{"use strict";e.exports=n(287)},848:(e,t,n)=>{"use strict";e.exports=n(20)},463:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<o(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,i=a>>>1;r<i;){var l=2*(r+1)-1,s=e[l],u=l+1,c=e[u];if(0>o(s,n))u<a&&0>o(c,s)?(e[r]=c,e[u]=n,r=u):(e[r]=s,e[l]=n,r=l);else{if(!(u<a&&0>o(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}var u=[],c=[],d=1,f=null,p=3,h=!1,g=!1,m=!1,v="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(u,t)}t=r(c)}}function S(e){if(m=!1,w(e),!g)if(null!==r(u))g=!0,A(k);else{var t=r(c);null!==t&&R(S,t.startTime-e)}}function k(e,n){g=!1,m&&(m=!1,y(O),O=-1),h=!0;var o=p;try{for(w(n),f=r(u);null!==f&&(!(f.expirationTime>n)||e&&!T());){var i=f.callback;if("function"==typeof i){f.callback=null,p=f.priorityLevel;var l=i(f.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?f.callback=l:f===r(u)&&a(u),w(n)}else a(u);f=r(u)}if(null!==f)var s=!0;else{var d=r(c);null!==d&&R(S,d.startTime-n),s=!1}return s}finally{f=null,p=o,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var x,C=!1,E=null,O=-1,D=5,I=-1;function T(){return!(t.unstable_now()-I<D)}function P(){if(null!==E){var e=t.unstable_now();I=e;var n=!0;try{n=E(!0,e)}finally{n?x():(C=!1,E=null)}}else C=!1}if("function"==typeof b)x=function(){b(P)};else if("undefined"!=typeof MessageChannel){var _=new MessageChannel,N=_.port2;_.port1.onmessage=P,x=function(){N.postMessage(null)}}else x=function(){v(P,0)};function A(e){E=e,C||(C=!0,x())}function R(e,n){O=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){g||h||(g=!0,A(k))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):D=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(u)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,o){var i=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?i+o:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:d++,callback:a,priorityLevel:e,startTime:o,expirationTime:l=o+l,sortIndex:-1},o>i?(e.sortIndex=o,n(c,e),null===r(u)&&e===r(c)&&(m?(y(O),O=-1):m=!0,R(S,o-i))):(e.sortIndex=l,n(u,e),g||h||(g=!0,A(k))),e},t.unstable_shouldYield=T,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},982:(e,t,n)=>{"use strict";e.exports=n(463)},833:e=>{e.exports=function(e,t,n,r){var a=n?n.call(r,e,t):void 0;if(void 0!==a)return!!a;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var o=Object.keys(e),i=Object.keys(t);if(o.length!==i.length)return!1;for(var l=Object.prototype.hasOwnProperty.bind(t),s=0;s<o.length;s++){var u=o[s];if(!l(u))return!1;var c=e[u],d=t[u];if(!1===(a=n?n.call(r,c,d,u):void 0)||void 0===a&&c!==d)return!1}return!0}},72:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],l=0;l<e.length;l++){var s=e[l],u=r.base?s[0]+r.base:s[0],c=o[u]||0,d="".concat(u," ").concat(c);o[u]=c+1;var f=n(d),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var h=a(p,r);r.byIndex=l,t.splice(l,0,{identifier:d,updater:h,references:1})}i.push(d)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var l=n(o[i]);t[l].references--}for(var s=r(e,a),u=0;u<o.length;u++){var c=n(o[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}o=s}}},659:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nc=void 0,(()=>{"use strict";var e={};n.r(e),n.d(e,{FILE:()=>kr,HTML:()=>Er,TEXT:()=>Cr,URL:()=>xr});var t=n(72),r=n.n(t),a=n(825),o=n.n(a),i=n(659),l=n.n(i),s=n(56),u=n.n(s),c=n(540),d=n.n(c),f=n(113),p=n.n(f),h=n(523),g={};g.styleTagTransform=p(),g.setAttributes=u(),g.insert=l().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=d(),r()(h.A,g),h.A&&h.A.locals&&h.A.locals;var m=n(405),v=n(159),y=n(833),b=n.n(y);const w=function(e){function t(e,r,s,u,f){for(var p,h,g,m,w,k=0,x=0,C=0,E=0,O=0,N=0,R=g=p=0,M=0,z=0,j=0,F=0,U=s.length,B=U-1,$="",H="",W="",V="";M<U;){if(h=s.charCodeAt(M),M===B&&0!==x+E+C+k&&(0!==x&&(h=47===x?10:47),E=C=k=0,U++,B++),0===x+E+C+k){if(M===B&&(0<z&&($=$.replace(d,"")),0<$.trim().length)){switch(h){case 32:case 9:case 59:case 13:case 10:break;default:$+=s.charAt(M)}h=59}switch(h){case 123:for(p=($=$.trim()).charCodeAt(0),g=1,F=++M;M<U;){switch(h=s.charCodeAt(M)){case 123:g++;break;case 125:g--;break;case 47:switch(h=s.charCodeAt(M+1)){case 42:case 47:e:{for(R=M+1;R<B;++R)switch(s.charCodeAt(R)){case 47:if(42===h&&42===s.charCodeAt(R-1)&&M+2!==R){M=R+1;break e}break;case 10:if(47===h){M=R+1;break e}}M=R}}break;case 91:h++;case 40:h++;case 34:case 39:for(;M++<B&&s.charCodeAt(M)!==h;);}if(0===g)break;M++}if(g=s.substring(F,M),0===p&&(p=($=$.replace(c,"").trim()).charCodeAt(0)),64===p){switch(0<z&&($=$.replace(d,"")),h=$.charCodeAt(1)){case 100:case 109:case 115:case 45:z=r;break;default:z=_}if(F=(g=t(r,z,g,h,f+1)).length,0<A&&(w=l(3,g,z=n(_,$,j),r,I,D,F,h,f,u),$=z.join(""),void 0!==w&&0===(F=(g=w.trim()).length)&&(h=0,g="")),0<F)switch(h){case 115:$=$.replace(S,i);case 100:case 109:case 45:g=$+"{"+g+"}";break;case 107:g=($=$.replace(v,"$1 $2"))+"{"+g+"}",g=1===P||2===P&&o("@"+g,3)?"@-webkit-"+g+"@"+g:"@"+g;break;default:g=$+g,112===u&&(H+=g,g="")}else g=""}else g=t(r,n(r,$,j),g,u,f+1);W+=g,g=j=z=R=p=0,$="",h=s.charCodeAt(++M);break;case 125:case 59:if(1<(F=($=(0<z?$.replace(d,""):$).trim()).length))switch(0===R&&(p=$.charCodeAt(0),45===p||96<p&&123>p)&&(F=($=$.replace(" ",":")).length),0<A&&void 0!==(w=l(1,$,r,e,I,D,H.length,u,f,u))&&0===(F=($=w.trim()).length)&&($="\0\0"),p=$.charCodeAt(0),h=$.charCodeAt(1),p){case 0:break;case 64:if(105===h||99===h){V+=$+s.charAt(M);break}default:58!==$.charCodeAt(F-1)&&(H+=a($,p,h,$.charCodeAt(2)))}j=z=R=p=0,$="",h=s.charCodeAt(++M)}}switch(h){case 13:case 10:47===x?x=0:0===1+p&&107!==u&&0<$.length&&(z=1,$+="\0"),0<A*L&&l(0,$,r,e,I,D,H.length,u,f,u),D=1,I++;break;case 59:case 125:if(0===x+E+C+k){D++;break}default:switch(D++,m=s.charAt(M),h){case 9:case 32:if(0===E+k+x)switch(O){case 44:case 58:case 9:case 32:m="";break;default:32!==h&&(m=" ")}break;case 0:m="\\0";break;case 12:m="\\f";break;case 11:m="\\v";break;case 38:0===E+x+k&&(z=j=1,m="\f"+m);break;case 108:if(0===E+x+k+T&&0<R)switch(M-R){case 2:112===O&&58===s.charCodeAt(M-3)&&(T=O);case 8:111===N&&(T=N)}break;case 58:0===E+x+k&&(R=M);break;case 44:0===x+C+E+k&&(z=1,m+="\r");break;case 34:case 39:0===x&&(E=E===h?0:0===E?h:E);break;case 91:0===E+x+C&&k++;break;case 93:0===E+x+C&&k--;break;case 41:0===E+x+k&&C--;break;case 40:0===E+x+k&&(0===p&&(2*O+3*N==533||(p=1)),C++);break;case 64:0===x+C+E+k+R+g&&(g=1);break;case 42:case 47:if(!(0<E+k+C))switch(x){case 0:switch(2*h+3*s.charCodeAt(M+1)){case 235:x=47;break;case 220:F=M,x=42}break;case 42:47===h&&42===O&&F+2!==M&&(33===s.charCodeAt(F+2)&&(H+=s.substring(F,M+1)),m="",x=0)}}0===x&&($+=m)}N=O,O=h,M++}if(0<(F=H.length)){if(z=r,0<A&&void 0!==(w=l(2,H,z,e,I,D,F,u,f,u))&&0===(H=w).length)return V+H+W;if(H=z.join(",")+"{"+H+"}",0!=P*T){switch(2!==P||o(H,2)||(T=0),T){case 111:H=H.replace(b,":-moz-$1")+H;break;case 112:H=H.replace(y,"::-webkit-input-$1")+H.replace(y,"::-moz-$1")+H.replace(y,":-ms-input-$1")+H}T=0}}return V+H+W}function n(e,t,n){var a=t.trim().split(g);t=a;var o=a.length,i=e.length;switch(i){case 0:case 1:var l=0;for(e=0===i?"":e[0]+" ";l<o;++l)t[l]=r(e,t[l],n).trim();break;default:var s=l=0;for(t=[];l<o;++l)for(var u=0;u<i;++u)t[s++]=r(e[u]+" ",a[l],n).trim()}return t}function r(e,t,n){var r=t.charCodeAt(0);switch(33>r&&(r=(t=t.trim()).charCodeAt(0)),r){case 38:return t.replace(m,"$1"+e.trim());case 58:return e.trim()+t.replace(m,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(m,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function a(e,t,n,r){var i=e+";",l=2*t+3*n+4*r;if(944===l){e=i.indexOf(":",9)+1;var s=i.substring(e,i.length-1).trim();return s=i.substring(0,e).trim()+s+";",1===P||2===P&&o(s,1)?"-webkit-"+s+s:s}if(0===P||2===P&&!o(i,1))return i;switch(l){case 1015:return 97===i.charCodeAt(10)?"-webkit-"+i+i:i;case 951:return 116===i.charCodeAt(3)?"-webkit-"+i+i:i;case 963:return 110===i.charCodeAt(5)?"-webkit-"+i+i:i;case 1009:if(100!==i.charCodeAt(4))break;case 969:case 942:return"-webkit-"+i+i;case 978:return"-webkit-"+i+"-moz-"+i+i;case 1019:case 983:return"-webkit-"+i+"-moz-"+i+"-ms-"+i+i;case 883:if(45===i.charCodeAt(8))return"-webkit-"+i+i;if(0<i.indexOf("image-set(",11))return i.replace(O,"$1-webkit-$2")+i;break;case 932:if(45===i.charCodeAt(4))switch(i.charCodeAt(5)){case 103:return"-webkit-box-"+i.replace("-grow","")+"-webkit-"+i+"-ms-"+i.replace("grow","positive")+i;case 115:return"-webkit-"+i+"-ms-"+i.replace("shrink","negative")+i;case 98:return"-webkit-"+i+"-ms-"+i.replace("basis","preferred-size")+i}return"-webkit-"+i+"-ms-"+i+i;case 964:return"-webkit-"+i+"-ms-flex-"+i+i;case 1023:if(99!==i.charCodeAt(8))break;return"-webkit-box-pack"+(s=i.substring(i.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+i+"-ms-flex-pack"+s+i;case 1005:return p.test(i)?i.replace(f,":-webkit-")+i.replace(f,":-moz-")+i:i;case 1e3:switch(t=(s=i.substring(13).trim()).indexOf("-")+1,s.charCodeAt(0)+s.charCodeAt(t)){case 226:s=i.replace(w,"tb");break;case 232:s=i.replace(w,"tb-rl");break;case 220:s=i.replace(w,"lr");break;default:return i}return"-webkit-"+i+"-ms-"+s+i;case 1017:if(-1===i.indexOf("sticky",9))break;case 975:switch(t=(i=e).length-10,l=(s=(33===i.charCodeAt(t)?i.substring(0,t):i).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|s.charCodeAt(7))){case 203:if(111>s.charCodeAt(8))break;case 115:i=i.replace(s,"-webkit-"+s)+";"+i;break;case 207:case 102:i=i.replace(s,"-webkit-"+(102<l?"inline-":"")+"box")+";"+i.replace(s,"-webkit-"+s)+";"+i.replace(s,"-ms-"+s+"box")+";"+i}return i+";";case 938:if(45===i.charCodeAt(5))switch(i.charCodeAt(6)){case 105:return s=i.replace("-items",""),"-webkit-"+i+"-webkit-box-"+s+"-ms-flex-"+s+i;case 115:return"-webkit-"+i+"-ms-flex-item-"+i.replace(x,"")+i;default:return"-webkit-"+i+"-ms-flex-line-pack"+i.replace("align-content","").replace(x,"")+i}break;case 973:case 989:if(45!==i.charCodeAt(3)||122===i.charCodeAt(4))break;case 931:case 953:if(!0===E.test(e))return 115===(s=e.substring(e.indexOf(":")+1)).charCodeAt(0)?a(e.replace("stretch","fill-available"),t,n,r).replace(":fill-available",":stretch"):i.replace(s,"-webkit-"+s)+i.replace(s,"-moz-"+s.replace("fill-",""))+i;break;case 962:if(i="-webkit-"+i+(102===i.charCodeAt(5)?"-ms-"+i:"")+i,211===n+r&&105===i.charCodeAt(13)&&0<i.indexOf("transform",10))return i.substring(0,i.indexOf(";",27)+1).replace(h,"$1-webkit-$2")+i}return i}function o(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),R(2!==t?r:r.replace(C,"$1"),n,t)}function i(e,t){var n=a(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(k," or ($1)").substring(4):"("+t+")"}function l(e,t,n,r,a,o,i,l,s,c){for(var d,f=0,p=t;f<A;++f)switch(d=N[f].call(u,e,p,n,r,a,o,i,l,s,c)){case void 0:case!1:case!0:case null:break;default:p=d}if(p!==t)return p}function s(e){return void 0!==(e=e.prefix)&&(R=null,e?"function"!=typeof e?P=1:(P=2,R=e):P=0),s}function u(e,n){var r=e;if(33>r.charCodeAt(0)&&(r=r.trim()),r=[r],0<A){var a=l(-1,n,r,r,I,D,0,0,0,0);void 0!==a&&"string"==typeof a&&(n=a)}var o=t(_,r,n,0,0);return 0<A&&void 0!==(a=l(-2,o,r,r,I,D,o.length,0,0,0))&&(o=a),T=0,D=I=1,o}var c=/^\0+/g,d=/[\0\r\f]/g,f=/: */g,p=/zoo|gra/,h=/([,: ])(transform)/g,g=/,\r+?/g,m=/([\t\r\n ])*\f?&/g,v=/@(k\w+)\s*(\S*)\s*/,y=/::(place)/g,b=/:(read-only)/g,w=/[svh]\w+-[tblr]{2}/,S=/\(\s*(.*)\s*\)/g,k=/([\s\S]*?);/g,x=/-self|flex-/g,C=/[^]*?(:[rp][el]a[\w-]+)[^]*/,E=/stretch|:\s*\w+\-(?:conte|avail)/,O=/([^-])(image-set\()/,D=1,I=1,T=0,P=1,_=[],N=[],A=0,R=null,L=0;return u.use=function e(t){switch(t){case void 0:case null:A=N.length=0;break;default:if("function"==typeof t)N[A++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else L=0|!!t}return e},u.set=s,void 0!==e&&s(e),u},S={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};function k(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}var x=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|fetchpriority|fetchPriority|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,C=k((function(e){return x.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91})),E=n(146),O=n.n(E);function D(){return(D=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var I=function(e,t){for(var n=[e[0]],r=0,a=t.length;r<a;r+=1)n.push(t[r],e[r+1]);return n},T=function(e){return null!==e&&"object"==typeof e&&"[object Object]"===(e.toString?e.toString():Object.prototype.toString.call(e))&&!(0,m.QP)(e)},P=Object.freeze([]),_=Object.freeze({});function N(e){return"function"==typeof e}function A(e){return e.displayName||e.name||"Component"}function R(e){return e&&"string"==typeof e.styledComponentId}var L="undefined"!=typeof process&&void 0!==process.env&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",M="undefined"!=typeof window&&"HTMLElement"in window,z=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env&&(void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY&&"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY));function j(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(n.length>0?" Args: "+n.join(", "):""))}var F=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,a=r;e>=a;)(a<<=1)<0&&j(16,""+e);this.groupSizes=new Uint32Array(a),this.groupSizes.set(n),this.length=a;for(var o=r;o<a;o++)this.groupSizes[o]=0}for(var i=this.indexOfGroup(e+1),l=0,s=t.length;l<s;l++)this.tag.insertRule(i,t[l])&&(this.groupSizes[e]++,i++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var a=n;a<r;a++)this.tag.deleteRule(n)}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),a=r+n,o=r;o<a;o++)t+=this.tag.getRule(o)+"/*!sc*/\n";return t},e}(),U=new Map,B=new Map,$=1,H=function(e){if(U.has(e))return U.get(e);for(;B.has($);)$++;var t=$++;return U.set(e,t),B.set(t,e),t},W=function(e){return B.get(e)},V=function(e,t){t>=$&&($=t+1),U.set(e,t),B.set(t,e)},Q="style["+L+'][data-styled-version="5.3.11"]',q=new RegExp("^"+L+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),Y=function(e,t,n){for(var r,a=n.split(","),o=0,i=a.length;o<i;o++)(r=a[o])&&e.registerName(t,r)},G=function(e,t){for(var n=(t.textContent||"").split("/*!sc*/\n"),r=[],a=0,o=n.length;a<o;a++){var i=n[a].trim();if(i){var l=i.match(q);if(l){var s=0|parseInt(l[1],10),u=l[2];0!==s&&(V(u,s),Y(e,u,l[3]),e.getTag().insertRules(s,r)),r.length=0}else r.push(i)}}},K=function(){return n.nc},X=function(e){var t=document.head,n=e||t,r=document.createElement("style"),a=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute(L))return r}}(n),o=void 0!==a?a.nextSibling:null;r.setAttribute(L,"active"),r.setAttribute("data-styled-version","5.3.11");var i=K();return i&&r.setAttribute("nonce",i),n.insertBefore(r,o),r},Z=function(){function e(e){var t=this.element=X(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var a=t[n];if(a.ownerNode===e)return a}j(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),J=function(){function e(e){var t=this.element=X(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),ee=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),te=M,ne={isServer:!M,useCSSOMInjection:!z},re=function(){function e(e,t,n){void 0===e&&(e=_),void 0===t&&(t={}),this.options=D({},ne,{},e),this.gs=t,this.names=new Map(n),this.server=!!e.isServer,!this.server&&M&&te&&(te=!1,function(e){for(var t=document.querySelectorAll(Q),n=0,r=t.length;n<r;n++){var a=t[n];a&&"active"!==a.getAttribute(L)&&(G(e,a),a.parentNode&&a.parentNode.removeChild(a))}}(this))}e.registerId=function(e){return H(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(D({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,a=t.target,e=n?new ee(a):r?new Z(a):new J(a),new F(e)));var e,t,n,r,a},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(H(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(H(e),n)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup(H(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r="",a=0;a<n;a++){var o=W(a);if(void 0!==o){var i=e.names.get(o),l=t.getGroup(a);if(i&&l&&i.size){var s=L+".g"+a+'[id="'+o+'"]',u="";void 0!==i&&i.forEach((function(e){e.length>0&&(u+=e+",")})),r+=""+l+s+'{content:"'+u+'"}/*!sc*/\n'}}}return r}(this)},e}(),ae=/(a)(d)/gi,oe=function(e){return String.fromCharCode(e+(e>25?39:97))};function ie(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=oe(t%52)+n;return(oe(t%52)+n).replace(ae,"$1-$2")}var le=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},se=function(e){return le(5381,e)};function ue(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(N(n)&&!R(n))return!1}return!0}var ce=se("5.3.11"),de=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===n||n.isStatic)&&ue(e),this.componentId=t,this.baseHash=le(ce,t),this.baseStyle=n,re.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,a=[];if(this.baseStyle&&a.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))a.push(this.staticRulesId);else{var o=Ie(this.rules,e,t,n).join(""),i=ie(le(this.baseHash,o)>>>0);if(!t.hasNameForId(r,i)){var l=n(o,"."+i,void 0,r);t.insertRules(r,i,l)}a.push(i),this.staticRulesId=i}else{for(var s=this.rules.length,u=le(this.baseHash,n.hash),c="",d=0;d<s;d++){var f=this.rules[d];if("string"==typeof f)c+=f;else if(f){var p=Ie(f,e,t,n),h=Array.isArray(p)?p.join(""):p;u=le(u,h+d),c+=h}}if(c){var g=ie(u>>>0);if(!t.hasNameForId(r,g)){var m=n(c,"."+g,void 0,r);t.insertRules(r,g,m)}a.push(g)}}return a.join(" ")},e}(),fe=/^\s*\/\/.*$/gm,pe=[":","[",".","#"];function he(e){var t,n,r,a,o=void 0===e?_:e,i=o.options,l=void 0===i?_:i,s=o.plugins,u=void 0===s?P:s,c=new w(l),d=[],f=function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,a,o,i,l,s,u,c,d){switch(n){case 1:if(0===c&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===u)return r+"/*|*/";break;case 3:switch(u){case 102:case 112:return e(a[0]+r),"";default:return r+(0===d?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}((function(e){d.push(e)})),p=function(e,r,o){return 0===r&&-1!==pe.indexOf(o[n.length])||o.match(a)?e:"."+t};function h(e,o,i,l){void 0===l&&(l="&");var s=e.replace(fe,""),u=o&&i?i+" "+o+" { "+s+" }":s;return t=l,n=o,r=new RegExp("\\"+n+"\\b","g"),a=new RegExp("(\\"+n+"\\b){2,}"),c(i||!o?"":o,u)}return c.use([].concat(u,[function(e,t,a){2===e&&a.length&&a[0].lastIndexOf(n)>0&&(a[0]=a[0].replace(r,p))},f,function(e){if(-2===e){var t=d;return d=[],t}}])),h.hash=u.length?u.reduce((function(e,t){return t.name||j(15),le(e,t.name)}),5381).toString():"",h}var ge=v.createContext(),me=(ge.Consumer,v.createContext()),ve=(me.Consumer,new re),ye=he();function be(){return(0,v.useContext)(ge)||ve}function we(e){var t=(0,v.useState)(e.stylisPlugins),n=t[0],r=t[1],a=be(),o=(0,v.useMemo)((function(){var t=a;return e.sheet?t=e.sheet:e.target&&(t=t.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(t=t.reconstructWithOptions({useCSSOMInjection:!1})),t}),[e.disableCSSOMInjection,e.sheet,e.target]),i=(0,v.useMemo)((function(){return he({options:{prefix:!e.disableVendorPrefixes},plugins:n})}),[e.disableVendorPrefixes,n]);return(0,v.useEffect)((function(){b()(n,e.stylisPlugins)||r(e.stylisPlugins)}),[e.stylisPlugins]),v.createElement(ge.Provider,{value:o},v.createElement(me.Provider,{value:i},e.children))}var Se=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=ye);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"))},this.toString=function(){return j(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t}return e.prototype.getName=function(e){return void 0===e&&(e=ye),this.name+e.hash},e}(),ke=/([A-Z])/,xe=/([A-Z])/g,Ce=/^ms-/,Ee=function(e){return"-"+e.toLowerCase()};function Oe(e){return ke.test(e)?e.replace(xe,Ee).replace(Ce,"-ms-"):e}var De=function(e){return null==e||!1===e||""===e};function Ie(e,t,n,r){if(Array.isArray(e)){for(var a,o=[],i=0,l=e.length;i<l;i+=1)""!==(a=Ie(e[i],t,n,r))&&(Array.isArray(a)?o.push.apply(o,a):o.push(a));return o}return De(e)?"":R(e)?"."+e.styledComponentId:N(e)?"function"!=typeof(s=e)||s.prototype&&s.prototype.isReactComponent||!t?e:Ie(e(t),t,n,r):e instanceof Se?n?(e.inject(n,r),e.getName(r)):e:T(e)?function e(t,n){var r,a,o=[];for(var i in t)t.hasOwnProperty(i)&&!De(t[i])&&(Array.isArray(t[i])&&t[i].isCss||N(t[i])?o.push(Oe(i)+":",t[i],";"):T(t[i])?o.push.apply(o,e(t[i],i)):o.push(Oe(i)+": "+(r=i,(null==(a=t[i])||"boolean"==typeof a||""===a?"":"number"!=typeof a||0===a||r in S||r.startsWith("--")?String(a).trim():a+"px")+";")));return n?[n+" {"].concat(o,["}"]):o}(e):e.toString();var s}var Te=function(e){return Array.isArray(e)&&(e.isCss=!0),e};function Pe(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return N(e)||T(e)?Te(Ie(I(P,[e].concat(n)))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:Te(Ie(I(e,n)))}new Set;var _e=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,Ne=/(^-|-$)/g;function Ae(e){return e.replace(_e,"-").replace(Ne,"")}function Re(e){return"string"==typeof e&&!0}var Le=function(e){return"function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},Me=function(e){return"__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function ze(e,t,n){var r=e[n];Le(t)&&Le(r)?je(r,t):e[n]=t}function je(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var a=0,o=n;a<o.length;a++){var i=o[a];if(Le(i))for(var l in i)Me(l)&&ze(e,i[l],l)}return e}var Fe=v.createContext();Fe.Consumer;var Ue={};function Be(e,t,n){var r=R(e),a=!Re(e),o=t.attrs,i=void 0===o?P:o,l=t.componentId,s=void 0===l?function(e,t){var n="string"!=typeof e?"sc":Ae(e);Ue[n]=(Ue[n]||0)+1;var r=n+"-"+function(e){return ie(se(e)>>>0)}("5.3.11"+n+Ue[n]);return t?t+"-"+r:r}(t.displayName,t.parentComponentId):l,u=t.displayName,c=void 0===u?function(e){return Re(e)?"styled."+e:"Styled("+A(e)+")"}(e):u,d=t.displayName&&t.componentId?Ae(t.displayName)+"-"+t.componentId:t.componentId||s,f=r&&e.attrs?Array.prototype.concat(e.attrs,i).filter(Boolean):i,p=t.shouldForwardProp;r&&e.shouldForwardProp&&(p=t.shouldForwardProp?function(n,r,a){return e.shouldForwardProp(n,r,a)&&t.shouldForwardProp(n,r,a)}:e.shouldForwardProp);var h,g=new de(n,d,r?e.componentStyle:void 0),m=g.isStatic&&0===i.length,y=function(e,t){return function(e,t,n,r){var a=e.attrs,o=e.componentStyle,i=e.defaultProps,l=e.foldedComponentIds,s=e.shouldForwardProp,u=e.styledComponentId,c=e.target,d=function(e,t,n){void 0===e&&(e=_);var r=D({},t,{theme:e}),a={};return n.forEach((function(e){var t,n,o,i=e;for(t in N(i)&&(i=i(r)),i)r[t]=a[t]="className"===t?(n=a[t],o=i[t],n&&o?n+" "+o:n||o):i[t]})),[r,a]}(function(e,t,n){return void 0===n&&(n=_),e.theme!==n.theme&&e.theme||t||n.theme}(t,(0,v.useContext)(Fe),i)||_,t,a),f=d[0],p=d[1],h=function(e,t,n){var r=be(),a=(0,v.useContext)(me)||ye;return t?e.generateAndInjectStyles(_,r,a):e.generateAndInjectStyles(n,r,a)}(o,r,f),g=n,m=p.$as||t.$as||p.as||t.as||c,y=Re(m),b=p!==t?D({},t,{},p):t,w={};for(var S in b)"$"!==S[0]&&"as"!==S&&("forwardedAs"===S?w.as=b[S]:(s?s(S,C,m):!y||C(S))&&(w[S]=b[S]));return t.style&&p.style!==t.style&&(w.style=D({},t.style,{},p.style)),w.className=Array.prototype.concat(l,u,h!==u?h:null,t.className,p.className).filter(Boolean).join(" "),w.ref=g,(0,v.createElement)(m,w)}(h,e,t,m)};return y.displayName=c,(h=v.forwardRef(y)).attrs=f,h.componentStyle=g,h.displayName=c,h.shouldForwardProp=p,h.foldedComponentIds=r?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):P,h.styledComponentId=d,h.target=r?e.target:e,h.withComponent=function(e){var r=t.componentId,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(t,["componentId"]),o=r&&r+"-"+(Re(e)?e:Ae(A(e)));return Be(e,D({},a,{attrs:f,componentId:o}),n)},Object.defineProperty(h,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=r?je({},e.defaultProps,t):t}}),Object.defineProperty(h,"toString",{value:function(){return"."+h.styledComponentId}}),a&&O()(h,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),h}var $e,He=function(e){return function e(t,n,r){if(void 0===r&&(r=_),!(0,m.Hy)(n))return j(1,String(n));var a=function(){return t(n,r,Pe.apply(void 0,arguments))};return a.withConfig=function(a){return e(t,n,D({},r,{},a))},a.attrs=function(a){return e(t,n,D({},r,{attrs:Array.prototype.concat(r.attrs,a).filter(Boolean)}))},a}(Be,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(e){He[e]=He(e)})),($e=function(e,t){this.rules=e,this.componentId=t,this.isStatic=ue(e),re.registerId(this.componentId+1)}.prototype).createStyles=function(e,t,n,r){var a=r(Ie(this.rules,t,n,r).join(""),""),o=this.componentId+e;n.insertRules(o,o,a)},$e.removeStyles=function(e,t){t.clearRules(this.componentId+e)},$e.renderStyles=function(e,t,n,r){e>2&&re.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r)},function(){var e=function(){var e=this;this._emitSheetCSS=function(){var t=e.instance.toString();if(!t)return"";var n=K();return"<style "+[n&&'nonce="'+n+'"',L+'="true"','data-styled-version="5.3.11"'].filter(Boolean).join(" ")+">"+t+"</style>"},this.getStyleTags=function(){return e.sealed?j(2):e._emitSheetCSS()},this.getStyleElement=function(){var t;if(e.sealed)return j(2);var n=((t={})[L]="",t["data-styled-version"]="5.3.11",t.dangerouslySetInnerHTML={__html:e.instance.toString()},t),r=K();return r&&(n.nonce=r),[v.createElement("style",D({},n,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new re({isServer:!0}),this.sealed=!1}.prototype;e.collectStyles=function(e){return this.sealed?j(2):v.createElement(we,{sheet:this.instance},e)},e.interleaveWithNodeStream=function(e){return j(3)}}();const We=He;var Ve=We.div.withConfig({displayName:"StyleAppWrapper",componentId:"sc-11a0mwl-0"})(["max-width:225rem;margin:0 auto;"]),Qe=We.div.withConfig({displayName:"StyleWorkoutScheduleWrapper",componentId:"sc-1k4y5vr-0"})(["padding:60px;"]),qe=We.div.withConfig({displayName:"StyledWeekDayWrapper",componentId:"sc-iho7i3-0"})(["min-height:calc(100vh - 120px);min-width:100px;max-width:500px;display:flex;flex-direction:column;gap:9px;flex:1;"]),Ye=We.p.withConfig({displayName:"StyledWeekDayHeader",componentId:"sc-iho7i3-1"})(["font-weight:600;font-size:1rem;color:var(--text-secondary);"]),Ge=We.div.withConfig({displayName:"StyledWeekDayContent",componentId:"sc-iho7i3-2"})(["background:var(--bg-secondary);padding:5px;height:100%;border-radius:6px;display:flex;flex-direction:column;gap:5px;"]),Ke=We.h3.withConfig({displayName:"StyledWeekDayTitle",componentId:"sc-iho7i3-3"})((function(e){return Pe(["font-weight:600;font-size:1.1rem;color:var(--text-tertiary);display:flex;flex-direction:row;justify-content:space-between;",""],e.$isActive&&Pe(["color:var(--text-hightlight);font-weight:700;"]))})),Xe=function(e){return{monthDay:e.getDate().toString().padStart(2,"0"),weekDay:e.toLocaleDateString(void 0,{weekday:"short"}).toLowerCase(),isToday:e.toDateString()===(new Date).toDateString()}},Ze=We.button.withConfig({displayName:"StyledIconButton",componentId:"sc-ag2l62-0"})((function(e){var t=e.$variant;return Pe(["background-color:transparent;cursor:pointer;border:none;width:12px;height:12px;font-size:12px;font-weight:700;display:flex;justify-content:center;align-items:center;"," ",""],"contained"===t&&Pe(["color:white;border-radius:50%;background-color:var(--interactive);transition:background-color 0.3s;&:hover{background-color:var(--active);}"]),"icon"===t&&Pe(["color:#c4c4c4;transition:color 0.3s;&:hover{color:var(--active);}"]))})),Je=n(848);const et=function(e){var t=e.onClick,n=e.icon,r=e.variant,a=void 0===r?"icon":r;return(0,Je.jsx)(Ze,{$variant:a,onClick:t,children:n})};var tt=We.div.withConfig({displayName:"StyleWorkoutWrapper",componentId:"sc-1wtl1h-0"})(["background-color:var(--bg-primary);border:1px solid #22242626;padding:5px;border-radius:6px;display:flex;flex-direction:column;gap:5px;cursor:grab;"]),nt=We.div.withConfig({displayName:"StyleWorkoutHeader",componentId:"sc-1wtl1h-1"})(["display:flex;justify-content:space-between;color:var(--text-primary);gap:7px;"]),rt=We.div.withConfig({displayName:"StyleWorkoutContent",componentId:"sc-1wtl1h-2"})(["display:flex;flex-direction:column;gap:5px;"]),at=We.div.withConfig({displayName:"StyleWorkoutFooter",componentId:"sc-1wtl1h-3"})(["display:flex;justify-content:flex-end;"]),ot=Pe(["white-space:nowrap;overflow:hidden;text-overflow:ellipsis;"]),it=We.h5.withConfig({displayName:"StyledH5Typography",componentId:"sc-1q3kohw-0"})(["font-size:1rem;text-transform:uppercase;font-weight:700;",";"],ot),lt=We.h6.withConfig({displayName:"StyledH6Typography",componentId:"sc-1q3kohw-1"})(["font-size:1.3rem;font-weight:600;",";"],ot),st=We.p.withConfig({displayName:"StyledBody1Typography",componentId:"sc-1q3kohw-2"})(["font-weight:700;color:#919cad;"]),ut=We.p.withConfig({displayName:"StyledBody2Typography",componentId:"sc-1q3kohw-3"})(["font-weight:400;color:#95a6b7;",";"],ot);const ct=function(e){var t=e.children,n=e.variant,r={h5:it,h6:lt,body1:st,body2:ut}[void 0===n?"body1":n];return(0,Je.jsx)(r,{title:t,children:t})};var dt=We.div.withConfig({displayName:"StyledExerciseWrapper",componentId:"sc-n9xsnf-0"})(["border:1px solid #dfdfdf;border-radius:3px;padding:5px;box-shadow:rgba(0,0,0,0.05) 0 0 0 1px;"]),ft=We.div.withConfig({displayName:"StyledExerciseHeader",componentId:"sc-n9xsnf-1"})(["display:flex;justify-content:flex-end;"]),pt=We.div.withConfig({displayName:"StyledExerciseDetail",componentId:"sc-n9xsnf-2"})(["display:flex;justify-content:space-between;gap:20px;"]),ht=n(17);const gt="undefined"!=typeof window?v.useLayoutEffect:v.useEffect;function mt(e,t,n){return function(e,t,n){const[r,a]=function(e,t,n){const[r,a]=(0,v.useState)((()=>t(e))),o=(0,v.useCallback)((()=>{const o=t(e);ht(r,o)||(a(o),n&&n())}),[r,e,n]);return gt(o),[r,o]}(e,t,n);return gt((function(){const t=e.getHandlerId();if(null!=t)return e.subscribeToStateChange(a,{handlerIds:[t]})}),[e,a]),r}(t,e||(()=>({})),(()=>n.reconnect()))}function vt(e,t){const n=[...t||[]];return null==t&&"function"!=typeof e&&n.push(e),(0,v.useMemo)((()=>"function"==typeof e?e():e),n)}function yt(e){return(0,v.useMemo)((()=>e.hooks.dropTarget()),[e])}function bt(e,t,n,r){let a=n?n.call(r,e,t):void 0;if(void 0!==a)return!!a;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;const o=Object.keys(e),i=Object.keys(t);if(o.length!==i.length)return!1;const l=Object.prototype.hasOwnProperty.bind(t);for(let i=0;i<o.length;i++){const s=o[i];if(!l(s))return!1;const u=e[s],c=t[s];if(a=n?n.call(r,u,c,s):void 0,!1===a||void 0===a&&u!==c)return!1}return!0}function wt(e){return null!==e&&"object"==typeof e&&Object.prototype.hasOwnProperty.call(e,"current")}function St(e,t,...n){if("undefined"!=typeof process&&void 0===t)throw new Error("invariant requires an error message argument");if(!e){let e;if(void 0===t)e=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{let r=0;e=new Error(t.replace(/%s/g,(function(){return n[r++]}))),e.name="Invariant Violation"}throw e.framesToPop=1,e}}function kt(e){const t={};return Object.keys(e).forEach((n=>{const r=e[n];if(n.endsWith("Ref"))t[n]=e[n];else{const e=function(e){return(t=null,n=null)=>{if(!(0,v.isValidElement)(t)){const r=t;return e(r,n),r}const r=t;return function(e){if("string"==typeof e.type)return;const t=e.type.displayName||e.type.name||"the component";throw new Error(`Only native element nodes can now be passed to React DnD connectors.You can either wrap ${t} into a <div>, or turn it into a drag source or a drop target itself.`)}(r),function(e,t){const n=e.ref;return St("string"!=typeof n,"Cannot connect React DnD to an element with an existing string ref. Please convert it to use a callback ref instead, or wrap it into a <span> or <div>. Read more: https://reactjs.org/docs/refs-and-the-dom.html#callback-refs"),n?(0,v.cloneElement)(e,{ref:e=>{xt(n,e),xt(t,e)}}):(0,v.cloneElement)(e,{ref:t})}(r,n?t=>e(t,n):e)}}(r);t[n]=()=>e}})),t}function xt(e,t){"function"==typeof e?e(t):e.current=t}class Ct{get connectTarget(){return this.dropTarget}reconnect(){const e=this.didHandlerIdChange()||this.didDropTargetChange()||this.didOptionsChange();e&&this.disconnectDropTarget();const t=this.dropTarget;this.handlerId&&(t?e&&(this.lastConnectedHandlerId=this.handlerId,this.lastConnectedDropTarget=t,this.lastConnectedDropTargetOptions=this.dropTargetOptions,this.unsubscribeDropTarget=this.backend.connectDropTarget(this.handlerId,t,this.dropTargetOptions)):this.lastConnectedDropTarget=t)}receiveHandlerId(e){e!==this.handlerId&&(this.handlerId=e,this.reconnect())}get dropTargetOptions(){return this.dropTargetOptionsInternal}set dropTargetOptions(e){this.dropTargetOptionsInternal=e}didHandlerIdChange(){return this.lastConnectedHandlerId!==this.handlerId}didDropTargetChange(){return this.lastConnectedDropTarget!==this.dropTarget}didOptionsChange(){return!bt(this.lastConnectedDropTargetOptions,this.dropTargetOptions)}disconnectDropTarget(){this.unsubscribeDropTarget&&(this.unsubscribeDropTarget(),this.unsubscribeDropTarget=void 0)}get dropTarget(){return this.dropTargetNode||this.dropTargetRef&&this.dropTargetRef.current}clearDropTarget(){this.dropTargetRef=null,this.dropTargetNode=null}constructor(e){this.hooks=kt({dropTarget:(e,t)=>{this.clearDropTarget(),this.dropTargetOptions=t,wt(e)?this.dropTargetRef=e:this.dropTargetNode=e,this.reconnect()}}),this.handlerId=null,this.dropTargetRef=null,this.dropTargetOptionsInternal=null,this.lastConnectedHandlerId=null,this.lastConnectedDropTarget=null,this.lastConnectedDropTargetOptions=null,this.backend=e}}const Et=(0,v.createContext)({dragDropManager:void 0});function Ot(){const{dragDropManager:e}=(0,v.useContext)(Et);return St(null!=e,"Expected drag drop context"),e}let Dt=!1;class It{receiveHandlerId(e){this.targetId=e}getHandlerId(){return this.targetId}subscribeToStateChange(e,t){return this.internalMonitor.subscribeToStateChange(e,t)}canDrop(){if(!this.targetId)return!1;St(!Dt,"You may not call monitor.canDrop() inside your canDrop() implementation. Read more: http://react-dnd.github.io/react-dnd/docs/api/drop-target-monitor");try{return Dt=!0,this.internalMonitor.canDropOnTarget(this.targetId)}finally{Dt=!1}}isOver(e){return!!this.targetId&&this.internalMonitor.isOverTarget(this.targetId,e)}getItemType(){return this.internalMonitor.getItemType()}getItem(){return this.internalMonitor.getItem()}getDropResult(){return this.internalMonitor.getDropResult()}didDrop(){return this.internalMonitor.didDrop()}getInitialClientOffset(){return this.internalMonitor.getInitialClientOffset()}getInitialSourceClientOffset(){return this.internalMonitor.getInitialSourceClientOffset()}getSourceClientOffset(){return this.internalMonitor.getSourceClientOffset()}getClientOffset(){return this.internalMonitor.getClientOffset()}getDifferenceFromInitialOffset(){return this.internalMonitor.getDifferenceFromInitialOffset()}constructor(e){this.targetId=null,this.internalMonitor=e.getMonitor()}}class Tt{canDrop(){const e=this.spec,t=this.monitor;return!e.canDrop||e.canDrop(t.getItem(),t)}hover(){const e=this.spec,t=this.monitor;e.hover&&e.hover(t.getItem(),t)}drop(){const e=this.spec,t=this.monitor;if(e.drop)return e.drop(t.getItem(),t)}constructor(e,t){this.spec=e,this.monitor=t}}function Pt(e,t){const n=vt(e,t),r=function(){const e=Ot();return(0,v.useMemo)((()=>new It(e)),[e])}(),a=function(e){const t=Ot(),n=(0,v.useMemo)((()=>new Ct(t.getBackend())),[t]);return gt((()=>(n.dropTargetOptions=e||null,n.reconnect(),()=>n.disconnectDropTarget())),[e]),n}(n.options);return function(e,t,n){const r=Ot(),a=function(e,t){const n=(0,v.useMemo)((()=>new Tt(e,t)),[t]);return(0,v.useEffect)((()=>{n.spec=e}),[e]),n}(e,t),o=function(e){const{accept:t}=e;return(0,v.useMemo)((()=>(St(null!=e.accept,"accept must be defined"),Array.isArray(t)?t:[t])),[t])}(e);gt((function(){const[e,i]=function(e,t,n){const r=n.getRegistry(),a=r.addTarget(e,t);return[a,()=>r.removeTarget(a)]}(o,a,r);return t.receiveHandlerId(e),n.receiveHandlerId(e),i}),[r,t,a,n,o.map((e=>e.toString())).join("|")])}(n,r,a),[mt(n.collect,r,a),yt(a)]}function _t(e){return _t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_t(e)}function Nt(e){return function(e){if(Array.isArray(e))return Rt(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||At(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function At(e,t){if(e){if("string"==typeof e)return Rt(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Rt(e,t):void 0}}function Rt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function Lt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Mt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Lt(Object(n),!0).forEach((function(t){zt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Lt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function zt(e,t,n){return(t=function(e){var t=function(e){if("object"!=_t(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=_t(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==_t(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var jt={weekData:[]},Ft=function(e,t){switch(t.type){case"LOAD_DATA":return Mt(Mt({},e),{},{weekData:t.payload});case"MOVE_WORKOUT":var n=t.payload,r=n.fromDay,a=n.toDay,o=n.workoutId;if(r===a)return e;var i=e.weekData.find((function(e){return e.day===r})),l=e.weekData.find((function(e){return e.day===a}));if(i&&l){var s=i.workouts.filter((function(e){return e.id!==o})),u=i.workouts.find((function(e){return e.id===o}));if(u){var c=[].concat(Nt(l.workouts),[u]);return Mt(Mt({},e),{},{weekData:e.weekData.map((function(e){return e.day===r?Mt(Mt({},e),{},{workouts:s}):e.day===a?Mt(Mt({},e),{},{workouts:c}):e}))})}}return e;case"MOVE_EXERCISE":var d=t.payload,f=d.fromWorkoutId,p=d.toWorkoutId,h=d.exerciseId;if(f===p)return e;var g=e.weekData.map((function(e){return e.workouts})).flat().find((function(e){return e.id===f})),m=e.weekData.map((function(e){return e.workouts})).flat().find((function(e){return e.id===p}));if(g&&m){var v=g.exercises.filter((function(e){return e.id!==h})),y=g.exercises.find((function(e){return e.id===h}));if(y){var b=[].concat(Nt(m.exercises),[y]);return Mt(Mt({},e),{},{weekData:e.weekData.map((function(e){return Mt(Mt({},e),{},{workouts:e.workouts.map((function(e){return e.id===f?Mt(Mt({},e),{},{exercises:v}):e.id===p?Mt(Mt({},e),{},{exercises:b}):e}))})}))})}}return e;default:return e}},Ut=(0,v.createContext)({state:jt,dispatch:function(){return null}}),Bt=function(e){var t,n,r=e.children,a=(t=(0,v.useReducer)(Ft,jt),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],s=!0,u=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,a=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw a}}return l}}(t,n)||At(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=a[0],i=a[1];return(0,Je.jsx)(Ut.Provider,{value:{state:o,dispatch:i},children:r})};const $t=function(){var e=(0,v.useContext)(Ut);if(void 0===e)throw new Error("useData must be used within a DataProvider");return e};function Ht(e){return(0,v.useMemo)((()=>e.hooks.dragSource()),[e])}function Wt(e){return(0,v.useMemo)((()=>e.hooks.dragPreview()),[e])}class Vt{receiveHandlerId(e){this.handlerId!==e&&(this.handlerId=e,this.reconnect())}get connectTarget(){return this.dragSource}get dragSourceOptions(){return this.dragSourceOptionsInternal}set dragSourceOptions(e){this.dragSourceOptionsInternal=e}get dragPreviewOptions(){return this.dragPreviewOptionsInternal}set dragPreviewOptions(e){this.dragPreviewOptionsInternal=e}reconnect(){const e=this.reconnectDragSource();this.reconnectDragPreview(e)}reconnectDragSource(){const e=this.dragSource,t=this.didHandlerIdChange()||this.didConnectedDragSourceChange()||this.didDragSourceOptionsChange();return t&&this.disconnectDragSource(),this.handlerId?e?(t&&(this.lastConnectedHandlerId=this.handlerId,this.lastConnectedDragSource=e,this.lastConnectedDragSourceOptions=this.dragSourceOptions,this.dragSourceUnsubscribe=this.backend.connectDragSource(this.handlerId,e,this.dragSourceOptions)),t):(this.lastConnectedDragSource=e,t):t}reconnectDragPreview(e=!1){const t=this.dragPreview,n=e||this.didHandlerIdChange()||this.didConnectedDragPreviewChange()||this.didDragPreviewOptionsChange();n&&this.disconnectDragPreview(),this.handlerId&&(t?n&&(this.lastConnectedHandlerId=this.handlerId,this.lastConnectedDragPreview=t,this.lastConnectedDragPreviewOptions=this.dragPreviewOptions,this.dragPreviewUnsubscribe=this.backend.connectDragPreview(this.handlerId,t,this.dragPreviewOptions)):this.lastConnectedDragPreview=t)}didHandlerIdChange(){return this.lastConnectedHandlerId!==this.handlerId}didConnectedDragSourceChange(){return this.lastConnectedDragSource!==this.dragSource}didConnectedDragPreviewChange(){return this.lastConnectedDragPreview!==this.dragPreview}didDragSourceOptionsChange(){return!bt(this.lastConnectedDragSourceOptions,this.dragSourceOptions)}didDragPreviewOptionsChange(){return!bt(this.lastConnectedDragPreviewOptions,this.dragPreviewOptions)}disconnectDragSource(){this.dragSourceUnsubscribe&&(this.dragSourceUnsubscribe(),this.dragSourceUnsubscribe=void 0)}disconnectDragPreview(){this.dragPreviewUnsubscribe&&(this.dragPreviewUnsubscribe(),this.dragPreviewUnsubscribe=void 0,this.dragPreviewNode=null,this.dragPreviewRef=null)}get dragSource(){return this.dragSourceNode||this.dragSourceRef&&this.dragSourceRef.current}get dragPreview(){return this.dragPreviewNode||this.dragPreviewRef&&this.dragPreviewRef.current}clearDragSource(){this.dragSourceNode=null,this.dragSourceRef=null}clearDragPreview(){this.dragPreviewNode=null,this.dragPreviewRef=null}constructor(e){this.hooks=kt({dragSource:(e,t)=>{this.clearDragSource(),this.dragSourceOptions=t||null,wt(e)?this.dragSourceRef=e:this.dragSourceNode=e,this.reconnectDragSource()},dragPreview:(e,t)=>{this.clearDragPreview(),this.dragPreviewOptions=t||null,wt(e)?this.dragPreviewRef=e:this.dragPreviewNode=e,this.reconnectDragPreview()}}),this.handlerId=null,this.dragSourceRef=null,this.dragSourceOptionsInternal=null,this.dragPreviewRef=null,this.dragPreviewOptionsInternal=null,this.lastConnectedHandlerId=null,this.lastConnectedDragSource=null,this.lastConnectedDragSourceOptions=null,this.lastConnectedDragPreview=null,this.lastConnectedDragPreviewOptions=null,this.backend=e}}let Qt=!1,qt=!1;class Yt{receiveHandlerId(e){this.sourceId=e}getHandlerId(){return this.sourceId}canDrag(){St(!Qt,"You may not call monitor.canDrag() inside your canDrag() implementation. Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor");try{return Qt=!0,this.internalMonitor.canDragSource(this.sourceId)}finally{Qt=!1}}isDragging(){if(!this.sourceId)return!1;St(!qt,"You may not call monitor.isDragging() inside your isDragging() implementation. Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor");try{return qt=!0,this.internalMonitor.isDraggingSource(this.sourceId)}finally{qt=!1}}subscribeToStateChange(e,t){return this.internalMonitor.subscribeToStateChange(e,t)}isDraggingSource(e){return this.internalMonitor.isDraggingSource(e)}isOverTarget(e,t){return this.internalMonitor.isOverTarget(e,t)}getTargetIds(){return this.internalMonitor.getTargetIds()}isSourcePublic(){return this.internalMonitor.isSourcePublic()}getSourceId(){return this.internalMonitor.getSourceId()}subscribeToOffsetChange(e){return this.internalMonitor.subscribeToOffsetChange(e)}canDragSource(e){return this.internalMonitor.canDragSource(e)}canDropOnTarget(e){return this.internalMonitor.canDropOnTarget(e)}getItemType(){return this.internalMonitor.getItemType()}getItem(){return this.internalMonitor.getItem()}getDropResult(){return this.internalMonitor.getDropResult()}didDrop(){return this.internalMonitor.didDrop()}getInitialClientOffset(){return this.internalMonitor.getInitialClientOffset()}getInitialSourceClientOffset(){return this.internalMonitor.getInitialSourceClientOffset()}getSourceClientOffset(){return this.internalMonitor.getSourceClientOffset()}getClientOffset(){return this.internalMonitor.getClientOffset()}getDifferenceFromInitialOffset(){return this.internalMonitor.getDifferenceFromInitialOffset()}constructor(e){this.sourceId=null,this.internalMonitor=e.getMonitor()}}class Gt{beginDrag(){const e=this.spec,t=this.monitor;let n=null;return n="object"==typeof e.item?e.item:"function"==typeof e.item?e.item(t):{},null!=n?n:null}canDrag(){const e=this.spec,t=this.monitor;return"boolean"==typeof e.canDrag?e.canDrag:"function"!=typeof e.canDrag||e.canDrag(t)}isDragging(e,t){const n=this.spec,r=this.monitor,{isDragging:a}=n;return a?a(r):t===e.getSourceId()}endDrag(){const e=this.spec,t=this.monitor,n=this.connector,{end:r}=e;r&&r(t.getItem(),t),n.reconnect()}constructor(e,t,n){this.spec=e,this.monitor=t,this.connector=n}}function Kt(e,t){const n=vt(e,t);St(!n.begin,"useDrag::spec.begin was deprecated in v14. Replace spec.begin() with spec.item(). (see more here - https://react-dnd.github.io/react-dnd/docs/api/use-drag)");const r=function(){const e=Ot();return(0,v.useMemo)((()=>new Yt(e)),[e])}(),a=function(e,t){const n=Ot(),r=(0,v.useMemo)((()=>new Vt(n.getBackend())),[n]);return gt((()=>(r.dragSourceOptions=e||null,r.reconnect(),()=>r.disconnectDragSource())),[r,e]),gt((()=>(r.dragPreviewOptions=t||null,r.reconnect(),()=>r.disconnectDragPreview())),[r,t]),r}(n.options,n.previewOptions);return function(e,t,n){const r=Ot(),a=function(e,t,n){const r=(0,v.useMemo)((()=>new Gt(e,t,n)),[t,n]);return(0,v.useEffect)((()=>{r.spec=e}),[e]),r}(e,t,n),o=function(e){return(0,v.useMemo)((()=>{const t=e.type;return St(null!=t,"spec.type must be defined"),t}),[e])}(e);gt((function(){if(null!=o){const[e,i]=function(e,t,n){const r=n.getRegistry(),a=r.addSource(e,t);return[a,()=>r.removeSource(a)]}(o,a,r);return t.receiveHandlerId(e),n.receiveHandlerId(e),i}}),[r,t,n,a,o])}(n,r,a),[mt(n.collect,r,a),Ht(a),Wt(a)]}function Xt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Zt=function(e){var t,n,r=e.exercise,a=e.workoutId,o=function(e,t){return Kt({type:"exercise",item:{id:e,workoutId:t},collect:function(e){return{isExerciseDragging:e.isDragging()}}})}(null==r?void 0:r.id,a),i=(n=2,function(e){if(Array.isArray(e))return e}(t=o)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],s=!0,u=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,a=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw a}}return l}}(t,n)||function(e,t){if(e){if("string"==typeof e)return Xt(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Xt(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=i[0].isExerciseDragging,s=i[1];return(0,Je.jsxs)(dt,{ref:s,style:{opacity:l?.5:void 0},children:[(0,Je.jsx)(ft,{children:(0,Je.jsx)(ct,{variant:"h6",children:r.name})}),(0,Je.jsxs)(pt,{children:[(0,Je.jsxs)(ct,{variant:"body1",children:[r.sets,"x"]}),(0,Je.jsx)(ct,{variant:"body2",children:r.details})]})]})};function Jt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],s=!0,u=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,a=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw a}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return en(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?en(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function en(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const tn=function(e){var t,n,r=e.workout,a=e.day,o=function(e,t){return Kt({type:"workout",item:{id:e,day:t},collect:function(e){return{isWorkoutDragging:e.isDragging()}}})}(r.id,a),i=Jt(o,2),l=i[0].isWorkoutDragging,s=i[1],u=Jt((t=r.id,n=$t().dispatch,Pt({accept:"exercise",drop:function(e){n({type:"MOVE_EXERCISE",payload:{exerciseId:e.id,fromWorkoutId:e.workoutId,toWorkoutId:t}})},collect:function(e){return{isExerciseDropOver:e.isOver()}}})),2),c=u[0].isExerciseDropOver,d=u[1];return(0,Je.jsxs)(tt,{ref:function(e){s(e),d(e)},style:{opacity:l?.5:void 0,borderWidth:c?"2px solid var(--hightlight)":void 0},children:[(0,Je.jsxs)(nt,{children:[(0,Je.jsx)(ct,{variant:"h5",children:r.name}),(0,Je.jsx)(et,{variant:"icon",icon:"...",onClick:function(){alert("not implemented")}})]}),(0,Je.jsx)(rt,{children:r.exercises.map((function(e){return(0,Je.jsx)(Zt,{workoutId:r.id,exercise:e},e.id)}))}),(0,Je.jsx)(at,{children:(0,Je.jsx)(et,{variant:"contained",icon:"+",onClick:function(){alert("not implemented")}})})]})};function nn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const rn=function(e){var t,n,r,a,o=e.day,i=e.addable,l=e.workouts,s=Xe(o),u=(t=s.weekDay,n=$t().dispatch,r=Pt({accept:"workout",drop:function(e){n({type:"MOVE_WORKOUT",payload:{workoutId:e.id,fromDay:e.day,toDay:t}})},collect:function(e){return{isWorkoutDropOver:e.isOver()}}}),a=2,function(e){if(Array.isArray(e))return e}(r)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],s=!0,u=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,a=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw a}}return l}}(r,a)||function(e,t){if(e){if("string"==typeof e)return nn(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?nn(e,t):void 0}}(r,a)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=u[0].isWorkoutDropOver,d=u[1];return(0,Je.jsxs)(qe,{ref:d,style:{backgroundColor:c?"var(--bg-hightlight)":void 0},children:[(0,Je.jsx)(Ye,{children:s.weekDay.toUpperCase()}),(0,Je.jsxs)(Ge,{children:[(0,Je.jsxs)(Ke,{$isActive:s.isToday,children:[s.monthDay,i&&(0,Je.jsx)(et,{variant:"contained",icon:"+",onClick:function(){alert("not implemented")}})]}),l.map((function(e){return(0,Je.jsx)(tn,{day:s.weekDay,workout:e},e.id)}))]})]})};var an=We.div.withConfig({displayName:"StyleWeekWrapper",componentId:"sc-1d8dhzh-0"})(["width:100%;display:flex;gap:10px;"]);const on=function(){var e=$t().state.weekData,t=function(){var e=new Date,t=e.getDay(),n=e.getDate(),r=new Date(e);r.setDate(n-(0===t?6:t-1));for(var a=[],o=0;o<7;o++){var i=new Date(r);i.setDate(r.getDate()+o),a.push(i)}return a}().map((function(t){var n,r,a=Xe(t);return{day:t,workouts:null!==(n=null===(r=e.find((function(e){return e.day===a.weekDay})))||void 0===r?void 0:r.workouts)&&void 0!==n?n:[]}}));return(0,Je.jsx)(an,{children:t.map((function(e,t){var n=e.day,r=e.workouts;return(0,Je.jsx)(rn,{day:n,workouts:r,addable:t%2==0},n.toDateString())}))})};var ln=[{day:"mon",workouts:[{id:1,name:"Legs Are For Walking, Not For Exercise",exercises:[{id:1,name:"Squats",details:"50 lb x 5, 60 lb x 5, 70 lb x 5",sets:0},{id:2,name:"Lunges",details:"30 lb x 5, 40 lb x 5, 50 lb x 5",sets:6}]},{id:2,name:"Chest Day",exercises:[{id:3,name:"Bench Press",details:"50 lb x 5, 60 lb x 5, 70 lb x 5",sets:9},{id:4,name:"Push Ups",details:"Bodyweight x 20",sets:3}]}]},{day:"tue",workouts:[]},{day:"wed",workouts:[{id:3,name:"Back Day",exercises:[{id:5,name:"Pull Ups",details:"Bodyweight x 8",sets:3},{id:6,name:"Deadlifts",details:"100 lb x 5, 120 lb x 5, 140 lb x 5",sets:12}]}]},{day:"thu",workouts:[{id:4,name:"Shoulder Day",exercises:[{id:7,name:"Overhead Press",details:"40 lb x 5, 50 lb x 5, 60 lb x 5",sets:12},{id:8,name:"Lateral Raises",details:"15 lb x 15, 20 lb x 15, 25 lb x 15, 25 lb x 15",sets:3}]}]},{day:"fri",workouts:[{id:5,name:"Arm Day",exercises:[{id:9,name:"Bicep Curls",details:"20 lb x 12, 25 lb x 12, 30 lb x 12",sets:12},{id:10,name:"Tricep Dips",details:"Bodyweight x 15",sets:3}]}]},{day:"sat",workouts:[{id:6,name:"Core Day",exercises:[{id:11,name:"Planks",details:"60 seconds x 3",sets:3},{id:12,name:"Russian Twists",details:"20 lb x 20",sets:3},{id:13,name:"Russian Twists And Not Leg Day",details:"20 lb x 20",sets:3},{id:14,name:"Legs day",details:"15 lb x 15, 20 lb x 15, 25 lb x 15, 25 lb x 15",sets:12},{id:15,name:"Run",details:"42km",sets:1}]}]},{day:"sun",workouts:[{id:7,name:"Rest Day",exercises:[]},{id:8,name:"Legs Are For Walking, Not For Exercise",exercises:[]}]}],sn=function(e){return ln};const un=function(){var e=$t().dispatch;return(0,v.useEffect)((function(){var t=sn(new Date);e({type:"LOAD_DATA",payload:t})}),[e]),(0,Je.jsx)(Qe,{children:(0,Je.jsx)(on,{})})};function cn(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var dn="function"==typeof Symbol&&Symbol.observable||"@@observable",fn=function(){return Math.random().toString(36).substring(7).split("").join(".")},pn={INIT:"@@redux/INIT"+fn(),REPLACE:"@@redux/REPLACE"+fn(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+fn()}};function hn(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(cn(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(cn(1));return n(hn)(e,t)}if("function"!=typeof e)throw new Error(cn(2));var a=e,o=t,i=[],l=i,s=!1;function u(){l===i&&(l=i.slice())}function c(){if(s)throw new Error(cn(3));return o}function d(e){if("function"!=typeof e)throw new Error(cn(4));if(s)throw new Error(cn(5));var t=!0;return u(),l.push(e),function(){if(t){if(s)throw new Error(cn(6));t=!1,u();var n=l.indexOf(e);l.splice(n,1),i=null}}}function f(e){if(!function(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}(e))throw new Error(cn(7));if(void 0===e.type)throw new Error(cn(8));if(s)throw new Error(cn(9));try{s=!0,o=a(o,e)}finally{s=!1}for(var t=i=l,n=0;n<t.length;n++)(0,t[n])();return e}return f({type:pn.INIT}),(r={dispatch:f,subscribe:d,getState:c,replaceReducer:function(e){if("function"!=typeof e)throw new Error(cn(10));a=e,f({type:pn.REPLACE})}})[dn]=function(){var e,t=d;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(cn(11));function n(){e.next&&e.next(c())}return n(),{unsubscribe:t(n)}}})[dn]=function(){return this},e},r}function gn(e){return"object"==typeof e}const mn="dnd-core/INIT_COORDS",vn="dnd-core/BEGIN_DRAG",yn="dnd-core/PUBLISH_DRAG_SOURCE",bn="dnd-core/HOVER",wn="dnd-core/DROP",Sn="dnd-core/END_DRAG";function kn(e,t){return{type:mn,payload:{sourceClientOffset:t||null,clientOffset:e||null}}}const xn={type:mn,payload:{clientOffset:null,sourceClientOffset:null}};function Cn(e){return function(t=[],n={publishSource:!0}){const{publishSource:r=!0,clientOffset:a,getSourceClientOffset:o}=n,i=e.getMonitor(),l=e.getRegistry();e.dispatch(kn(a)),function(e,t,n){St(!t.isDragging(),"Cannot call beginDrag while dragging."),e.forEach((function(e){St(n.getSource(e),"Expected sourceIds to be registered.")}))}(t,i,l);const s=function(e,t){let n=null;for(let r=e.length-1;r>=0;r--)if(t.canDragSource(e[r])){n=e[r];break}return n}(t,i);if(null==s)return void e.dispatch(xn);let u=null;if(a){if(!o)throw new Error("getSourceClientOffset must be defined");!function(e){St("function"==typeof e,"When clientOffset is provided, getSourceClientOffset must be a function.")}(o),u=o(s)}e.dispatch(kn(a,u));const c=l.getSource(s).beginDrag(i,s);if(null==c)return;!function(e){St(gn(e),"Item must be an object.")}(c),l.pinSource(s);const d=l.getSourceType(s);return{type:vn,payload:{itemType:d,item:c,sourceId:s,clientOffset:a||null,sourceClientOffset:u||null,isSourcePublic:!!r}}}}function En(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function On(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){En(e,t,n[t])}))}return e}function Dn(e){return function(t={}){const n=e.getMonitor(),r=e.getRegistry();!function(e){St(e.isDragging(),"Cannot call drop while not dragging."),St(!e.didDrop(),"Cannot call drop twice during one drag operation.")}(n);const a=function(e){const t=e.getTargetIds().filter(e.canDropOnTarget,e);return t.reverse(),t}(n);a.forEach(((a,o)=>{const i=function(e,t,n,r){const a=n.getTarget(e);let o=a?a.drop(r,e):void 0;return function(e){St(void 0===e||gn(e),"Drop result must either be an object or undefined.")}(o),void 0===o&&(o=0===t?{}:r.getDropResult()),o}(a,o,r,n),l={type:wn,payload:{dropResult:On({},t,i)}};e.dispatch(l)}))}}function In(e){return function(){const t=e.getMonitor(),n=e.getRegistry();!function(e){St(e.isDragging(),"Cannot call endDrag while not dragging.")}(t);const r=t.getSourceId();return null!=r&&(n.getSource(r,!0).endDrag(t,r),n.unpinSource()),{type:Sn}}}function Tn(e,t){return null===t?null===e:Array.isArray(e)?e.some((e=>e===t)):e===t}function Pn(e){return function(t,{clientOffset:n}={}){!function(e){St(Array.isArray(e),"Expected targetIds to be an array.")}(t);const r=t.slice(0),a=e.getMonitor(),o=e.getRegistry();return function(e,t,n){for(let r=e.length-1;r>=0;r--){const a=e[r];Tn(t.getTargetType(a),n)||e.splice(r,1)}}(r,o,a.getItemType()),function(e,t,n){St(t.isDragging(),"Cannot call hover while not dragging."),St(!t.didDrop(),"Cannot call hover after drop.");for(let t=0;t<e.length;t++){const r=e[t];St(e.lastIndexOf(r)===t,"Expected targetIds to be unique in the passed array."),St(n.getTarget(r),"Expected targetIds to be registered.")}}(r,a,o),function(e,t,n){e.forEach((function(e){n.getTarget(e).hover(t,e)}))}(r,a,o),{type:bn,payload:{targetIds:r,clientOffset:n||null}}}}function _n(e){return function(){if(e.getMonitor().isDragging())return{type:yn}}}class Nn{receiveBackend(e){this.backend=e}getMonitor(){return this.monitor}getBackend(){return this.backend}getRegistry(){return this.monitor.registry}getActions(){const e=this,{dispatch:t}=this.store,n=function(e){return{beginDrag:Cn(e),publishDragSource:_n(e),hover:Pn(e),drop:Dn(e),endDrag:In(e)}}(this);return Object.keys(n).reduce(((r,a)=>{const o=n[a];var i;return r[a]=(i=o,(...n)=>{const r=i.apply(e,n);void 0!==r&&t(r)}),r}),{})}dispatch(e){this.store.dispatch(e)}constructor(e,t){this.isSetUp=!1,this.handleRefCountChange=()=>{const e=this.store.getState().refCount>0;this.backend&&(e&&!this.isSetUp?(this.backend.setup(),this.isSetUp=!0):!e&&this.isSetUp&&(this.backend.teardown(),this.isSetUp=!1))},this.store=e,this.monitor=t,e.subscribe(this.handleRefCountChange)}}function An(e,t){return{x:e.x-t.x,y:e.y-t.y}}const Rn=[],Ln=[];Rn.__IS_NONE__=!0,Ln.__IS_ALL__=!0;class Mn{subscribeToStateChange(e,t={}){const{handlerIds:n}=t;St("function"==typeof e,"listener must be a function."),St(void 0===n||Array.isArray(n),"handlerIds, when specified, must be an array of strings.");let r=this.store.getState().stateId;return this.store.subscribe((()=>{const t=this.store.getState(),a=t.stateId;try{const o=a===r||a===r+1&&!function(e,t){return e!==Rn&&(e===Ln||void 0===t||(n=e,t.filter((e=>n.indexOf(e)>-1))).length>0);var n}(t.dirtyHandlerIds,n);o||e()}finally{r=a}}))}subscribeToOffsetChange(e){St("function"==typeof e,"listener must be a function.");let t=this.store.getState().dragOffset;return this.store.subscribe((()=>{const n=this.store.getState().dragOffset;n!==t&&(t=n,e())}))}canDragSource(e){if(!e)return!1;const t=this.registry.getSource(e);return St(t,`Expected to find a valid source. sourceId=${e}`),!this.isDragging()&&t.canDrag(this,e)}canDropOnTarget(e){if(!e)return!1;const t=this.registry.getTarget(e);return St(t,`Expected to find a valid target. targetId=${e}`),!(!this.isDragging()||this.didDrop())&&(Tn(this.registry.getTargetType(e),this.getItemType())&&t.canDrop(this,e))}isDragging(){return Boolean(this.getItemType())}isDraggingSource(e){if(!e)return!1;const t=this.registry.getSource(e,!0);return St(t,`Expected to find a valid source. sourceId=${e}`),!(!this.isDragging()||!this.isSourcePublic())&&(this.registry.getSourceType(e)===this.getItemType()&&t.isDragging(this,e))}isOverTarget(e,t={shallow:!1}){if(!e)return!1;const{shallow:n}=t;if(!this.isDragging())return!1;const r=this.registry.getTargetType(e),a=this.getItemType();if(a&&!Tn(r,a))return!1;const o=this.getTargetIds();if(!o.length)return!1;const i=o.indexOf(e);return n?i===o.length-1:i>-1}getItemType(){return this.store.getState().dragOperation.itemType}getItem(){return this.store.getState().dragOperation.item}getSourceId(){return this.store.getState().dragOperation.sourceId}getTargetIds(){return this.store.getState().dragOperation.targetIds}getDropResult(){return this.store.getState().dragOperation.dropResult}didDrop(){return this.store.getState().dragOperation.didDrop}isSourcePublic(){return Boolean(this.store.getState().dragOperation.isSourcePublic)}getInitialClientOffset(){return this.store.getState().dragOffset.initialClientOffset}getInitialSourceClientOffset(){return this.store.getState().dragOffset.initialSourceClientOffset}getClientOffset(){return this.store.getState().dragOffset.clientOffset}getSourceClientOffset(){return function(e){const{clientOffset:t,initialClientOffset:n,initialSourceClientOffset:r}=e;return t&&n&&r?An(function(e,t){return{x:e.x+t.x,y:e.y+t.y}}(t,r),n):null}(this.store.getState().dragOffset)}getDifferenceFromInitialOffset(){return function(e){const{clientOffset:t,initialClientOffset:n}=e;return t&&n?An(t,n):null}(this.store.getState().dragOffset)}constructor(e,t){this.store=e,this.registry=t}}const zn="undefined"!=typeof global?global:self,jn=zn.MutationObserver||zn.WebKitMutationObserver;function Fn(e){return function(){const t=setTimeout(r,0),n=setInterval(r,50);function r(){clearTimeout(t),clearInterval(n),e()}}}const Un="function"==typeof jn?function(e){let t=1;const n=new jn(e),r=document.createTextNode("");return n.observe(r,{characterData:!0}),function(){t=-t,r.data=t}}:Fn;class Bn{call(){try{this.task&&this.task()}catch(e){this.onError(e)}finally{this.task=null,this.release(this)}}constructor(e,t){this.onError=e,this.release=t,this.task=null}}const $n=new class{enqueueTask(e){const{queue:t,requestFlush:n}=this;t.length||(n(),this.flushing=!0),t[t.length]=e}constructor(){this.queue=[],this.pendingErrors=[],this.flushing=!1,this.index=0,this.capacity=1024,this.flush=()=>{const{queue:e}=this;for(;this.index<e.length;){const t=this.index;if(this.index++,e[t].call(),this.index>this.capacity){for(let t=0,n=e.length-this.index;t<n;t++)e[t]=e[t+this.index];e.length-=this.index,this.index=0}}e.length=0,this.index=0,this.flushing=!1},this.registerPendingError=e=>{this.pendingErrors.push(e),this.requestErrorThrow()},this.requestFlush=Un(this.flush),this.requestErrorThrow=Fn((()=>{if(this.pendingErrors.length)throw this.pendingErrors.shift()}))}},Hn=new class{create(e){const t=this.freeTasks,n=t.length?t.pop():new Bn(this.onError,(e=>t[t.length]=e));return n.task=e,n}constructor(e){this.onError=e,this.freeTasks=[]}}($n.registerPendingError),Wn="dnd-core/ADD_SOURCE",Vn="dnd-core/ADD_TARGET",Qn="dnd-core/REMOVE_SOURCE",qn="dnd-core/REMOVE_TARGET";function Yn(e,t){t&&Array.isArray(e)?e.forEach((e=>Yn(e,!1))):St("string"==typeof e||"symbol"==typeof e,t?"Type can only be a string, a symbol, or an array of either.":"Type can only be a string or a symbol.")}var Gn;!function(e){e.SOURCE="SOURCE",e.TARGET="TARGET"}(Gn||(Gn={}));let Kn=0;function Xn(e){switch(e[0]){case"S":return Gn.SOURCE;case"T":return Gn.TARGET;default:throw new Error(`Cannot parse handler ID: ${e}`)}}function Zn(e,t){const n=e.entries();let r=!1;do{const{done:e,value:[,a]}=n.next();if(a===t)return!0;r=!!e}while(!r);return!1}class Jn{addSource(e,t){Yn(e),function(e){St("function"==typeof e.canDrag,"Expected canDrag to be a function."),St("function"==typeof e.beginDrag,"Expected beginDrag to be a function."),St("function"==typeof e.endDrag,"Expected endDrag to be a function.")}(t);const n=this.addHandler(Gn.SOURCE,e,t);return this.store.dispatch(function(e){return{type:Wn,payload:{sourceId:e}}}(n)),n}addTarget(e,t){Yn(e,!0),function(e){St("function"==typeof e.canDrop,"Expected canDrop to be a function."),St("function"==typeof e.hover,"Expected hover to be a function."),St("function"==typeof e.drop,"Expected beginDrag to be a function.")}(t);const n=this.addHandler(Gn.TARGET,e,t);return this.store.dispatch(function(e){return{type:Vn,payload:{targetId:e}}}(n)),n}containsHandler(e){return Zn(this.dragSources,e)||Zn(this.dropTargets,e)}getSource(e,t=!1){return St(this.isSourceId(e),"Expected a valid source ID."),t&&e===this.pinnedSourceId?this.pinnedSource:this.dragSources.get(e)}getTarget(e){return St(this.isTargetId(e),"Expected a valid target ID."),this.dropTargets.get(e)}getSourceType(e){return St(this.isSourceId(e),"Expected a valid source ID."),this.types.get(e)}getTargetType(e){return St(this.isTargetId(e),"Expected a valid target ID."),this.types.get(e)}isSourceId(e){return Xn(e)===Gn.SOURCE}isTargetId(e){return Xn(e)===Gn.TARGET}removeSource(e){var t;St(this.getSource(e),"Expected an existing source."),this.store.dispatch(function(e){return{type:Qn,payload:{sourceId:e}}}(e)),t=()=>{this.dragSources.delete(e),this.types.delete(e)},$n.enqueueTask(Hn.create(t))}removeTarget(e){St(this.getTarget(e),"Expected an existing target."),this.store.dispatch(function(e){return{type:qn,payload:{targetId:e}}}(e)),this.dropTargets.delete(e),this.types.delete(e)}pinSource(e){const t=this.getSource(e);St(t,"Expected an existing source."),this.pinnedSourceId=e,this.pinnedSource=t}unpinSource(){St(this.pinnedSource,"No source is pinned at the time."),this.pinnedSourceId=null,this.pinnedSource=null}addHandler(e,t,n){const r=function(e){const t=(Kn++).toString();switch(e){case Gn.SOURCE:return`S${t}`;case Gn.TARGET:return`T${t}`;default:throw new Error(`Unknown Handler Role: ${e}`)}}(e);return this.types.set(r,t),e===Gn.SOURCE?this.dragSources.set(r,n):e===Gn.TARGET&&this.dropTargets.set(r,n),r}constructor(e){this.types=new Map,this.dragSources=new Map,this.dropTargets=new Map,this.pinnedSourceId=null,this.pinnedSource=null,this.store=e}}const er=(e,t)=>e===t;function tr(e=Rn,t){switch(t.type){case bn:break;case Wn:case Vn:case qn:case Qn:return Rn;default:return Ln}const{targetIds:n=[],prevTargetIds:r=[]}=t.payload,a=function(e,t){const n=new Map,r=e=>{n.set(e,n.has(e)?n.get(e)+1:1)};e.forEach(r),t.forEach(r);const a=[];return n.forEach(((e,t)=>{1===e&&a.push(t)})),a}(n,r),o=a.length>0||!function(e,t,n=er){if(e.length!==t.length)return!1;for(let r=0;r<e.length;++r)if(!n(e[r],t[r]))return!1;return!0}(n,r);if(!o)return Rn;const i=r[r.length-1],l=n[n.length-1];return i!==l&&(i&&a.push(i),l&&a.push(l)),a}function nr(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const rr={initialSourceClientOffset:null,initialClientOffset:null,clientOffset:null};function ar(e=rr,t){const{payload:n}=t;switch(t.type){case mn:case vn:return{initialSourceClientOffset:n.sourceClientOffset,initialClientOffset:n.clientOffset,clientOffset:n.clientOffset};case bn:return r=e.clientOffset,a=n.clientOffset,!r&&!a||r&&a&&r.x===a.x&&r.y===a.y?e:function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){nr(e,t,n[t])}))}return e}({},e,{clientOffset:n.clientOffset});case Sn:case wn:return rr;default:return e}var r,a}function or(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ir(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){or(e,t,n[t])}))}return e}const lr={itemType:null,item:null,sourceId:null,targetIds:[],dropResult:null,didDrop:!1,isSourcePublic:null};function sr(e=lr,t){const{payload:n}=t;switch(t.type){case vn:return ir({},e,{itemType:n.itemType,item:n.item,sourceId:n.sourceId,isSourcePublic:n.isSourcePublic,dropResult:null,didDrop:!1});case yn:return ir({},e,{isSourcePublic:!0});case bn:return ir({},e,{targetIds:n.targetIds});case qn:return-1===e.targetIds.indexOf(n.targetId)?e:ir({},e,{targetIds:(r=e.targetIds,a=n.targetId,r.filter((e=>e!==a)))});case wn:return ir({},e,{dropResult:n.dropResult,didDrop:!0,targetIds:[]});case Sn:return ir({},e,{itemType:null,item:null,sourceId:null,dropResult:null,didDrop:!1,isSourcePublic:null,targetIds:[]});default:return e}var r,a}function ur(e=0,t){switch(t.type){case Wn:case Vn:return e+1;case Qn:case qn:return e-1;default:return e}}function cr(e=0){return e+1}function dr(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function fr(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){dr(e,t,n[t])}))}return e}function pr(e={},t){return{dirtyHandlerIds:tr(e.dirtyHandlerIds,{type:t.type,payload:fr({},t.payload,{prevTargetIds:(n=e,r=[],"dragOperation.targetIds".split(".").reduce(((e,t)=>e&&e[t]?e[t]:r||null),n))})}),dragOffset:ar(e.dragOffset,t),refCount:ur(e.refCount,t),dragOperation:sr(e.dragOperation,t),stateId:cr(e.stateId)};var n,r}function hr(e,t=void 0,n={},r=!1){const a=function(e){const t="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__;return hn(pr,e&&t&&t({name:"dnd-core",instanceId:"dnd-core"}))}(r),o=new Mn(a,new Jn(a)),i=new Nn(a,o),l=e(i,t,n);return i.receiveBackend(l),i}let gr=0;const mr=Symbol.for("__REACT_DND_CONTEXT_INSTANCE__");var vr=(0,v.memo)((function(e){var{children:t}=e,n=function(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}(e,["children"]);const[r,a]=function(e){if("manager"in e)return[{dragDropManager:e.manager},!1];const t=function(e,t=yr(),n,r){const a=t;return a[mr]||(a[mr]={dragDropManager:hr(e,t,n,r)}),a[mr]}(e.backend,e.context,e.options,e.debugMode);return[t,!e.context]}(n);return(0,v.useEffect)((()=>{if(a){const e=yr();return++gr,()=>{0==--gr&&(e[mr]=null)}}}),[]),(0,Je.jsx)(Et.Provider,{value:r,children:t})}));function yr(){return"undefined"!=typeof global?global:window}function br(e){let t=null;return()=>(null==t&&(t=e()),t)}class wr{enter(e){const t=this.entered.length;return this.entered=function(e,t){const n=new Set,r=e=>n.add(e);e.forEach(r),t.forEach(r);const a=[];return n.forEach((e=>a.push(e))),a}(this.entered.filter((t=>this.isNodeInDocument(t)&&(!t.contains||t.contains(e)))),[e]),0===t&&this.entered.length>0}leave(e){const t=this.entered.length;var n,r;return this.entered=(n=this.entered.filter(this.isNodeInDocument),r=e,n.filter((e=>e!==r))),t>0&&0===this.entered.length}reset(){this.entered=[]}constructor(e){this.entered=[],this.isNodeInDocument=e}}class Sr{initializeExposedProperties(){Object.keys(this.config.exposeProperties).forEach((e=>{Object.defineProperty(this.item,e,{configurable:!0,enumerable:!0,get:()=>(console.warn(`Browser doesn't allow reading "${e}" until the drop event.`),null)})}))}loadDataTransfer(e){if(e){const t={};Object.keys(this.config.exposeProperties).forEach((n=>{const r=this.config.exposeProperties[n];null!=r&&(t[n]={value:r(e,this.config.matchesTypes),configurable:!0,enumerable:!0})})),Object.defineProperties(this.item,t)}}canDrag(){return!0}beginDrag(){return this.item}isDragging(e,t){return t===e.getSourceId()}endDrag(){}constructor(e){this.config=e,this.item={},this.initializeExposedProperties()}}const kr="__NATIVE_FILE__",xr="__NATIVE_URL__",Cr="__NATIVE_TEXT__",Er="__NATIVE_HTML__";function Or(e,t,n){const r=t.reduce(((t,n)=>t||e.getData(n)),"");return null!=r?r:n}const Dr={[kr]:{exposeProperties:{files:e=>Array.prototype.slice.call(e.files),items:e=>e.items,dataTransfer:e=>e},matchesTypes:["Files"]},[Er]:{exposeProperties:{html:(e,t)=>Or(e,t,""),dataTransfer:e=>e},matchesTypes:["Html","text/html"]},[xr]:{exposeProperties:{urls:(e,t)=>Or(e,t,"").split("\n"),dataTransfer:e=>e},matchesTypes:["Url","text/uri-list"]},[Cr]:{exposeProperties:{text:(e,t)=>Or(e,t,""),dataTransfer:e=>e},matchesTypes:["Text","text/plain"]}};function Ir(e){if(!e)return null;const t=Array.prototype.slice.call(e.types||[]);return Object.keys(Dr).filter((e=>{const n=Dr[e];return!!(null==n?void 0:n.matchesTypes)&&n.matchesTypes.some((e=>t.indexOf(e)>-1))}))[0]||null}const Tr=br((()=>/firefox/i.test(navigator.userAgent))),Pr=br((()=>Boolean(window.safari)));class _r{interpolate(e){const{xs:t,ys:n,c1s:r,c2s:a,c3s:o}=this;let i=t.length-1;if(e===t[i])return n[i];let l,s=0,u=o.length-1;for(;s<=u;){l=Math.floor(.5*(s+u));const r=t[l];if(r<e)s=l+1;else{if(!(r>e))return n[l];u=l-1}}i=Math.max(0,u);const c=e-t[i],d=c*c;return n[i]+r[i]*c+a[i]*d+o[i]*c*d}constructor(e,t){const{length:n}=e,r=[];for(let e=0;e<n;e++)r.push(e);r.sort(((t,n)=>e[t]<e[n]?-1:1));const a=[],o=[],i=[];let l,s;for(let r=0;r<n-1;r++)l=e[r+1]-e[r],s=t[r+1]-t[r],o.push(l),a.push(s),i.push(s/l);const u=[i[0]];for(let e=0;e<o.length-1;e++){const t=i[e],n=i[e+1];if(t*n<=0)u.push(0);else{l=o[e];const r=o[e+1],a=l+r;u.push(3*a/((a+r)/t+(a+l)/n))}}u.push(i[i.length-1]);const c=[],d=[];let f;for(let e=0;e<u.length-1;e++){f=i[e];const t=u[e],n=1/o[e],r=t+u[e+1]-f-f;c.push((f-t-r)*n),d.push(r*n*n)}this.xs=e,this.ys=t,this.c1s=u,this.c2s=c,this.c3s=d}}function Nr(e){const t=1===e.nodeType?e:e.parentElement;if(!t)return null;const{top:n,left:r}=t.getBoundingClientRect();return{x:r,y:n}}function Ar(e){return{x:e.clientX,y:e.clientY}}class Rr{get window(){return this.globalContext?this.globalContext:"undefined"!=typeof window?window:void 0}get document(){var e;return(null===(e=this.globalContext)||void 0===e?void 0:e.document)?this.globalContext.document:this.window?this.window.document:void 0}get rootElement(){var e;return(null===(e=this.optionsArgs)||void 0===e?void 0:e.rootElement)||this.window}constructor(e,t){this.ownerDocument=null,this.globalContext=e,this.optionsArgs=t}}function Lr(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Mr(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){Lr(e,t,n[t])}))}return e}class zr{profile(){var e,t;return{sourcePreviewNodes:this.sourcePreviewNodes.size,sourcePreviewNodeOptions:this.sourcePreviewNodeOptions.size,sourceNodeOptions:this.sourceNodeOptions.size,sourceNodes:this.sourceNodes.size,dragStartSourceIds:(null===(e=this.dragStartSourceIds)||void 0===e?void 0:e.length)||0,dropTargetIds:this.dropTargetIds.length,dragEnterTargetIds:this.dragEnterTargetIds.length,dragOverTargetIds:(null===(t=this.dragOverTargetIds)||void 0===t?void 0:t.length)||0}}get window(){return this.options.window}get document(){return this.options.document}get rootElement(){return this.options.rootElement}setup(){const e=this.rootElement;if(void 0!==e){if(e.__isReactDndBackendSetUp)throw new Error("Cannot have two HTML5 backends at the same time.");e.__isReactDndBackendSetUp=!0,this.addEventListeners(e)}}teardown(){const e=this.rootElement;var t;void 0!==e&&(e.__isReactDndBackendSetUp=!1,this.removeEventListeners(this.rootElement),this.clearCurrentDragSourceNode(),this.asyncEndDragFrameId&&(null===(t=this.window)||void 0===t||t.cancelAnimationFrame(this.asyncEndDragFrameId)))}connectDragPreview(e,t,n){return this.sourcePreviewNodeOptions.set(e,n),this.sourcePreviewNodes.set(e,t),()=>{this.sourcePreviewNodes.delete(e),this.sourcePreviewNodeOptions.delete(e)}}connectDragSource(e,t,n){this.sourceNodes.set(e,t),this.sourceNodeOptions.set(e,n);const r=t=>this.handleDragStart(t,e),a=e=>this.handleSelectStart(e);return t.setAttribute("draggable","true"),t.addEventListener("dragstart",r),t.addEventListener("selectstart",a),()=>{this.sourceNodes.delete(e),this.sourceNodeOptions.delete(e),t.removeEventListener("dragstart",r),t.removeEventListener("selectstart",a),t.setAttribute("draggable","false")}}connectDropTarget(e,t){const n=t=>this.handleDragEnter(t,e),r=t=>this.handleDragOver(t,e),a=t=>this.handleDrop(t,e);return t.addEventListener("dragenter",n),t.addEventListener("dragover",r),t.addEventListener("drop",a),()=>{t.removeEventListener("dragenter",n),t.removeEventListener("dragover",r),t.removeEventListener("drop",a)}}addEventListeners(e){e.addEventListener&&(e.addEventListener("dragstart",this.handleTopDragStart),e.addEventListener("dragstart",this.handleTopDragStartCapture,!0),e.addEventListener("dragend",this.handleTopDragEndCapture,!0),e.addEventListener("dragenter",this.handleTopDragEnter),e.addEventListener("dragenter",this.handleTopDragEnterCapture,!0),e.addEventListener("dragleave",this.handleTopDragLeaveCapture,!0),e.addEventListener("dragover",this.handleTopDragOver),e.addEventListener("dragover",this.handleTopDragOverCapture,!0),e.addEventListener("drop",this.handleTopDrop),e.addEventListener("drop",this.handleTopDropCapture,!0))}removeEventListeners(e){e.removeEventListener&&(e.removeEventListener("dragstart",this.handleTopDragStart),e.removeEventListener("dragstart",this.handleTopDragStartCapture,!0),e.removeEventListener("dragend",this.handleTopDragEndCapture,!0),e.removeEventListener("dragenter",this.handleTopDragEnter),e.removeEventListener("dragenter",this.handleTopDragEnterCapture,!0),e.removeEventListener("dragleave",this.handleTopDragLeaveCapture,!0),e.removeEventListener("dragover",this.handleTopDragOver),e.removeEventListener("dragover",this.handleTopDragOverCapture,!0),e.removeEventListener("drop",this.handleTopDrop),e.removeEventListener("drop",this.handleTopDropCapture,!0))}getCurrentSourceNodeOptions(){const e=this.monitor.getSourceId(),t=this.sourceNodeOptions.get(e);return Mr({dropEffect:this.altKeyPressed?"copy":"move"},t||{})}getCurrentDropEffect(){return this.isDraggingNativeItem()?"copy":this.getCurrentSourceNodeOptions().dropEffect}getCurrentSourcePreviewNodeOptions(){const e=this.monitor.getSourceId();return Mr({anchorX:.5,anchorY:.5,captureDraggingState:!1},this.sourcePreviewNodeOptions.get(e)||{})}isDraggingNativeItem(){const t=this.monitor.getItemType();return Object.keys(e).some((n=>e[n]===t))}beginDragNativeItem(e,t){this.clearCurrentDragSourceNode(),this.currentNativeSource=function(e,t){const n=Dr[e];if(!n)throw new Error(`native type ${e} has no configuration`);const r=new Sr(n);return r.loadDataTransfer(t),r}(e,t),this.currentNativeHandle=this.registry.addSource(e,this.currentNativeSource),this.actions.beginDrag([this.currentNativeHandle])}setCurrentDragSourceNode(e){this.clearCurrentDragSourceNode(),this.currentDragSourceNode=e,this.mouseMoveTimeoutTimer=setTimeout((()=>{var e;return null===(e=this.rootElement)||void 0===e?void 0:e.addEventListener("mousemove",this.endDragIfSourceWasRemovedFromDOM,!0)}),1e3)}clearCurrentDragSourceNode(){var e;return!!this.currentDragSourceNode&&(this.currentDragSourceNode=null,this.rootElement&&(null===(e=this.window)||void 0===e||e.clearTimeout(this.mouseMoveTimeoutTimer||void 0),this.rootElement.removeEventListener("mousemove",this.endDragIfSourceWasRemovedFromDOM,!0)),this.mouseMoveTimeoutTimer=null,!0)}handleDragStart(e,t){e.defaultPrevented||(this.dragStartSourceIds||(this.dragStartSourceIds=[]),this.dragStartSourceIds.unshift(t))}handleDragEnter(e,t){this.dragEnterTargetIds.unshift(t)}handleDragOver(e,t){null===this.dragOverTargetIds&&(this.dragOverTargetIds=[]),this.dragOverTargetIds.unshift(t)}handleDrop(e,t){this.dropTargetIds.unshift(t)}constructor(e,t,n){this.sourcePreviewNodes=new Map,this.sourcePreviewNodeOptions=new Map,this.sourceNodes=new Map,this.sourceNodeOptions=new Map,this.dragStartSourceIds=null,this.dropTargetIds=[],this.dragEnterTargetIds=[],this.currentNativeSource=null,this.currentNativeHandle=null,this.currentDragSourceNode=null,this.altKeyPressed=!1,this.mouseMoveTimeoutTimer=null,this.asyncEndDragFrameId=null,this.dragOverTargetIds=null,this.lastClientOffset=null,this.hoverRafId=null,this.getSourceClientOffset=e=>{const t=this.sourceNodes.get(e);return t&&Nr(t)||null},this.endDragNativeItem=()=>{this.isDraggingNativeItem()&&(this.actions.endDrag(),this.currentNativeHandle&&this.registry.removeSource(this.currentNativeHandle),this.currentNativeHandle=null,this.currentNativeSource=null)},this.isNodeInDocument=e=>Boolean(e&&this.document&&this.document.body&&this.document.body.contains(e)),this.endDragIfSourceWasRemovedFromDOM=()=>{const e=this.currentDragSourceNode;null==e||this.isNodeInDocument(e)||(this.clearCurrentDragSourceNode()&&this.monitor.isDragging()&&this.actions.endDrag(),this.cancelHover())},this.scheduleHover=e=>{null===this.hoverRafId&&"undefined"!=typeof requestAnimationFrame&&(this.hoverRafId=requestAnimationFrame((()=>{this.monitor.isDragging()&&this.actions.hover(e||[],{clientOffset:this.lastClientOffset}),this.hoverRafId=null})))},this.cancelHover=()=>{null!==this.hoverRafId&&"undefined"!=typeof cancelAnimationFrame&&(cancelAnimationFrame(this.hoverRafId),this.hoverRafId=null)},this.handleTopDragStartCapture=()=>{this.clearCurrentDragSourceNode(),this.dragStartSourceIds=[]},this.handleTopDragStart=e=>{if(e.defaultPrevented)return;const{dragStartSourceIds:t}=this;this.dragStartSourceIds=null;const n=Ar(e);this.monitor.isDragging()&&(this.actions.endDrag(),this.cancelHover()),this.actions.beginDrag(t||[],{publishSource:!1,getSourceClientOffset:this.getSourceClientOffset,clientOffset:n});const{dataTransfer:r}=e,a=Ir(r);if(this.monitor.isDragging()){if(r&&"function"==typeof r.setDragImage){const e=this.monitor.getSourceId(),t=this.sourceNodes.get(e),a=this.sourcePreviewNodes.get(e)||t;if(a){const{anchorX:e,anchorY:o,offsetX:i,offsetY:l}=this.getCurrentSourcePreviewNodeOptions(),s=function(e,t,n,r,a){const o="IMG"===(i=t).nodeName&&(Tr()||!(null===(l=document.documentElement)||void 0===l?void 0:l.contains(i)));var i,l;const s=Nr(o?e:t),u={x:n.x-s.x,y:n.y-s.y},{offsetWidth:c,offsetHeight:d}=e,{anchorX:f,anchorY:p}=r,{dragPreviewWidth:h,dragPreviewHeight:g}=function(e,t,n,r){let a=e?t.width:n,o=e?t.height:r;return Pr()&&e&&(o/=window.devicePixelRatio,a/=window.devicePixelRatio),{dragPreviewWidth:a,dragPreviewHeight:o}}(o,t,c,d),{offsetX:m,offsetY:v}=a,y=0===v||v;return{x:0===m||m?m:new _r([0,.5,1],[u.x,u.x/c*h,u.x+h-c]).interpolate(f),y:y?v:(()=>{let e=new _r([0,.5,1],[u.y,u.y/d*g,u.y+g-d]).interpolate(p);return Pr()&&o&&(e+=(window.devicePixelRatio-1)*g),e})()}}(t,a,n,{anchorX:e,anchorY:o},{offsetX:i,offsetY:l});r.setDragImage(a,s.x,s.y)}}try{null==r||r.setData("application/json",{})}catch(e){}this.setCurrentDragSourceNode(e.target);const{captureDraggingState:t}=this.getCurrentSourcePreviewNodeOptions();t?this.actions.publishDragSource():setTimeout((()=>this.actions.publishDragSource()),0)}else if(a)this.beginDragNativeItem(a);else{if(r&&!r.types&&(e.target&&!e.target.hasAttribute||!e.target.hasAttribute("draggable")))return;e.preventDefault()}},this.handleTopDragEndCapture=()=>{this.clearCurrentDragSourceNode()&&this.monitor.isDragging()&&this.actions.endDrag(),this.cancelHover()},this.handleTopDragEnterCapture=e=>{var t;if(this.dragEnterTargetIds=[],this.isDraggingNativeItem()&&(null===(t=this.currentNativeSource)||void 0===t||t.loadDataTransfer(e.dataTransfer)),!this.enterLeaveCounter.enter(e.target)||this.monitor.isDragging())return;const{dataTransfer:n}=e,r=Ir(n);r&&this.beginDragNativeItem(r,n)},this.handleTopDragEnter=e=>{const{dragEnterTargetIds:t}=this;this.dragEnterTargetIds=[],this.monitor.isDragging()&&(this.altKeyPressed=e.altKey,t.length>0&&this.actions.hover(t,{clientOffset:Ar(e)}),t.some((e=>this.monitor.canDropOnTarget(e)))&&(e.preventDefault(),e.dataTransfer&&(e.dataTransfer.dropEffect=this.getCurrentDropEffect())))},this.handleTopDragOverCapture=e=>{var t;this.dragOverTargetIds=[],this.isDraggingNativeItem()&&(null===(t=this.currentNativeSource)||void 0===t||t.loadDataTransfer(e.dataTransfer))},this.handleTopDragOver=e=>{const{dragOverTargetIds:t}=this;if(this.dragOverTargetIds=[],!this.monitor.isDragging())return e.preventDefault(),void(e.dataTransfer&&(e.dataTransfer.dropEffect="none"));this.altKeyPressed=e.altKey,this.lastClientOffset=Ar(e),this.scheduleHover(t),(t||[]).some((e=>this.monitor.canDropOnTarget(e)))?(e.preventDefault(),e.dataTransfer&&(e.dataTransfer.dropEffect=this.getCurrentDropEffect())):this.isDraggingNativeItem()?e.preventDefault():(e.preventDefault(),e.dataTransfer&&(e.dataTransfer.dropEffect="none"))},this.handleTopDragLeaveCapture=e=>{this.isDraggingNativeItem()&&e.preventDefault(),this.enterLeaveCounter.leave(e.target)&&(this.isDraggingNativeItem()&&setTimeout((()=>this.endDragNativeItem()),0),this.cancelHover())},this.handleTopDropCapture=e=>{var t;this.dropTargetIds=[],this.isDraggingNativeItem()?(e.preventDefault(),null===(t=this.currentNativeSource)||void 0===t||t.loadDataTransfer(e.dataTransfer)):Ir(e.dataTransfer)&&e.preventDefault(),this.enterLeaveCounter.reset()},this.handleTopDrop=e=>{const{dropTargetIds:t}=this;this.dropTargetIds=[],this.actions.hover(t,{clientOffset:Ar(e)}),this.actions.drop({dropEffect:this.getCurrentDropEffect()}),this.isDraggingNativeItem()?this.endDragNativeItem():this.monitor.isDragging()&&this.actions.endDrag(),this.cancelHover()},this.handleSelectStart=e=>{const t=e.target;"function"==typeof t.dragDrop&&("INPUT"===t.tagName||"SELECT"===t.tagName||"TEXTAREA"===t.tagName||t.isContentEditable||(e.preventDefault(),t.dragDrop()))},this.options=new Rr(t,n),this.actions=e.getActions(),this.monitor=e.getMonitor(),this.registry=e.getRegistry(),this.enterLeaveCounter=new wr(this.isNodeInDocument)}}const jr=function(e,t,n){return new zr(e,t,n)},Fr=function(){return(0,Je.jsx)(vr,{backend:jr,children:(0,Je.jsx)(Bt,{children:(0,Je.jsx)(Ve,{children:(0,Je.jsx)(un,{})})})})};(0,n(338).H)(document.getElementById("root")).render((0,Je.jsx)(Fr,{}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cDhDLFVBQ1gweUMsRUFBQUEsR0FBQUEsS0FBQ3pCLEdBQWUsQ0FBQWp4QyxVQUNkMHlDLEVBQUFBLEdBQUFBLEtBQUM0bkIsR0FBZSxTQUsxQixHQ1phaDVCLFNBQUFBLEdBQVdub0MsU0FBU29oRSxlQUFlLFNBRTNDOWxFLFFBQU9pK0MsRUFBQUEsR0FBQUEsS0FBQzhuQixHQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vc3JjL2luZGV4LmNzcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9zcmMvc3R5bGVzL2NvbG9ycy5jc3MiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvZmFzdC1kZWVwLWVxdWFsL2luZGV4LmpzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3Mvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3Mvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2NsaWVudC5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC9qc3gtcnVudGltZS5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvc2hhbGxvd2VxdWFsL2luZGV4LmpzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3R2dC1yZWFjdC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly90dnQtcmVhY3Qvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3R2dC1yZWFjdC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3R2dC1yZWFjdC93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3R2dC1yZWFjdC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vc3JjL2luZGV4LmNzcz9jZmU0Iiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zdHlsaXMvZGlzdC9zdHlsaXMuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3VuaXRsZXNzL2Rpc3QvdW5pdGxlc3MuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL21lbW9pemUvZGlzdC9lbW90aW9uLW1lbW9pemUuZXNtLmpzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9pcy1wcm9wLXZhbGlkL2Rpc3QvZW1vdGlvbi1pcy1wcm9wLXZhbGlkLmVzbS5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvZGlzdC9zdHlsZWQtY29tcG9uZW50cy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9zcmMvQXBwLnN0eWxlZC50c3giLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vc3JjL2NvbnRhaW5lcnMvcGFnZXMvV29ya291dFNjaGVkdWxlL1dvcmtvdXRTY2hlZHVsZS5zdHlsZWQudHN4Iiwid2VicGFjazovL3R2dC1yZWFjdC8uL3NyYy9jb250YWluZXJzL3BhZ2VzL1dvcmtvdXRTY2hlZHVsZS9XZWVrL1dlZWtEYXkvV2Vla0RheS5zdHlsZWQudHN4Iiwid2VicGFjazovL3R2dC1yZWFjdC8uL3NyYy91dGlscy9kYXRlVGltZS50cyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9zcmMvY29tcG9uZW50cy9CdXR0b24vQnV0dG9uLnN0eWxlZC50c3giLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvQnV0dG9uL0ljb25CdXR0b24udHN4Iiwid2VicGFjazovL3R2dC1yZWFjdC8uL3NyYy9jb250YWluZXJzL3BhZ2VzL1dvcmtvdXRTY2hlZHVsZS9Xb3Jrb3V0L1dvcmtvdXQuc3R5bGVkLnRzeCIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9zcmMvY29tcG9uZW50cy9UeXBvZ3JhcGh5L1R5cG9ncmFwaHkuc3R5bGVkLnRzeCIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9zcmMvY29tcG9uZW50cy9UeXBvZ3JhcGh5L1R5cG9ncmFwaHkudHN4Iiwid2VicGFjazovL3R2dC1yZWFjdC8uL3NyYy9jb250YWluZXJzL3BhZ2VzL1dvcmtvdXRTY2hlZHVsZS9Xb3Jrb3V0L0V4ZXJjaXNlL0V4ZXJjaXNlLnN0eWxlZC50c3giLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRuZC9kaXN0L2hvb2tzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QuanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRuZC9kaXN0L2hvb2tzL3VzZUNvbGxlY3RlZFByb3BzLmpzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kbmQvZGlzdC9ob29rcy91c2VNb25pdG9yT3V0cHV0LmpzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kbmQvZGlzdC9ob29rcy91c2VDb2xsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRuZC9kaXN0L2hvb2tzL3VzZU9wdGlvbmFsRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG5kL2Rpc3QvaG9va3MvdXNlRHJvcC9jb25uZWN0b3JzLmpzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9AcmVhY3QtZG5kL3NoYWxsb3dlcXVhbC9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kbmQvZGlzdC9pbnRlcm5hbHMvaXNSZWYuanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0ByZWFjdC1kbmQvaW52YXJpYW50L2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRuZC9kaXN0L2ludGVybmFscy93cmFwQ29ubmVjdG9ySG9va3MuanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRuZC9kaXN0L2ludGVybmFscy9UYXJnZXRDb25uZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRuZC9kaXN0L2NvcmUvRG5kQ29udGV4dC5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG5kL2Rpc3QvaG9va3MvdXNlRHJhZ0Ryb3BNYW5hZ2VyLmpzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kbmQvZGlzdC9pbnRlcm5hbHMvRHJvcFRhcmdldE1vbml0b3JJbXBsLmpzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kbmQvZGlzdC9ob29rcy91c2VEcm9wL0Ryb3BUYXJnZXRJbXBsLmpzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kbmQvZGlzdC9ob29rcy91c2VEcm9wL3VzZURyb3AuanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRuZC9kaXN0L2hvb2tzL3VzZURyb3AvdXNlRHJvcFRhcmdldE1vbml0b3IuanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRuZC9kaXN0L2hvb2tzL3VzZURyb3AvdXNlRHJvcFRhcmdldENvbm5lY3Rvci5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG5kL2Rpc3QvaG9va3MvdXNlRHJvcC91c2VSZWdpc3RlcmVkRHJvcFRhcmdldC5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG5kL2Rpc3QvaG9va3MvdXNlRHJvcC91c2VEcm9wVGFyZ2V0LmpzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kbmQvZGlzdC9ob29rcy91c2VEcm9wL3VzZUFjY2VwdC5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG5kL2Rpc3QvaW50ZXJuYWxzL3JlZ2lzdHJhdGlvbi5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9zcmMvZGF0YS9EYXRhUmVkdWNlci50c3giLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vc3JjL2RhdGEvYWN0aW9uVHlwZXMudHMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vc3JjL2hvb2tzL3VzZURhdGEudHMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRuZC9kaXN0L2hvb2tzL3VzZURyYWcvY29ubmVjdG9ycy5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG5kL2Rpc3QvaW50ZXJuYWxzL1NvdXJjZUNvbm5lY3Rvci5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG5kL2Rpc3QvaW50ZXJuYWxzL0RyYWdTb3VyY2VNb25pdG9ySW1wbC5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG5kL2Rpc3QvaG9va3MvdXNlRHJhZy9EcmFnU291cmNlSW1wbC5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG5kL2Rpc3QvaG9va3MvdXNlRHJhZy91c2VEcmFnLmpzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kbmQvZGlzdC9ob29rcy91c2VEcmFnL3VzZURyYWdTb3VyY2VNb25pdG9yLmpzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kbmQvZGlzdC9ob29rcy91c2VEcmFnL3VzZURyYWdTb3VyY2VDb25uZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRuZC9kaXN0L2hvb2tzL3VzZURyYWcvdXNlUmVnaXN0ZXJlZERyYWdTb3VyY2UuanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRuZC9kaXN0L2hvb2tzL3VzZURyYWcvdXNlRHJhZ1NvdXJjZS5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG5kL2Rpc3QvaG9va3MvdXNlRHJhZy91c2VEcmFnVHlwZS5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9zcmMvY29udGFpbmVycy9wYWdlcy9Xb3Jrb3V0U2NoZWR1bGUvV29ya291dC9FeGVyY2lzZS9FeGVyY2lzZS50c3giLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vc3JjL2hvb2tzL3VzZUV4ZXJjaXNlRHJvcEFuZERyYWcudHMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vc3JjL2NvbnRhaW5lcnMvcGFnZXMvV29ya291dFNjaGVkdWxlL1dvcmtvdXQvV29ya291dC50c3giLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vc3JjL2hvb2tzL3VzZVdvcmtvdXREcm9nQW5kRHJhZy50cyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9zcmMvY29udGFpbmVycy9wYWdlcy9Xb3Jrb3V0U2NoZWR1bGUvV2Vlay9XZWVrRGF5L1dlZWtEYXkudHN4Iiwid2VicGFjazovL3R2dC1yZWFjdC8uL3NyYy9jb250YWluZXJzL3BhZ2VzL1dvcmtvdXRTY2hlZHVsZS9XZWVrL1dlZWsuc3R5bGVkLnRzeCIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9zcmMvY29udGFpbmVycy9wYWdlcy9Xb3Jrb3V0U2NoZWR1bGUvV2Vlay9XZWVrLnRzeCIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9zcmMvZGF0YS9kYXRhLnRzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL3NyYy9jb250YWluZXJzL3BhZ2VzL1dvcmtvdXRTY2hlZHVsZS9Xb3Jrb3V0U2NoZWR1bGUudHN4Iiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWR1eC9lcy9yZWR1eC5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvZG5kLWNvcmUvZGlzdC91dGlscy9qc191dGlscy5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvZG5kLWNvcmUvZGlzdC9hY3Rpb25zL2RyYWdEcm9wL3R5cGVzLmpzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9kbmQtY29yZS9kaXN0L2FjdGlvbnMvZHJhZ0Ryb3AvbG9jYWwvc2V0Q2xpZW50T2Zmc2V0LmpzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9kbmQtY29yZS9kaXN0L2FjdGlvbnMvZHJhZ0Ryb3AvYmVnaW5EcmFnLmpzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9kbmQtY29yZS9kaXN0L2FjdGlvbnMvZHJhZ0Ryb3AvZHJvcC5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvZG5kLWNvcmUvZGlzdC9hY3Rpb25zL2RyYWdEcm9wL2VuZERyYWcuanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL2RuZC1jb3JlL2Rpc3QvdXRpbHMvbWF0Y2hlc1R5cGUuanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL2RuZC1jb3JlL2Rpc3QvYWN0aW9ucy9kcmFnRHJvcC9ob3Zlci5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvZG5kLWNvcmUvZGlzdC9hY3Rpb25zL2RyYWdEcm9wL3B1Ymxpc2hEcmFnU291cmNlLmpzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9kbmQtY29yZS9kaXN0L2NsYXNzZXMvRHJhZ0Ryb3BNYW5hZ2VySW1wbC5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvZG5kLWNvcmUvZGlzdC9hY3Rpb25zL2RyYWdEcm9wL2luZGV4LmpzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9kbmQtY29yZS9kaXN0L3V0aWxzL2Nvb3Jkcy5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvZG5kLWNvcmUvZGlzdC91dGlscy9kaXJ0aW5lc3MuanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL2RuZC1jb3JlL2Rpc3QvY2xhc3Nlcy9EcmFnRHJvcE1vbml0b3JJbXBsLmpzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9AcmVhY3QtZG5kL2FzYXAvZGlzdC9tYWtlUmVxdWVzdENhbGwuanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0ByZWFjdC1kbmQvYXNhcC9kaXN0L1Jhd1Rhc2suanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0ByZWFjdC1kbmQvYXNhcC9kaXN0L2FzYXAuanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0ByZWFjdC1kbmQvYXNhcC9kaXN0L0FzYXBRdWV1ZS5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvQHJlYWN0LWRuZC9hc2FwL2Rpc3QvVGFza0ZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL2RuZC1jb3JlL2Rpc3QvYWN0aW9ucy9yZWdpc3RyeS5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvZG5kLWNvcmUvZGlzdC9jb250cmFjdHMuanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL2RuZC1jb3JlL2Rpc3QvaW50ZXJmYWNlcy5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvZG5kLWNvcmUvZGlzdC91dGlscy9nZXROZXh0VW5pcXVlSWQuanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL2RuZC1jb3JlL2Rpc3QvY2xhc3Nlcy9IYW5kbGVyUmVnaXN0cnlJbXBsLmpzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9kbmQtY29yZS9kaXN0L3V0aWxzL2VxdWFsaXR5LmpzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9kbmQtY29yZS9kaXN0L3JlZHVjZXJzL2RpcnR5SGFuZGxlcklkcy5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvZG5kLWNvcmUvZGlzdC9yZWR1Y2Vycy9kcmFnT2Zmc2V0LmpzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9kbmQtY29yZS9kaXN0L3JlZHVjZXJzL2RyYWdPcGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL2RuZC1jb3JlL2Rpc3QvcmVkdWNlcnMvcmVmQ291bnQuanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL2RuZC1jb3JlL2Rpc3QvcmVkdWNlcnMvc3RhdGVJZC5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvZG5kLWNvcmUvZGlzdC9yZWR1Y2Vycy9pbmRleC5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvZG5kLWNvcmUvZGlzdC9jcmVhdGVEcmFnRHJvcE1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRuZC9kaXN0L2NvcmUvRG5kUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRuZC1odG1sNS1iYWNrZW5kL2Rpc3QvdXRpbHMvanNfdXRpbHMuanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRuZC1odG1sNS1iYWNrZW5kL2Rpc3QvRW50ZXJMZWF2ZUNvdW50ZXIuanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRuZC1odG1sNS1iYWNrZW5kL2Rpc3QvTmF0aXZlRHJhZ1NvdXJjZXMvTmF0aXZlRHJhZ1NvdXJjZS5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG5kLWh0bWw1LWJhY2tlbmQvZGlzdC9OYXRpdmVUeXBlcy5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG5kLWh0bWw1LWJhY2tlbmQvZGlzdC9OYXRpdmVEcmFnU291cmNlcy9nZXREYXRhRnJvbURhdGFUcmFuc2Zlci5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG5kLWh0bWw1LWJhY2tlbmQvZGlzdC9OYXRpdmVEcmFnU291cmNlcy9uYXRpdmVUeXBlc0NvbmZpZy5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG5kLWh0bWw1LWJhY2tlbmQvZGlzdC9OYXRpdmVEcmFnU291cmNlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG5kLWh0bWw1LWJhY2tlbmQvZGlzdC9Ccm93c2VyRGV0ZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRuZC1odG1sNS1iYWNrZW5kL2Rpc3QvTW9ub3RvbmljSW50ZXJwb2xhbnQuanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRuZC1odG1sNS1iYWNrZW5kL2Rpc3QvT2Zmc2V0VXRpbHMuanMiLCJ3ZWJwYWNrOi8vdHZ0LXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRuZC1odG1sNS1iYWNrZW5kL2Rpc3QvT3B0aW9uc1JlYWRlci5qcyIsIndlYnBhY2s6Ly90dnQtcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG5kLWh0bWw1LWJhY2tlbmQvZGlzdC9IVE1MNUJhY2tlbmRJbXBsLmpzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kbmQtaHRtbDUtYmFja2VuZC9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL3R2dC1yZWFjdC8uL3NyYy9BcHAudHN4Iiwid2VicGFjazovL3R2dC1yZWFjdC8uL3NyYy9pbmRleC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fIGZyb20gXCItIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzL2NvbG9ycy5jc3NcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgKiB7XHJcbiAgICBwYWRkaW5nOiAwO1xyXG4gICAgbWFyZ2luOiAwO1xyXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxufVxyXG5cclxuaHRtbCB7XHJcbiAgICBmb250LXNpemU6IDYyLjUlOyAvKiAxcmVtID0gMTBweCAqL1xyXG59XHJcblxyXG5ib2R5IHtcclxuICAgIGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zJywgc2Fucy1zZXJpZjtcclxuICAgIGZvbnQtc2l6ZTogMXJlbTtcclxuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgICBsaW5lLWhlaWdodDogMS4zO1xyXG59XHJcbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2luZGV4LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFFQTtJQUNJLFVBQVU7SUFDVixTQUFTO0lBQ1Qsc0JBQXNCO0FBQzFCOztBQUVBO0lBQ0ksZ0JBQWdCLEVBQUUsZ0JBQWdCO0FBQ3RDOztBQUVBO0lBQ0ksb0NBQW9DO0lBQ3BDLGVBQWU7SUFDZixnQkFBZ0I7SUFDaEIsZ0JBQWdCO0FBQ3BCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgXFxcIi4vc3R5bGVzL2NvbG9ycy5jc3NcXFwiO1xcclxcblxcclxcbioge1xcclxcbiAgICBwYWRkaW5nOiAwO1xcclxcbiAgICBtYXJnaW46IDA7XFxyXFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxufVxcclxcblxcclxcbmh0bWwge1xcclxcbiAgICBmb250LXNpemU6IDYyLjUlOyAvKiAxcmVtID0gMTBweCAqL1xcclxcbn1cXHJcXG5cXHJcXG5ib2R5IHtcXHJcXG4gICAgZm9udC1mYW1pbHk6ICdPcGVuIFNhbnMnLCBzYW5zLXNlcmlmO1xcclxcbiAgICBmb250LXNpemU6IDFyZW07XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XFxyXFxuICAgIGxpbmUtaGVpZ2h0OiAxLjM7XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgOnJvb3Qge1xyXG4gICAgLS10ZXh0LXByaW1hcnk6ICM1QTU3Q0I7XHJcbiAgICAtLXRleHQtc2Vjb25kYXJ5OiAjNkE3OTg4O1xyXG4gICAgLS10ZXh0LXRlcnRpYXJ5OiAjNzI4MDk2O1xyXG4gICAgLS10ZXh0LWhpZ2h0bGlnaHQ6ICM1QTU3Q0I7XHJcblxyXG4gICAgLS1iZy1wcmltYXJ5OiAjRkZGRkZGQ0M7XHJcbiAgICAtLWJnLXNlY29uZGFyeTogI0YzRjVGODtcclxuICAgIC0tYmctdGVydGlhcnk6ICNERkRGREY7XHJcbiAgICAtLWJnLWhpZ2h0bGlnaHQ6ICM4ZGFkYmQ7XHJcblxyXG4gICAgLS1pbnRlcmFjdGl2ZTogI0EwQThCMTtcclxuICAgIC0tYWN0aXZlOiAjYWFjOGQ5O1xyXG4gICAgLS1oaWdodGxpZ2h0OiAjMTMxM2VjO1xyXG59XHJcbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy9jb2xvcnMuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksdUJBQXVCO0lBQ3ZCLHlCQUF5QjtJQUN6Qix3QkFBd0I7SUFDeEIsMEJBQTBCOztJQUUxQix1QkFBdUI7SUFDdkIsdUJBQXVCO0lBQ3ZCLHNCQUFzQjtJQUN0Qix3QkFBd0I7O0lBRXhCLHNCQUFzQjtJQUN0QixpQkFBaUI7SUFDakIscUJBQXFCO0FBQ3pCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIjpyb290IHtcXHJcXG4gICAgLS10ZXh0LXByaW1hcnk6ICM1QTU3Q0I7XFxyXFxuICAgIC0tdGV4dC1zZWNvbmRhcnk6ICM2QTc5ODg7XFxyXFxuICAgIC0tdGV4dC10ZXJ0aWFyeTogIzcyODA5NjtcXHJcXG4gICAgLS10ZXh0LWhpZ2h0bGlnaHQ6ICM1QTU3Q0I7XFxyXFxuXFxyXFxuICAgIC0tYmctcHJpbWFyeTogI0ZGRkZGRkNDO1xcclxcbiAgICAtLWJnLXNlY29uZGFyeTogI0YzRjVGODtcXHJcXG4gICAgLS1iZy10ZXJ0aWFyeTogI0RGREZERjtcXHJcXG4gICAgLS1iZy1oaWdodGxpZ2h0OiAjOGRhZGJkO1xcclxcblxcclxcbiAgICAtLWludGVyYWN0aXZlOiAjQTBBOEIxO1xcclxcbiAgICAtLWFjdGl2ZTogI2FhYzhkOTtcXHJcXG4gICAgLS1oaWdodGxpZ2h0OiAjMTMxM2VjO1xcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIid1c2Ugc3RyaWN0JztcblxuLy8gZG8gbm90IGVkaXQgLmpzIGZpbGVzIGRpcmVjdGx5IC0gZWRpdCBzcmMvaW5kZXguanN0XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVxdWFsKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXG4gIGlmIChhICYmIGIgJiYgdHlwZW9mIGEgPT0gJ29iamVjdCcgJiYgdHlwZW9mIGIgPT0gJ29iamVjdCcpIHtcbiAgICBpZiAoYS5jb25zdHJ1Y3RvciAhPT0gYi5jb25zdHJ1Y3RvcikgcmV0dXJuIGZhbHNlO1xuXG4gICAgdmFyIGxlbmd0aCwgaSwga2V5cztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuICAgICAgbGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoICE9IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspXG4gICAgICAgIGlmICghZXF1YWwoYVtpXSwgYltpXSkpIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuXG5cbiAgICBpZiAoYS5jb25zdHJ1Y3RvciA9PT0gUmVnRXhwKSByZXR1cm4gYS5zb3VyY2UgPT09IGIuc291cmNlICYmIGEuZmxhZ3MgPT09IGIuZmxhZ3M7XG4gICAgaWYgKGEudmFsdWVPZiAhPT0gT2JqZWN0LnByb3RvdHlwZS52YWx1ZU9mKSByZXR1cm4gYS52YWx1ZU9mKCkgPT09IGIudmFsdWVPZigpO1xuICAgIGlmIChhLnRvU3RyaW5nICE9PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKSByZXR1cm4gYS50b1N0cmluZygpID09PSBiLnRvU3RyaW5nKCk7XG5cbiAgICBrZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgaWYgKGxlbmd0aCAhPT0gT2JqZWN0LmtleXMoYikubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspXG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBrZXlzW2ldKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKCFlcXVhbChhW2tleV0sIGJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIHRydWUgaWYgYm90aCBOYU4sIGZhbHNlIG90aGVyd2lzZVxuICByZXR1cm4gYSE9PWEgJiYgYiE9PWI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxjYT1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHAoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9dmFyIGRhPW5ldyBTZXQsZWE9e307ZnVuY3Rpb24gZmEoYSxiKXtoYShhLGIpO2hhKGErXCJDYXB0dXJlXCIsYil9XG5mdW5jdGlvbiBoYShhLGIpe2VhW2FdPWI7Zm9yKGE9MDthPGIubGVuZ3RoO2ErKylkYS5hZGQoYlthXSl9XG52YXIgaWE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLGphPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksa2E9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGxhPVxue30sbWE9e307ZnVuY3Rpb24gb2EoYSl7aWYoamEuY2FsbChtYSxhKSlyZXR1cm4hMDtpZihqYS5jYWxsKGxhLGEpKXJldHVybiExO2lmKGthLnRlc3QoYSkpcmV0dXJuIG1hW2FdPSEwO2xhW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHBhKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcWEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8cGEoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiB2KGEsYixjLGQsZSxmLGcpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mO3RoaXMucmVtb3ZlRW1wdHlTdHJpbmc9Z312YXIgej17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDAsITEsYSxudWxsLCExLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTt6W2JdPW5ldyB2KGIsMSwhMSxhWzFdLG51bGwsITEsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDIsITEsYSxudWxsLCExLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGRpc2FibGVSZW1vdGVQbGF5YmFjayBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwzLCEwLGEsbnVsbCwhMSwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSw0LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDYsITEsYSxudWxsLCExLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7dmFyIHJhPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gc2EoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsXG5zYSk7eltiXT1uZXcgdihiLDEsITEsYSxudWxsLCExLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLHNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLHNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG56LnhsaW5rSHJlZj1uZXcgdihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITAsITEpO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITAsITApfSk7XG5mdW5jdGlvbiB0YShhLGIsYyxkKXt2YXIgZT16Lmhhc093blByb3BlcnR5KGIpP3pbYl06bnVsbDtpZihudWxsIT09ZT8wIT09ZS50eXBlOmR8fCEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXSlxYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/b2EoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpfVxudmFyIHVhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHZhPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLHdhPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIikseWE9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHphPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxBYT1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksQmE9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLENhPVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLERhPVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSxFYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksRmE9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIiksR2E9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIiksSGE9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik7U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO1xudmFyIElhPVN5bWJvbC5mb3IoXCJyZWFjdC5vZmZzY3JlZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmNhY2hlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC50cmFjaW5nX21hcmtlclwiKTt2YXIgSmE9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEthKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1KYSYmYVtKYV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH12YXIgQT1PYmplY3QuYXNzaWduLExhO2Z1bmN0aW9uIE1hKGEpe2lmKHZvaWQgMD09PUxhKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO0xhPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitMYSthfXZhciBOYT0hMTtcbmZ1bmN0aW9uIE9hKGEsYil7aWYoIWF8fE5hKXJldHVyblwiXCI7TmE9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGwpe3ZhciBkPWx9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChsKXtkPWx9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChsKXtkPWx9YSgpfX1jYXRjaChsKXtpZihsJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGwuc3RhY2spe2Zvcih2YXIgZT1sLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pe3ZhciBrPVwiXFxuXCIrZVtnXS5yZXBsYWNlKFwiIGF0IG5ldyBcIixcIiBhdCBcIik7YS5kaXNwbGF5TmFtZSYmay5pbmNsdWRlcyhcIjxhbm9ueW1vdXM+XCIpJiYoaz1rLnJlcGxhY2UoXCI8YW5vbnltb3VzPlwiLGEuZGlzcGxheU5hbWUpKTtyZXR1cm4ga313aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7TmE9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9NYShhKTpcIlwifVxuZnVuY3Rpb24gUGEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE1hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTWEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE1hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTWEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPU9hKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPU9hKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAxOnJldHVybiBhPU9hKGEudHlwZSwhMCksYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gUWEoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSB5YTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSB3YTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgQWE6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgemE6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBFYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBGYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBDYTpyZXR1cm4oYS5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSBCYTpyZXR1cm4oYS5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSBEYTp2YXIgYj1hLnJlbmRlcjthPWEuZGlzcGxheU5hbWU7YXx8KGE9Yi5kaXNwbGF5TmFtZXx8XG5iLm5hbWV8fFwiXCIsYT1cIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIik7cmV0dXJuIGE7Y2FzZSBHYTpyZXR1cm4gYj1hLmRpc3BsYXlOYW1lfHxudWxsLG51bGwhPT1iP2I6UWEoYS50eXBlKXx8XCJNZW1vXCI7Y2FzZSBIYTpiPWEuX3BheWxvYWQ7YT1hLl9pbml0O3RyeXtyZXR1cm4gUWEoYShiKSl9Y2F0Y2goYyl7fX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFJhKGEpe3ZhciBiPWEudHlwZTtzd2l0Y2goYS50YWcpe2Nhc2UgMjQ6cmV0dXJuXCJDYWNoZVwiO2Nhc2UgOTpyZXR1cm4oYi5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSAxMDpyZXR1cm4oYi5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSAxODpyZXR1cm5cIkRlaHlkcmF0ZWRGcmFnbWVudFwiO2Nhc2UgMTE6cmV0dXJuIGE9Yi5yZW5kZXIsYT1hLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiXCIsYi5kaXNwbGF5TmFtZXx8KFwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIDc6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgNTpyZXR1cm4gYjtjYXNlIDQ6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIDM6cmV0dXJuXCJSb290XCI7Y2FzZSA2OnJldHVyblwiVGV4dFwiO2Nhc2UgMTY6cmV0dXJuIFFhKGIpO2Nhc2UgODpyZXR1cm4gYj09PXphP1wiU3RyaWN0TW9kZVwiOlwiTW9kZVwiO2Nhc2UgMjI6cmV0dXJuXCJPZmZzY3JlZW5cIjtcbmNhc2UgMTI6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgMjE6cmV0dXJuXCJTY29wZVwiO2Nhc2UgMTM6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgMTk6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIjtjYXNlIDI1OnJldHVyblwiVHJhY2luZ01hcmtlclwiO2Nhc2UgMTpjYXNlIDA6Y2FzZSAxNzpjYXNlIDI6Y2FzZSAxNDpjYXNlIDE1OmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBiLmRpc3BsYXlOYW1lfHxiLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiKXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIFNhKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtjYXNlIFwib2JqZWN0XCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gQSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBhYihhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnRhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBiYihhLGIpe2FiKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/Y2IoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmY2IoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBkYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gY2IoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9dmFyIGViPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcihwKDkxKSk7cmV0dXJuIEEoe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IocCg5MikpO2lmKGViKGMpKXtpZigxPGMubGVuZ3RoKXRocm93IEVycm9yKHAoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfWZ1bmN0aW9uIGtiKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19XG5mdW5jdGlvbiBsYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/a2IoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbWIsbmI9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiE9PWEubmFtZXNwYWNlVVJJfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7bWI9bWJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bWIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9bWIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gb2IoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBwYj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYXNwZWN0UmF0aW86ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLFxuem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxxYj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMocGIpLmZvckVhY2goZnVuY3Rpb24oYSl7cWIuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtwYltiXT1wYlthXX0pfSk7ZnVuY3Rpb24gcmIoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fHBiLmhhc093blByb3BlcnR5KGEpJiZwYlthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBzYihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1yYihjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciB0Yj1BKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gdWIoYSxiKXtpZihiKXtpZih0YlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoMTM3LGEpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHAoNjApKTtpZihcIm9iamVjdFwiIT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8fCEoXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHAoNjIpKTt9fVxuZnVuY3Rpb24gdmIoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciB3Yj1udWxsO2Z1bmN0aW9uIHhiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX12YXIgeWI9bnVsbCx6Yj1udWxsLEFiPW51bGw7XG5mdW5jdGlvbiBCYihhKXtpZihhPUNiKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeWIpdGhyb3cgRXJyb3IocCgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1EYihiKSx5YihhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBFYihhKXt6Yj9BYj9BYi5wdXNoKGEpOkFiPVthXTp6Yj1hfWZ1bmN0aW9uIEZiKCl7aWYoemIpe3ZhciBhPXpiLGI9QWI7QWI9emI9bnVsbDtCYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQmIoYlthXSl9fWZ1bmN0aW9uIEdiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gSGIoKXt9dmFyIEliPSExO2Z1bmN0aW9uIEpiKGEsYixjKXtpZihJYilyZXR1cm4gYShiLGMpO0liPSEwO3RyeXtyZXR1cm4gR2IoYSxiLGMpfWZpbmFsbHl7aWYoSWI9ITEsbnVsbCE9PXpifHxudWxsIT09QWIpSGIoKSxGYigpfX1cbmZ1bmN0aW9uIEtiKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9RGIoYyk7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGMpdGhyb3cgRXJyb3IocCgyMzEsYix0eXBlb2YgYykpO3JldHVybiBjfXZhciBMYj0hMTtpZihpYSl0cnl7dmFyIE1iPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShNYixcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7TGI9ITB9fSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsTWIsTWIpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLE1iLE1iKX1jYXRjaChhKXtMYj0hMX1mdW5jdGlvbiBOYihhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX12YXIgT2I9ITEsUGI9bnVsbCxRYj0hMSxSYj1udWxsLFNiPXtvbkVycm9yOmZ1bmN0aW9uKGEpe09iPSEwO1BiPWF9fTtmdW5jdGlvbiBUYihhLGIsYyxkLGUsZixnLGgsayl7T2I9ITE7UGI9bnVsbDtOYi5hcHBseShTYixhcmd1bWVudHMpfVxuZnVuY3Rpb24gVWIoYSxiLGMsZCxlLGYsZyxoLGspe1RiLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihPYil7aWYoT2Ipe3ZhciBsPVBiO09iPSExO1BiPW51bGx9ZWxzZSB0aHJvdyBFcnJvcihwKDE5OCkpO1FifHwoUWI9ITAsUmI9bCl9fWZ1bmN0aW9uIFZiKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5mbGFncyY0MDk4KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gV2IoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBYYihhKXtpZihWYihhKSE9PWEpdGhyb3cgRXJyb3IocCgxODgpKTt9XG5mdW5jdGlvbiBZYihhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1WYihhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBYYihlKSxhO2lmKGY9PT1kKXJldHVybiBYYihlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHAoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IocCgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcihwKDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IocCgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIFpiKGEpe2E9WWIoYSk7cmV0dXJuIG51bGwhPT1hPyRiKGEpOm51bGx9ZnVuY3Rpb24gJGIoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGE7Zm9yKGE9YS5jaGlsZDtudWxsIT09YTspe3ZhciBiPSRiKGEpO2lmKG51bGwhPT1iKXJldHVybiBiO2E9YS5zaWJsaW5nfXJldHVybiBudWxsfVxudmFyIGFjPWNhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssYmM9Y2EudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssY2M9Y2EudW5zdGFibGVfc2hvdWxkWWllbGQsZGM9Y2EudW5zdGFibGVfcmVxdWVzdFBhaW50LEI9Y2EudW5zdGFibGVfbm93LGVjPWNhLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLGZjPWNhLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LGdjPWNhLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGhjPWNhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LGljPWNhLnVuc3RhYmxlX0xvd1ByaW9yaXR5LGpjPWNhLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxrYz1udWxsLGxjPW51bGw7ZnVuY3Rpb24gbWMoYSl7aWYobGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsYy5vbkNvbW1pdEZpYmVyUm9vdCl0cnl7bGMub25Db21taXRGaWJlclJvb3Qoa2MsYSx2b2lkIDAsMTI4PT09KGEuY3VycmVudC5mbGFncyYxMjgpKX1jYXRjaChiKXt9fVxudmFyIG9jPU1hdGguY2x6MzI/TWF0aC5jbHozMjpuYyxwYz1NYXRoLmxvZyxxYz1NYXRoLkxOMjtmdW5jdGlvbiBuYyhhKXthPj4+PTA7cmV0dXJuIDA9PT1hPzMyOjMxLShwYyhhKS9xY3wwKXwwfXZhciByYz02NCxzYz00MTk0MzA0O1xuZnVuY3Rpb24gdGMoYSl7c3dpdGNoKGEmLWEpe2Nhc2UgMTpyZXR1cm4gMTtjYXNlIDI6cmV0dXJuIDI7Y2FzZSA0OnJldHVybiA0O2Nhc2UgODpyZXR1cm4gODtjYXNlIDE2OnJldHVybiAxNjtjYXNlIDMyOnJldHVybiAzMjtjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBhJjQxOTQyNDA7Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpyZXR1cm4gYSYxMzAwMjM0MjQ7Y2FzZSAxMzQyMTc3Mjg6cmV0dXJuIDEzNDIxNzcyODtjYXNlIDI2ODQzNTQ1NjpyZXR1cm4gMjY4NDM1NDU2O2Nhc2UgNTM2ODcwOTEyOnJldHVybiA1MzY4NzA5MTI7Y2FzZSAxMDczNzQxODI0OnJldHVybiAxMDczNzQxODI0O1xuZGVmYXVsdDpyZXR1cm4gYX19ZnVuY3Rpb24gdWMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcztpZigwPT09YylyZXR1cm4gMDt2YXIgZD0wLGU9YS5zdXNwZW5kZWRMYW5lcyxmPWEucGluZ2VkTGFuZXMsZz1jJjI2ODQzNTQ1NTtpZigwIT09Zyl7dmFyIGg9ZyZ+ZTswIT09aD9kPXRjKGgpOihmJj1nLDAhPT1mJiYoZD10YyhmKSkpfWVsc2UgZz1jJn5lLDAhPT1nP2Q9dGMoZyk6MCE9PWYmJihkPXRjKGYpKTtpZigwPT09ZClyZXR1cm4gMDtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZlKSYmKGU9ZCYtZCxmPWImLWIsZT49Znx8MTY9PT1lJiYwIT09KGYmNDE5NDI0MCkpKXJldHVybiBiOzAhPT0oZCY0KSYmKGR8PWMmMTYpO2I9YS5lbnRhbmdsZWRMYW5lcztpZigwIT09Yilmb3IoYT1hLmVudGFuZ2xlbWVudHMsYiY9ZDswPGI7KWM9MzEtb2MoYiksZT0xPDxjLGR8PWFbY10sYiY9fmU7cmV0dXJuIGR9XG5mdW5jdGlvbiB2YyhhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgNDpyZXR1cm4gYisyNTA7Y2FzZSA4OmNhc2UgMTY6Y2FzZSAzMjpjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBiKzVFMztjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybi0xO2Nhc2UgMTM0MjE3NzI4OmNhc2UgMjY4NDM1NDU2OmNhc2UgNTM2ODcwOTEyOmNhc2UgMTA3Mzc0MTgyNDpyZXR1cm4tMTtkZWZhdWx0OnJldHVybi0xfX1cbmZ1bmN0aW9uIHdjKGEsYil7Zm9yKHZhciBjPWEuc3VzcGVuZGVkTGFuZXMsZD1hLnBpbmdlZExhbmVzLGU9YS5leHBpcmF0aW9uVGltZXMsZj1hLnBlbmRpbmdMYW5lczswPGY7KXt2YXIgZz0zMS1vYyhmKSxoPTE8PGcsaz1lW2ddO2lmKC0xPT09ayl7aWYoMD09PShoJmMpfHwwIT09KGgmZCkpZVtnXT12YyhoLGIpfWVsc2Ugazw9YiYmKGEuZXhwaXJlZExhbmVzfD1oKTtmJj1+aH19ZnVuY3Rpb24geGMoYSl7YT1hLnBlbmRpbmdMYW5lcyYtMTA3Mzc0MTgyNTtyZXR1cm4gMCE9PWE/YTphJjEwNzM3NDE4MjQ/MTA3Mzc0MTgyNDowfWZ1bmN0aW9uIHljKCl7dmFyIGE9cmM7cmM8PD0xOzA9PT0ocmMmNDE5NDI0MCkmJihyYz02NCk7cmV0dXJuIGF9ZnVuY3Rpb24gemMoYSl7Zm9yKHZhciBiPVtdLGM9MDszMT5jO2MrKyliLnB1c2goYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBBYyhhLGIsYyl7YS5wZW5kaW5nTGFuZXN8PWI7NTM2ODcwOTEyIT09YiYmKGEuc3VzcGVuZGVkTGFuZXM9MCxhLnBpbmdlZExhbmVzPTApO2E9YS5ldmVudFRpbWVzO2I9MzEtb2MoYik7YVtiXT1jfWZ1bmN0aW9uIEJjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXMmfmI7YS5wZW5kaW5nTGFuZXM9YjthLnN1c3BlbmRlZExhbmVzPTA7YS5waW5nZWRMYW5lcz0wO2EuZXhwaXJlZExhbmVzJj1iO2EubXV0YWJsZVJlYWRMYW5lcyY9YjthLmVudGFuZ2xlZExhbmVzJj1iO2I9YS5lbnRhbmdsZW1lbnRzO3ZhciBkPWEuZXZlbnRUaW1lcztmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGM7KXt2YXIgZT0zMS1vYyhjKSxmPTE8PGU7YltlXT0wO2RbZV09LTE7YVtlXT0tMTtjJj1+Zn19XG5mdW5jdGlvbiBDYyhhLGIpe3ZhciBjPWEuZW50YW5nbGVkTGFuZXN8PWI7Zm9yKGE9YS5lbnRhbmdsZW1lbnRzO2M7KXt2YXIgZD0zMS1vYyhjKSxlPTE8PGQ7ZSZifGFbZF0mYiYmKGFbZF18PWIpO2MmPX5lfX12YXIgQz0wO2Z1bmN0aW9uIERjKGEpe2EmPS1hO3JldHVybiAxPGE/NDxhPzAhPT0oYSYyNjg0MzU0NTUpPzE2OjUzNjg3MDkxMjo0OjF9dmFyIEVjLEZjLEdjLEhjLEljLEpjPSExLEtjPVtdLExjPW51bGwsTWM9bnVsbCxOYz1udWxsLE9jPW5ldyBNYXAsUGM9bmV3IE1hcCxRYz1bXSxSYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBTYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOkxjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpNYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpOYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6T2MuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6UGMuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiBUYyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXtibG9ja2VkT246Yixkb21FdmVudE5hbWU6YyxldmVudFN5c3RlbUZsYWdzOmQsbmF0aXZlRXZlbnQ6Zix0YXJnZXRDb250YWluZXJzOltlXX0sbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZGYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBVYyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBMYz1UYyhMYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gTWM9VGMoTWMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIE5jPVRjKE5jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7T2Muc2V0KGYsVGMoT2MuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLFBjLnNldChmLFRjKFBjLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIFZjKGEpe3ZhciBiPVdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9VmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9V2IoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7SWMoYS5wcmlvcml0eSxmdW5jdGlvbigpe0djKGMpfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1cbmZ1bmN0aW9uIFhjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTtmb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz1ZYyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsPT09Yyl7Yz1hLm5hdGl2ZUV2ZW50O3ZhciBkPW5ldyBjLmNvbnN0cnVjdG9yKGMudHlwZSxjKTt3Yj1kO2MudGFyZ2V0LmRpc3BhdGNoRXZlbnQoZCk7d2I9bnVsbH1lbHNlIHJldHVybiBiPUNiKGMpLG51bGwhPT1iJiZGYyhiKSxhLmJsb2NrZWRPbj1jLCExO2Iuc2hpZnQoKX1yZXR1cm4hMH1mdW5jdGlvbiBaYyhhLGIsYyl7WGMoYSkmJmMuZGVsZXRlKGIpfWZ1bmN0aW9uICRjKCl7SmM9ITE7bnVsbCE9PUxjJiZYYyhMYykmJihMYz1udWxsKTtudWxsIT09TWMmJlhjKE1jKSYmKE1jPW51bGwpO251bGwhPT1OYyYmWGMoTmMpJiYoTmM9bnVsbCk7T2MuZm9yRWFjaChaYyk7UGMuZm9yRWFjaChaYyl9XG5mdW5jdGlvbiBhZChhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsSmN8fChKYz0hMCxjYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKGNhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LCRjKSkpfVxuZnVuY3Rpb24gYmQoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gYWQoYixhKX1pZigwPEtjLmxlbmd0aCl7YWQoS2NbMF0sYSk7Zm9yKHZhciBjPTE7YzxLYy5sZW5ndGg7YysrKXt2YXIgZD1LY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PUxjJiZhZChMYyxhKTtudWxsIT09TWMmJmFkKE1jLGEpO251bGwhPT1OYyYmYWQoTmMsYSk7T2MuZm9yRWFjaChiKTtQYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxRYy5sZW5ndGg7YysrKWQ9UWNbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPFFjLmxlbmd0aCYmKGM9UWNbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspVmMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZRYy5zaGlmdCgpfXZhciBjZD11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxkZD0hMDtcbmZ1bmN0aW9uIGVkKGEsYixjLGQpe3ZhciBlPUMsZj1jZC50cmFuc2l0aW9uO2NkLnRyYW5zaXRpb249bnVsbDt0cnl7Qz0xLGZkKGEsYixjLGQpfWZpbmFsbHl7Qz1lLGNkLnRyYW5zaXRpb249Zn19ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7dmFyIGU9QyxmPWNkLnRyYW5zaXRpb247Y2QudHJhbnNpdGlvbj1udWxsO3RyeXtDPTQsZmQoYSxiLGMsZCl9ZmluYWxseXtDPWUsY2QudHJhbnNpdGlvbj1mfX1cbmZ1bmN0aW9uIGZkKGEsYixjLGQpe2lmKGRkKXt2YXIgZT1ZYyhhLGIsYyxkKTtpZihudWxsPT09ZSloZChhLGIsZCxpZCxjKSxTYyhhLGQpO2Vsc2UgaWYoVWMoZSxhLGIsYyxkKSlkLnN0b3BQcm9wYWdhdGlvbigpO2Vsc2UgaWYoU2MoYSxkKSxiJjQmJi0xPFJjLmluZGV4T2YoYSkpe2Zvcig7bnVsbCE9PWU7KXt2YXIgZj1DYihlKTtudWxsIT09ZiYmRWMoZik7Zj1ZYyhhLGIsYyxkKTtudWxsPT09ZiYmaGQoYSxiLGQsaWQsYyk7aWYoZj09PWUpYnJlYWs7ZT1mfW51bGwhPT1lJiZkLnN0b3BQcm9wYWdhdGlvbigpfWVsc2UgaGQoYSxiLGQsbnVsbCxjKX19dmFyIGlkPW51bGw7XG5mdW5jdGlvbiBZYyhhLGIsYyxkKXtpZD1udWxsO2E9eGIoZCk7YT1XYyhhKTtpZihudWxsIT09YSlpZihiPVZiKGEpLG51bGw9PT1iKWE9bnVsbDtlbHNlIGlmKGM9Yi50YWcsMTM9PT1jKXthPVdiKGIpO2lmKG51bGwhPT1hKXJldHVybiBhO2E9bnVsbH1lbHNlIGlmKDM9PT1jKXtpZihiLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXJldHVybiAzPT09Yi50YWc/Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2E9bnVsbH1lbHNlIGIhPT1hJiYoYT1udWxsKTtpZD1hO3JldHVybiBudWxsfVxuZnVuY3Rpb24gamQoYSl7c3dpdGNoKGEpe2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xpY2tcIjpjYXNlIFwiY2xvc2VcIjpjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmNhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcImludmFsaWRcIjpjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJrZXl1cFwiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJwYXN0ZVwiOmNhc2UgXCJwYXVzZVwiOmNhc2UgXCJwbGF5XCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcnVwXCI6Y2FzZSBcInJhdGVjaGFuZ2VcIjpjYXNlIFwicmVzZXRcIjpjYXNlIFwicmVzaXplXCI6Y2FzZSBcInNlZWtlZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2hzdGFydFwiOmNhc2UgXCJ2b2x1bWVjaGFuZ2VcIjpjYXNlIFwiY2hhbmdlXCI6Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmNhc2UgXCJ0ZXh0SW5wdXRcIjpjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmNhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOmNhc2UgXCJiZWZvcmVpbnB1dFwiOmNhc2UgXCJibHVyXCI6Y2FzZSBcImZ1bGxzY3JlZW5jaGFuZ2VcIjpjYXNlIFwiZm9jdXNcIjpjYXNlIFwiaGFzaGNoYW5nZVwiOmNhc2UgXCJwb3BzdGF0ZVwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwic2VsZWN0c3RhcnRcIjpyZXR1cm4gMTtjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJzY3JvbGxcIjpjYXNlIFwidG9nZ2xlXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ3aGVlbFwiOmNhc2UgXCJtb3VzZWVudGVyXCI6Y2FzZSBcIm1vdXNlbGVhdmVcIjpjYXNlIFwicG9pbnRlcmVudGVyXCI6Y2FzZSBcInBvaW50ZXJsZWF2ZVwiOnJldHVybiA0O1xuY2FzZSBcIm1lc3NhZ2VcIjpzd2l0Y2goZWMoKSl7Y2FzZSBmYzpyZXR1cm4gMTtjYXNlIGdjOnJldHVybiA0O2Nhc2UgaGM6Y2FzZSBpYzpyZXR1cm4gMTY7Y2FzZSBqYzpyZXR1cm4gNTM2ODcwOTEyO2RlZmF1bHQ6cmV0dXJuIDE2fWRlZmF1bHQ6cmV0dXJuIDE2fX12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7ZnVuY3Rpb24gbmQoKXtpZihtZClyZXR1cm4gbWQ7dmFyIGEsYj1sZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBtZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfVxuZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31BKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1BKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9QSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9QSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9QSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPUEoe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1BKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPUEoe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1BKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPUEoe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPUEoe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1BKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1BKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1pYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtpYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9aWEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1pYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihpYSl7dmFyIHhlO2lmKGlhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7SmIocmUsYil9fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2U7XG5mdW5jdGlvbiBJZShhLGIpe2lmKEhlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTtpZighamEuY2FsbChiLGUpfHwhSGUoYVtlXSxiW2VdKSlyZXR1cm4hMX1yZXR1cm4hMH1mdW5jdGlvbiBKZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBLZShhLGIpe3ZhciBjPUplKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUplKGMpfX1mdW5jdGlvbiBMZShhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP0xlKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIE1lKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVhhKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPVhhKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE5lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG5mdW5jdGlvbiBPZShhKXt2YXIgYj1NZSgpLGM9YS5mb2N1c2VkRWxlbSxkPWEuc2VsZWN0aW9uUmFuZ2U7aWYoYiE9PWMmJmMmJmMub3duZXJEb2N1bWVudCYmTGUoYy5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxjKSl7aWYobnVsbCE9PWQmJk5lKGMpKWlmKGI9ZC5zdGFydCxhPWQuZW5kLHZvaWQgMD09PWEmJihhPWIpLFwic2VsZWN0aW9uU3RhcnRcImluIGMpYy5zZWxlY3Rpb25TdGFydD1iLGMuc2VsZWN0aW9uRW5kPU1hdGgubWluKGEsYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYoYT0oYj1jLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmYi5kZWZhdWx0Vmlld3x8d2luZG93LGEuZ2V0U2VsZWN0aW9uKXthPWEuZ2V0U2VsZWN0aW9uKCk7dmFyIGU9Yy50ZXh0Q29udGVudC5sZW5ndGgsZj1NYXRoLm1pbihkLnN0YXJ0LGUpO2Q9dm9pZCAwPT09ZC5lbmQ/ZjpNYXRoLm1pbihkLmVuZCxlKTshYS5leHRlbmQmJmY+ZCYmKGU9ZCxkPWYsZj1lKTtlPUtlKGMsZik7dmFyIGc9S2UoYyxcbmQpO2UmJmcmJigxIT09YS5yYW5nZUNvdW50fHxhLmFuY2hvck5vZGUhPT1lLm5vZGV8fGEuYW5jaG9yT2Zmc2V0IT09ZS5vZmZzZXR8fGEuZm9jdXNOb2RlIT09Zy5ub2RlfHxhLmZvY3VzT2Zmc2V0IT09Zy5vZmZzZXQpJiYoYj1iLmNyZWF0ZVJhbmdlKCksYi5zZXRTdGFydChlLm5vZGUsZS5vZmZzZXQpLGEucmVtb3ZlQWxsUmFuZ2VzKCksZj5kPyhhLmFkZFJhbmdlKGIpLGEuZXh0ZW5kKGcubm9kZSxnLm9mZnNldCkpOihiLnNldEVuZChnLm5vZGUsZy5vZmZzZXQpLGEuYWRkUmFuZ2UoYikpKX1iPVtdO2ZvcihhPWM7YT1hLnBhcmVudE5vZGU7KTE9PT1hLm5vZGVUeXBlJiZiLnB1c2goe2VsZW1lbnQ6YSxsZWZ0OmEuc2Nyb2xsTGVmdCx0b3A6YS5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5mb2N1cyYmYy5mb2N1cygpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxhLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfX1cbnZhciBQZT1pYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmTmUoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSWUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuZnVuY3Rpb24gVmUoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgV2U9e2FuaW1hdGlvbmVuZDpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlZlKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sWGU9e30sWWU9e307XG5pYSYmKFllPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFdlLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFdlLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFdlLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFdlLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gWmUoYSl7aWYoWGVbYV0pcmV0dXJuIFhlW2FdO2lmKCFXZVthXSlyZXR1cm4gYTt2YXIgYj1XZVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBZZSlyZXR1cm4gWGVbYV09YltjXTtyZXR1cm4gYX12YXIgJGU9WmUoXCJhbmltYXRpb25lbmRcIiksYWY9WmUoXCJhbmltYXRpb25pdGVyYXRpb25cIiksYmY9WmUoXCJhbmltYXRpb25zdGFydFwiKSxjZj1aZShcInRyYW5zaXRpb25lbmRcIiksZGY9bmV3IE1hcCxlZj1cImFib3J0IGF1eENsaWNrIGNhbmNlbCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRyYWcgZHJhZ0VuZCBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGRyYWdTdGFydCBkcm9wIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGdvdFBvaW50ZXJDYXB0dXJlIGlucHV0IGludmFsaWQga2V5RG93biBrZXlQcmVzcyBrZXlVcCBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IGxvc3RQb2ludGVyQ2FwdHVyZSBtb3VzZURvd24gbW91c2VNb3ZlIG1vdXNlT3V0IG1vdXNlT3ZlciBtb3VzZVVwIHBhc3RlIHBhdXNlIHBsYXkgcGxheWluZyBwb2ludGVyQ2FuY2VsIHBvaW50ZXJEb3duIHBvaW50ZXJNb3ZlIHBvaW50ZXJPdXQgcG9pbnRlck92ZXIgcG9pbnRlclVwIHByb2dyZXNzIHJhdGVDaGFuZ2UgcmVzZXQgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VibWl0IHN1c3BlbmQgdGltZVVwZGF0ZSB0b3VjaENhbmNlbCB0b3VjaEVuZCB0b3VjaFN0YXJ0IHZvbHVtZUNoYW5nZSBzY3JvbGwgdG9nZ2xlIHRvdWNoTW92ZSB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gZmYoYSxiKXtkZi5zZXQoYSxiKTtmYShiLFthXSl9Zm9yKHZhciBnZj0wO2dmPGVmLmxlbmd0aDtnZisrKXt2YXIgaGY9ZWZbZ2ZdLGpmPWhmLnRvTG93ZXJDYXNlKCksa2Y9aGZbMF0udG9VcHBlckNhc2UoKStoZi5zbGljZSgxKTtmZihqZixcIm9uXCIra2YpfWZmKCRlLFwib25BbmltYXRpb25FbmRcIik7ZmYoYWYsXCJvbkFuaW1hdGlvbkl0ZXJhdGlvblwiKTtmZihiZixcIm9uQW5pbWF0aW9uU3RhcnRcIik7ZmYoXCJkYmxjbGlja1wiLFwib25Eb3VibGVDbGlja1wiKTtmZihcImZvY3VzaW5cIixcIm9uRm9jdXNcIik7ZmYoXCJmb2N1c291dFwiLFwib25CbHVyXCIpO2ZmKGNmLFwib25UcmFuc2l0aW9uRW5kXCIpO2hhKFwib25Nb3VzZUVudGVyXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7aGEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtoYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO1xuaGEoXCJvblBvaW50ZXJMZWF2ZVwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtmYShcIm9uQ2hhbmdlXCIsXCJjaGFuZ2UgY2xpY2sgZm9jdXNpbiBmb2N1c291dCBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvblNlbGVjdFwiLFwiZm9jdXNvdXQgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1c2luIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uQmVmb3JlSW5wdXRcIixbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl0pO2ZhKFwib25Db21wb3NpdGlvbkVuZFwiLFwiY29tcG9zaXRpb25lbmQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO2ZhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmZhKFwib25Db21wb3NpdGlvblVwZGF0ZVwiLFwiY29tcG9zaXRpb251cGRhdGUgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO3ZhciBsZj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2UgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLG1mPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KGxmKSk7XG5mdW5jdGlvbiBuZihhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztVYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtuZihlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO25mKGUsaCxsKTtmPWt9fX1pZihRYil0aHJvdyBhPVJiLFFiPSExLFJiPW51bGwsYTt9XG5mdW5jdGlvbiBEKGEsYil7dmFyIGM9YltvZl07dm9pZCAwPT09YyYmKGM9YltvZl09bmV3IFNldCk7dmFyIGQ9YStcIl9fYnViYmxlXCI7Yy5oYXMoZCl8fChwZihiLGEsMiwhMSksYy5hZGQoZCkpfWZ1bmN0aW9uIHFmKGEsYixjKXt2YXIgZD0wO2ImJihkfD00KTtwZihjLGEsZCxiKX12YXIgcmY9XCJfcmVhY3RMaXN0ZW5pbmdcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtmdW5jdGlvbiBzZihhKXtpZighYVtyZl0pe2FbcmZdPSEwO2RhLmZvckVhY2goZnVuY3Rpb24oYil7XCJzZWxlY3Rpb25jaGFuZ2VcIiE9PWImJihtZi5oYXMoYil8fHFmKGIsITEsYSkscWYoYiwhMCxhKSl9KTt2YXIgYj05PT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDtudWxsPT09Ynx8YltyZl18fChiW3JmXT0hMCxxZihcInNlbGVjdGlvbmNoYW5nZVwiLCExLGIpKX19XG5mdW5jdGlvbiBwZihhLGIsYyxkKXtzd2l0Y2goamQoYikpe2Nhc2UgMTp2YXIgZT1lZDticmVhaztjYXNlIDQ6ZT1nZDticmVhaztkZWZhdWx0OmU9ZmR9Yz1lLmJpbmQobnVsbCxiLGMsYSk7ZT12b2lkIDA7IUxifHxcInRvdWNoc3RhcnRcIiE9PWImJlwidG91Y2htb3ZlXCIhPT1iJiZcIndoZWVsXCIhPT1ifHwoZT0hMCk7ZD92b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse2NhcHR1cmU6ITAscGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMCk6dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCExKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQsZSl7dmFyIGY9ZDtpZigwPT09KGImMSkmJjA9PT0oYiYyKSYmbnVsbCE9PWQpYTpmb3IoOzspe2lmKG51bGw9PT1kKXJldHVybjt2YXIgZz1kLnRhZztpZigzPT09Z3x8ND09PWcpe3ZhciBoPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoaD09PWV8fDg9PT1oLm5vZGVUeXBlJiZoLnBhcmVudE5vZGU9PT1lKWJyZWFrO2lmKDQ9PT1nKWZvcihnPWQucmV0dXJuO251bGwhPT1nOyl7dmFyIGs9Zy50YWc7aWYoMz09PWt8fDQ9PT1rKWlmKGs9Zy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxrPT09ZXx8OD09PWsubm9kZVR5cGUmJmsucGFyZW50Tm9kZT09PWUpcmV0dXJuO2c9Zy5yZXR1cm59Zm9yKDtudWxsIT09aDspe2c9V2MoaCk7aWYobnVsbD09PWcpcmV0dXJuO2s9Zy50YWc7aWYoNT09PWt8fDY9PT1rKXtkPWY9Zztjb250aW51ZSBhfWg9aC5wYXJlbnROb2RlfX1kPWQucmV0dXJufUpiKGZ1bmN0aW9uKCl7dmFyIGQ9ZixlPXhiKGMpLGc9W107XG5hOnt2YXIgaD1kZi5nZXQoYSk7aWYodm9pZCAwIT09aCl7dmFyIGs9dGQsbj1hO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2QoYykpYnJlYWsgYTtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOms9UmQ7YnJlYWs7Y2FzZSBcImZvY3VzaW5cIjpuPVwiZm9jdXNcIjtrPUZkO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOm49XCJibHVyXCI7az1GZDticmVhaztjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjprPUZkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilicmVhayBhO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6az1CZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjprPVxuRGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6az1WZDticmVhaztjYXNlICRlOmNhc2UgYWY6Y2FzZSBiZjprPUhkO2JyZWFrO2Nhc2UgY2Y6az1YZDticmVhaztjYXNlIFwic2Nyb2xsXCI6az12ZDticmVhaztjYXNlIFwid2hlZWxcIjprPVpkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOms9SmQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6az1UZH12YXIgdD0wIT09KGImNCksSj0hdCYmXCJzY3JvbGxcIj09PWEseD10P251bGwhPT1oP2grXCJDYXB0dXJlXCI6bnVsbDpoO3Q9W107Zm9yKHZhciB3PWQsdTtudWxsIT09XG53Oyl7dT13O3ZhciBGPXUuc3RhdGVOb2RlOzU9PT11LnRhZyYmbnVsbCE9PUYmJih1PUYsbnVsbCE9PXgmJihGPUtiKHcseCksbnVsbCE9RiYmdC5wdXNoKHRmKHcsRix1KSkpKTtpZihKKWJyZWFrO3c9dy5yZXR1cm59MDx0Lmxlbmd0aCYmKGg9bmV3IGsoaCxuLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmgsbGlzdGVuZXJzOnR9KSl9fWlmKDA9PT0oYiY3KSl7YTp7aD1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YTtrPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihoJiZjIT09d2ImJihuPWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJihXYyhuKXx8blt1Zl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZihuPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLG49bj9XYyhuKTpudWxsLG51bGwhPT1cbm4mJihKPVZiKG4pLG4hPT1KfHw1IT09bi50YWcmJjYhPT1uLnRhZykpbj1udWxsfWVsc2Ugaz1udWxsLG49ZDtpZihrIT09bil7dD1CZDtGPVwib25Nb3VzZUxlYXZlXCI7eD1cIm9uTW91c2VFbnRlclwiO3c9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl0PVRkLEY9XCJvblBvaW50ZXJMZWF2ZVwiLHg9XCJvblBvaW50ZXJFbnRlclwiLHc9XCJwb2ludGVyXCI7Sj1udWxsPT1rP2g6dWUoayk7dT1udWxsPT1uP2g6dWUobik7aD1uZXcgdChGLHcrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD1KO2gucmVsYXRlZFRhcmdldD11O0Y9bnVsbDtXYyhlKT09PWQmJih0PW5ldyB0KHgsdytcImVudGVyXCIsbixjLGUpLHQudGFyZ2V0PXUsdC5yZWxhdGVkVGFyZ2V0PUosRj10KTtKPUY7aWYoayYmbiliOnt0PWs7eD1uO3c9MDtmb3IodT10O3U7dT12Zih1KSl3Kys7dT0wO2ZvcihGPXg7RjtGPXZmKEYpKXUrKztmb3IoOzA8dy11Oyl0PXZmKHQpLHctLTtmb3IoOzA8dS13Oyl4PVxudmYoeCksdS0tO2Zvcig7dy0tOyl7aWYodD09PXh8fG51bGwhPT14JiZ0PT09eC5hbHRlcm5hdGUpYnJlYWsgYjt0PXZmKHQpO3g9dmYoeCl9dD1udWxsfWVsc2UgdD1udWxsO251bGwhPT1rJiZ3ZihnLGgsayx0LCExKTtudWxsIT09biYmbnVsbCE9PUomJndmKGcsSixuLHQsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIG5hPXZlO2Vsc2UgaWYobWUoaCkpaWYod2UpbmE9RmU7ZWxzZXtuYT1EZTt2YXIgeGE9Q2V9ZWxzZShrPWgubm9kZU5hbWUpJiZcImlucHV0XCI9PT1rLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1oLnR5cGV8fFwicmFkaW9cIj09PWgudHlwZSkmJihuYT1FZSk7aWYobmEmJihuYT1uYShhLGQpKSl7bmUoZyxuYSxjLGUpO2JyZWFrIGF9eGEmJnhhKGEsaCxkKTtcImZvY3Vzb3V0XCI9PT1hJiYoeGE9aC5fd3JhcHBlclN0YXRlKSYmXG54YS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09aC50eXBlJiZjYihoLFwibnVtYmVyXCIsaC52YWx1ZSl9eGE9ZD91ZShkKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6aWYobWUoeGEpfHxcInRydWVcIj09PXhhLmNvbnRlbnRFZGl0YWJsZSlRZT14YSxSZT1kLFNlPW51bGw7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6U2U9UmU9UWU9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6VGU9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOlRlPSExO1VlKGcsYyxlKTticmVhaztjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoUGUpYnJlYWs7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpVZShnLGMsZSl9dmFyICRhO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBiYT1cIm9uQ29tcG9zaXRpb25TdGFydFwiO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6YmE9XCJvbkNvbXBvc2l0aW9uRW5kXCI7XG5icmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmJhPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9YmE9dm9pZCAwfWVsc2UgaWU/Z2UoYSxjKSYmKGJhPVwib25Db21wb3NpdGlvbkVuZFwiKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGJhPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO2JhJiYoZGUmJlwia29cIiE9PWMubG9jYWxlJiYoaWV8fFwib25Db21wb3NpdGlvblN0YXJ0XCIhPT1iYT9cIm9uQ29tcG9zaXRpb25FbmRcIj09PWJhJiZpZSYmKCRhPW5kKCkpOihrZD1lLGxkPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGllPSEwKSkseGE9b2UoZCxiYSksMDx4YS5sZW5ndGgmJihiYT1uZXcgTGQoYmEsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpiYSxsaXN0ZW5lcnM6eGF9KSwkYT9iYS5kYXRhPSRhOigkYT1oZShjKSxudWxsIT09JGEmJihiYS5kYXRhPSRhKSkpKTtpZigkYT1jZT9qZShhLGMpOmtlKGEsYykpZD1vZShkLFwib25CZWZvcmVJbnB1dFwiKSxcbjA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcImJlZm9yZWlucHV0XCIsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6ZSxsaXN0ZW5lcnM6ZH0pLGUuZGF0YT0kYSl9c2UoZyxiKX0pfWZ1bmN0aW9uIHRmKGEsYixjKXtyZXR1cm57aW5zdGFuY2U6YSxsaXN0ZW5lcjpiLGN1cnJlbnRUYXJnZXQ6Y319ZnVuY3Rpb24gb2UoYSxiKXtmb3IodmFyIGM9YitcIkNhcHR1cmVcIixkPVtdO251bGwhPT1hOyl7dmFyIGU9YSxmPWUuc3RhdGVOb2RlOzU9PT1lLnRhZyYmbnVsbCE9PWYmJihlPWYsZj1LYihhLGMpLG51bGwhPWYmJmQudW5zaGlmdCh0ZihhLGYsZSkpLGY9S2IoYSxiKSxudWxsIT1mJiZkLnB1c2godGYoYSxmLGUpKSk7YT1hLnJldHVybn1yZXR1cm4gZH1mdW5jdGlvbiB2ZihhKXtpZihudWxsPT09YSlyZXR1cm4gbnVsbDtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gd2YoYSxiLGMsZCxlKXtmb3IodmFyIGY9Yi5fcmVhY3ROYW1lLGc9W107bnVsbCE9PWMmJmMhPT1kOyl7dmFyIGg9YyxrPWguYWx0ZXJuYXRlLGw9aC5zdGF0ZU5vZGU7aWYobnVsbCE9PWsmJms9PT1kKWJyZWFrOzU9PT1oLnRhZyYmbnVsbCE9PWwmJihoPWwsZT8oaz1LYihjLGYpLG51bGwhPWsmJmcudW5zaGlmdCh0ZihjLGssaCkpKTplfHwoaz1LYihjLGYpLG51bGwhPWsmJmcucHVzaCh0ZihjLGssaCkpKSk7Yz1jLnJldHVybn0wIT09Zy5sZW5ndGgmJmEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6Z30pfXZhciB4Zj0vXFxyXFxuPy9nLHlmPS9cXHUwMDAwfFxcdUZGRkQvZztmdW5jdGlvbiB6ZihhKXtyZXR1cm4oXCJzdHJpbmdcIj09PXR5cGVvZiBhP2E6XCJcIithKS5yZXBsYWNlKHhmLFwiXFxuXCIpLnJlcGxhY2UoeWYsXCJcIil9ZnVuY3Rpb24gQWYoYSxiLGMpe2I9emYoYik7aWYoemYoYSkhPT1iJiZjKXRocm93IEVycm9yKHAoNDI1KSk7fWZ1bmN0aW9uIEJmKCl7fVxudmFyIENmPW51bGwsRGY9bnVsbDtmdW5jdGlvbiBFZihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH1cbnZhciBGZj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxHZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsSGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIFByb21pc2U/UHJvbWlzZTp2b2lkIDAsSmY9XCJmdW5jdGlvblwiPT09dHlwZW9mIHF1ZXVlTWljcm90YXNrP3F1ZXVlTWljcm90YXNrOlwidW5kZWZpbmVkXCIhPT10eXBlb2YgSGY/ZnVuY3Rpb24oYSl7cmV0dXJuIEhmLnJlc29sdmUobnVsbCkudGhlbihhKS5jYXRjaChJZil9OkZmO2Z1bmN0aW9uIElmKGEpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBhO30pfVxuZnVuY3Rpb24gS2YoYSxiKXt2YXIgYz1iLGQ9MDtkb3t2YXIgZT1jLm5leHRTaWJsaW5nO2EucmVtb3ZlQ2hpbGQoYyk7aWYoZSYmOD09PWUubm9kZVR5cGUpaWYoYz1lLmRhdGEsXCIvJFwiPT09Yyl7aWYoMD09PWQpe2EucmVtb3ZlQ2hpbGQoZSk7YmQoYik7cmV0dXJufWQtLX1lbHNlXCIkXCIhPT1jJiZcIiQ/XCIhPT1jJiZcIiQhXCIhPT1jfHxkKys7Yz1lfXdoaWxlKGMpO2JkKGIpfWZ1bmN0aW9uIExmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrO2lmKDg9PT1iKXtiPWEuZGF0YTtpZihcIiRcIj09PWJ8fFwiJCFcIj09PWJ8fFwiJD9cIj09PWIpYnJlYWs7aWYoXCIvJFwiPT09YilyZXR1cm4gbnVsbH19cmV0dXJuIGF9XG5mdW5jdGlvbiBNZihhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiJFwiPT09Y3x8XCIkIVwiPT09Y3x8XCIkP1wiPT09Yyl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2VcIi8kXCI9PT1jJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgTmY9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksT2Y9XCJfX3JlYWN0RmliZXIkXCIrTmYsUGY9XCJfX3JlYWN0UHJvcHMkXCIrTmYsdWY9XCJfX3JlYWN0Q29udGFpbmVyJFwiK05mLG9mPVwiX19yZWFjdEV2ZW50cyRcIitOZixRZj1cIl9fcmVhY3RMaXN0ZW5lcnMkXCIrTmYsUmY9XCJfX3JlYWN0SGFuZGxlcyRcIitOZjtcbmZ1bmN0aW9uIFdjKGEpe3ZhciBiPWFbT2ZdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW3VmXXx8Y1tPZl0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1NZihhKTtudWxsIT09YTspe2lmKGM9YVtPZl0pcmV0dXJuIGM7YT1NZihhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQ2IoYSl7YT1hW09mXXx8YVt1Zl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIHVlKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcihwKDMzKSk7fWZ1bmN0aW9uIERiKGEpe3JldHVybiBhW1BmXXx8bnVsbH12YXIgU2Y9W10sVGY9LTE7ZnVuY3Rpb24gVWYoYSl7cmV0dXJue2N1cnJlbnQ6YX19XG5mdW5jdGlvbiBFKGEpezA+VGZ8fChhLmN1cnJlbnQ9U2ZbVGZdLFNmW1RmXT1udWxsLFRmLS0pfWZ1bmN0aW9uIEcoYSxiKXtUZisrO1NmW1RmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIFZmPXt9LEg9VWYoVmYpLFdmPVVmKCExKSxYZj1WZjtmdW5jdGlvbiBZZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIFZmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfVxuZnVuY3Rpb24gWmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiAkZigpe0UoV2YpO0UoSCl9ZnVuY3Rpb24gYWcoYSxiLGMpe2lmKEguY3VycmVudCE9PVZmKXRocm93IEVycm9yKHAoMTY4KSk7RyhILGIpO0coV2YsYyl9ZnVuY3Rpb24gYmcoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2I9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBiKSl0aHJvdyBFcnJvcihwKDEwOCxSYShhKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBBKHt9LGMsZCl9XG5mdW5jdGlvbiBjZyhhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8VmY7WGY9SC5jdXJyZW50O0coSCxhKTtHKFdmLFdmLmN1cnJlbnQpO3JldHVybiEwfWZ1bmN0aW9uIGRnKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcihwKDE2OSkpO2M/KGE9YmcoYSxiLFhmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsRShXZiksRShIKSxHKEgsYSkpOkUoV2YpO0coV2YsYyl9dmFyIGVnPW51bGwsZmc9ITEsZ2c9ITE7ZnVuY3Rpb24gaGcoYSl7bnVsbD09PWVnP2VnPVthXTplZy5wdXNoKGEpfWZ1bmN0aW9uIGlnKGEpe2ZnPSEwO2hnKGEpfVxuZnVuY3Rpb24gamcoKXtpZighZ2cmJm51bGwhPT1lZyl7Z2c9ITA7dmFyIGE9MCxiPUM7dHJ5e3ZhciBjPWVnO2ZvcihDPTE7YTxjLmxlbmd0aDthKyspe3ZhciBkPWNbYV07ZG8gZD1kKCEwKTt3aGlsZShudWxsIT09ZCl9ZWc9bnVsbDtmZz0hMX1jYXRjaChlKXt0aHJvdyBudWxsIT09ZWcmJihlZz1lZy5zbGljZShhKzEpKSxhYyhmYyxqZyksZTt9ZmluYWxseXtDPWIsZ2c9ITF9fXJldHVybiBudWxsfXZhciBrZz1bXSxsZz0wLG1nPW51bGwsbmc9MCxvZz1bXSxwZz0wLHFnPW51bGwscmc9MSxzZz1cIlwiO2Z1bmN0aW9uIHRnKGEsYil7a2dbbGcrK109bmc7a2dbbGcrK109bWc7bWc9YTtuZz1ifVxuZnVuY3Rpb24gdWcoYSxiLGMpe29nW3BnKytdPXJnO29nW3BnKytdPXNnO29nW3BnKytdPXFnO3FnPWE7dmFyIGQ9cmc7YT1zZzt2YXIgZT0zMi1vYyhkKS0xO2QmPX4oMTw8ZSk7Yys9MTt2YXIgZj0zMi1vYyhiKStlO2lmKDMwPGYpe3ZhciBnPWUtZSU1O2Y9KGQmKDE8PGcpLTEpLnRvU3RyaW5nKDMyKTtkPj49ZztlLT1nO3JnPTE8PDMyLW9jKGIpK2V8Yzw8ZXxkO3NnPWYrYX1lbHNlIHJnPTE8PGZ8Yzw8ZXxkLHNnPWF9ZnVuY3Rpb24gdmcoYSl7bnVsbCE9PWEucmV0dXJuJiYodGcoYSwxKSx1ZyhhLDEsMCkpfWZ1bmN0aW9uIHdnKGEpe2Zvcig7YT09PW1nOyltZz1rZ1stLWxnXSxrZ1tsZ109bnVsbCxuZz1rZ1stLWxnXSxrZ1tsZ109bnVsbDtmb3IoO2E9PT1xZzspcWc9b2dbLS1wZ10sb2dbcGddPW51bGwsc2c9b2dbLS1wZ10sb2dbcGddPW51bGwscmc9b2dbLS1wZ10sb2dbcGddPW51bGx9dmFyIHhnPW51bGwseWc9bnVsbCxJPSExLHpnPW51bGw7XG5mdW5jdGlvbiBBZyhhLGIpe3ZhciBjPUJnKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2I9YS5kZWxldGlvbnM7bnVsbD09PWI/KGEuZGVsZXRpb25zPVtjXSxhLmZsYWdzfD0xNik6Yi5wdXNoKGMpfVxuZnVuY3Rpb24gQ2coYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIseGc9YSx5Zz1MZihiLmZpcnN0Q2hpbGQpLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIseGc9YSx5Zz1udWxsLCEwKTohMTtjYXNlIDEzOnJldHVybiBiPTghPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYz1udWxsIT09cWc/e2lkOnJnLG92ZXJmbG93OnNnfTpudWxsLGEubWVtb2l6ZWRTdGF0ZT17ZGVoeWRyYXRlZDpiLHRyZWVDb250ZXh0OmMscmV0cnlMYW5lOjEwNzM3NDE4MjR9LGM9QmcoMTgsbnVsbCxudWxsLDApLGMuc3RhdGVOb2RlPWIsYy5yZXR1cm49YSxhLmNoaWxkPWMseGc9YSx5Zz1cbm51bGwsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIERnKGEpe3JldHVybiAwIT09KGEubW9kZSYxKSYmMD09PShhLmZsYWdzJjEyOCl9ZnVuY3Rpb24gRWcoYSl7aWYoSSl7dmFyIGI9eWc7aWYoYil7dmFyIGM9YjtpZighQ2coYSxiKSl7aWYoRGcoYSkpdGhyb3cgRXJyb3IocCg0MTgpKTtiPUxmKGMubmV4dFNpYmxpbmcpO3ZhciBkPXhnO2ImJkNnKGEsYik/QWcoZCxjKTooYS5mbGFncz1hLmZsYWdzJi00MDk3fDIsST0hMSx4Zz1hKX19ZWxzZXtpZihEZyhhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2EuZmxhZ3M9YS5mbGFncyYtNDA5N3wyO0k9ITE7eGc9YX19fWZ1bmN0aW9uIEZnKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjt4Zz1hfVxuZnVuY3Rpb24gR2coYSl7aWYoYSE9PXhnKXJldHVybiExO2lmKCFJKXJldHVybiBGZyhhKSxJPSEwLCExO3ZhciBiOyhiPTMhPT1hLnRhZykmJiEoYj01IT09YS50YWcpJiYoYj1hLnR5cGUsYj1cImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIUVmKGEudHlwZSxhLm1lbW9pemVkUHJvcHMpKTtpZihiJiYoYj15Zykpe2lmKERnKGEpKXRocm93IEhnKCksRXJyb3IocCg0MTgpKTtmb3IoO2I7KUFnKGEsYiksYj1MZihiLm5leHRTaWJsaW5nKX1GZyhhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHAoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIvJFwiPT09Yyl7aWYoMD09PWIpe3lnPUxmKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2VcIiRcIiE9PWMmJlwiJCFcIiE9PWMmJlwiJD9cIiE9PWN8fGIrK31hPWEubmV4dFNpYmxpbmd9eWc9XG5udWxsfX1lbHNlIHlnPXhnP0xmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIEhnKCl7Zm9yKHZhciBhPXlnO2E7KWE9TGYoYS5uZXh0U2libGluZyl9ZnVuY3Rpb24gSWcoKXt5Zz14Zz1udWxsO0k9ITF9ZnVuY3Rpb24gSmcoYSl7bnVsbD09PXpnP3pnPVthXTp6Zy5wdXNoKGEpfXZhciBLZz11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztcbmZ1bmN0aW9uIExnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IocCgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcihwKDE0NyxhKSk7dmFyIGU9ZCxmPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1mKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWUucmVmcztudWxsPT09YT9kZWxldGUgYltmXTpiW2ZdPWF9O2IuX3N0cmluZ1JlZj1mO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcihwKDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcihwKDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gTWcoYSxiKXthPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKTt0aHJvdyBFcnJvcihwKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1hP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmEpKTt9ZnVuY3Rpb24gTmcoYSl7dmFyIGI9YS5faW5pdDtyZXR1cm4gYihhLl9wYXlsb2FkKX1cbmZ1bmN0aW9uIE9nKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmRlbGV0aW9ucztudWxsPT09ZD8oYi5kZWxldGlvbnM9W2NdLGIuZmxhZ3N8PTE2KTpkLnB1c2goYyl9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPVBnKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYi5mbGFnc3w9MTA0ODU3NixjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZmxhZ3N8PTIsYyk6ZDtiLmZsYWdzfD0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmXG5udWxsPT09Yi5hbHRlcm5hdGUmJihiLmZsYWdzfD0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9UWcoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXt2YXIgZj1jLnR5cGU7aWYoZj09PXlhKXJldHVybiBtKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsYy5rZXkpO2lmKG51bGwhPT1iJiYoYi5lbGVtZW50VHlwZT09PWZ8fFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYuJCR0eXBlb2Y9PT1IYSYmTmcoZik9PT1iLnR5cGUpKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1MZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9UmcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9TGcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxcbmIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1TZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9VGcoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBxKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGImJlwiXCIhPT1ifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9UWcoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGM9UmcoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksXG5jLnJlZj1MZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2Ugd2E6cmV0dXJuIGI9U2coYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2Nhc2UgSGE6dmFyIGQ9Yi5faW5pdDtyZXR1cm4gcShhLGQoYi5fcGF5bG9hZCksYyl9aWYoZWIoYil8fEthKGIpKXJldHVybiBiPVRnKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO01nKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcihhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYyYmXCJcIiE9PWN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGMua2V5PT09ZT9rKGEsYixjLGQpOm51bGw7Y2FzZSB3YTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbDtjYXNlIEhhOnJldHVybiBlPWMuX2luaXQscihhLFxuYixlKGMuX3BheWxvYWQpLGQpfWlmKGViKGMpfHxLYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7TWcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB5KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkJiZcIlwiIT09ZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSB2YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsayhiLGEsZCxlKTtjYXNlIHdhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpO2Nhc2UgSGE6dmFyIGY9ZC5faW5pdDtyZXR1cm4geShhLGIsYyxmKGQuX3BheWxvYWQpLGUpfWlmKGViKGQpfHxLYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7TWcoYixkKX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIG4oZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsbT1udWxsLHU9Zyx3PWc9MCx4PW51bGw7bnVsbCE9PXUmJnc8aC5sZW5ndGg7dysrKXt1LmluZGV4Pnc/KHg9dSx1PW51bGwpOng9dS5zaWJsaW5nO3ZhciBuPXIoZSx1LGhbd10sayk7aWYobnVsbD09PW4pe251bGw9PT11JiYodT14KTticmVha31hJiZ1JiZudWxsPT09bi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHcpO251bGw9PT1tP2w9bjptLnNpYmxpbmc9bjttPW47dT14fWlmKHc9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLEkmJnRnKGUsdyksbDtpZihudWxsPT09dSl7Zm9yKDt3PGgubGVuZ3RoO3crKyl1PXEoZSxoW3ddLGspLG51bGwhPT11JiYoZz1mKHUsZyx3KSxudWxsPT09bT9sPXU6bS5zaWJsaW5nPXUsbT11KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZvcih1PWQoZSx1KTt3PGgubGVuZ3RoO3crKyl4PXkodSxlLHcsaFt3XSxrKSxudWxsIT09eCYmKGEmJm51bGwhPT14LmFsdGVybmF0ZSYmdS5kZWxldGUobnVsbD09PVxueC5rZXk/dzp4LmtleSksZz1mKHgsZyx3KSxudWxsPT09bT9sPXg6bS5zaWJsaW5nPXgsbT14KTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO0kmJnRnKGUsdyk7cmV0dXJuIGx9ZnVuY3Rpb24gdChlLGcsaCxrKXt2YXIgbD1LYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyBFcnJvcihwKDE1MCkpO2g9bC5jYWxsKGgpO2lmKG51bGw9PWgpdGhyb3cgRXJyb3IocCgxNTEpKTtmb3IodmFyIHU9bD1udWxsLG09Zyx3PWc9MCx4PW51bGwsbj1oLm5leHQoKTtudWxsIT09bSYmIW4uZG9uZTt3Kyssbj1oLm5leHQoKSl7bS5pbmRleD53Pyh4PW0sbT1udWxsKTp4PW0uc2libGluZzt2YXIgdD1yKGUsbSxuLnZhbHVlLGspO2lmKG51bGw9PT10KXtudWxsPT09bSYmKG09eCk7YnJlYWt9YSYmbSYmbnVsbD09PXQuYWx0ZXJuYXRlJiZiKGUsbSk7Zz1mKHQsZyx3KTtudWxsPT09dT9sPXQ6dS5zaWJsaW5nPXQ7dT10O209eH1pZihuLmRvbmUpcmV0dXJuIGMoZSxcbm0pLEkmJnRnKGUsdyksbDtpZihudWxsPT09bSl7Zm9yKDshbi5kb25lO3crKyxuPWgubmV4dCgpKW49cShlLG4udmFsdWUsayksbnVsbCE9PW4mJihnPWYobixnLHcpLG51bGw9PT11P2w9bjp1LnNpYmxpbmc9bix1PW4pO0kmJnRnKGUsdyk7cmV0dXJuIGx9Zm9yKG09ZChlLG0pOyFuLmRvbmU7dysrLG49aC5uZXh0KCkpbj15KG0sZSx3LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT1uLmtleT93Om4ua2V5KSxnPWYobixnLHcpLG51bGw9PT11P2w9bjp1LnNpYmxpbmc9bix1PW4pO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mdW5jdGlvbiBKKGEsZCxmLGgpe1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXlhJiZudWxsPT09Zi5rZXkmJihmPWYucHJvcHMuY2hpbGRyZW4pO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYpe3N3aXRjaChmLiQkdHlwZW9mKXtjYXNlIHZhOmE6e2Zvcih2YXIgaz1cbmYua2V5LGw9ZDtudWxsIT09bDspe2lmKGwua2V5PT09ayl7az1mLnR5cGU7aWYoaz09PXlhKXtpZig3PT09bC50YWcpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWVsc2UgaWYobC5lbGVtZW50VHlwZT09PWt8fFwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1IYSYmTmcoayk9PT1sLnR5cGUpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMpO2QucmVmPUxnKGEsbCxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWMoYSxsKTticmVha31lbHNlIGIoYSxsKTtsPWwuc2libGluZ31mLnR5cGU9PT15YT8oZD1UZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9UmcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9TGcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHdhOmE6e2ZvcihsPWYua2V5O251bGwhPT1cbmQ7KXtpZihkLmtleT09PWwpaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9U2coZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSk7Y2FzZSBIYTpyZXR1cm4gbD1mLl9pbml0LEooYSxkLGwoZi5fcGF5bG9hZCksaCl9aWYoZWIoZikpcmV0dXJuIG4oYSxkLGYsaCk7aWYoS2EoZikpcmV0dXJuIHQoYSxkLGYsaCk7TWcoYSxmKX1yZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGYmJlwiXCIhPT1mfHxcIm51bWJlclwiPT09dHlwZW9mIGY/KGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTpcbihjKGEsZCksZD1RZyhmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKSk6YyhhLGQpfXJldHVybiBKfXZhciBVZz1PZyghMCksVmc9T2coITEpLFdnPVVmKG51bGwpLFhnPW51bGwsWWc9bnVsbCxaZz1udWxsO2Z1bmN0aW9uICRnKCl7Wmc9WWc9WGc9bnVsbH1mdW5jdGlvbiBhaChhKXt2YXIgYj1XZy5jdXJyZW50O0UoV2cpO2EuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIGJoKGEsYixjKXtmb3IoO251bGwhPT1hOyl7dmFyIGQ9YS5hbHRlcm5hdGU7KGEuY2hpbGRMYW5lcyZiKSE9PWI/KGEuY2hpbGRMYW5lc3w9YixudWxsIT09ZCYmKGQuY2hpbGRMYW5lc3w9YikpOm51bGwhPT1kJiYoZC5jaGlsZExhbmVzJmIpIT09YiYmKGQuY2hpbGRMYW5lc3w9Yik7aWYoYT09PWMpYnJlYWs7YT1hLnJldHVybn19XG5mdW5jdGlvbiBjaChhLGIpe1hnPWE7Wmc9WWc9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJigwIT09KGEubGFuZXMmYikmJihkaD0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9ZnVuY3Rpb24gZWgoYSl7dmFyIGI9YS5fY3VycmVudFZhbHVlO2lmKFpnIT09YSlpZihhPXtjb250ZXh0OmEsbWVtb2l6ZWRWYWx1ZTpiLG5leHQ6bnVsbH0sbnVsbD09PVlnKXtpZihudWxsPT09WGcpdGhyb3cgRXJyb3IocCgzMDgpKTtZZz1hO1hnLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YX19ZWxzZSBZZz1ZZy5uZXh0PWE7cmV0dXJuIGJ9dmFyIGZoPW51bGw7ZnVuY3Rpb24gZ2goYSl7bnVsbD09PWZoP2ZoPVthXTpmaC5wdXNoKGEpfVxuZnVuY3Rpb24gaGgoYSxiLGMsZCl7dmFyIGU9Yi5pbnRlcmxlYXZlZDtudWxsPT09ZT8oYy5uZXh0PWMsZ2goYikpOihjLm5leHQ9ZS5uZXh0LGUubmV4dD1jKTtiLmludGVybGVhdmVkPWM7cmV0dXJuIGloKGEsZCl9ZnVuY3Rpb24gaWgoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7Yz1hO2ZvcihhPWEucmV0dXJuO251bGwhPT1hOylhLmNoaWxkTGFuZXN8PWIsYz1hLmFsdGVybmF0ZSxudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9YiksYz1hLGE9YS5yZXR1cm47cmV0dXJuIDM9PT1jLnRhZz9jLnN0YXRlTm9kZTpudWxsfXZhciBqaD0hMTtmdW5jdGlvbiBraChhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGZpcnN0QmFzZVVwZGF0ZTpudWxsLGxhc3RCYXNlVXBkYXRlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24gbGgoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmEuZmlyc3RCYXNlVXBkYXRlLGxhc3RCYXNlVXBkYXRlOmEubGFzdEJhc2VVcGRhdGUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gbWgoYSxiKXtyZXR1cm57ZXZlbnRUaW1lOmEsbGFuZTpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH19XG5mdW5jdGlvbiBuaChhLGIsYyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtkPWQuc2hhcmVkO2lmKDAhPT0oSyYyKSl7dmFyIGU9ZC5wZW5kaW5nO251bGw9PT1lP2IubmV4dD1iOihiLm5leHQ9ZS5uZXh0LGUubmV4dD1iKTtkLnBlbmRpbmc9YjtyZXR1cm4gaWgoYSxjKX1lPWQuaW50ZXJsZWF2ZWQ7bnVsbD09PWU/KGIubmV4dD1iLGdoKGQpKTooYi5uZXh0PWUubmV4dCxlLm5leHQ9Yik7ZC5pbnRlcmxlYXZlZD1iO3JldHVybiBpaChhLGMpfWZ1bmN0aW9uIG9oKGEsYixjKXtiPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWImJihiPWIuc2hhcmVkLDAhPT0oYyY0MTk0MjQwKSkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7Q2MoYSxjKX19XG5mdW5jdGlvbiBwaChhLGIpe3ZhciBjPWEudXBkYXRlUXVldWUsZD1hLmFsdGVybmF0ZTtpZihudWxsIT09ZCYmKGQ9ZC51cGRhdGVRdWV1ZSxjPT09ZCkpe3ZhciBlPW51bGwsZj1udWxsO2M9Yy5maXJzdEJhc2VVcGRhdGU7aWYobnVsbCE9PWMpe2Rve3ZhciBnPXtldmVudFRpbWU6Yy5ldmVudFRpbWUsbGFuZTpjLmxhbmUsdGFnOmMudGFnLHBheWxvYWQ6Yy5wYXlsb2FkLGNhbGxiYWNrOmMuY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09Zj9lPWY9ZzpmPWYubmV4dD1nO2M9Yy5uZXh0fXdoaWxlKG51bGwhPT1jKTtudWxsPT09Zj9lPWY9YjpmPWYubmV4dD1ifWVsc2UgZT1mPWI7Yz17YmFzZVN0YXRlOmQuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTplLGxhc3RCYXNlVXBkYXRlOmYsc2hhcmVkOmQuc2hhcmVkLGVmZmVjdHM6ZC5lZmZlY3RzfTthLnVwZGF0ZVF1ZXVlPWM7cmV0dXJufWE9Yy5sYXN0QmFzZVVwZGF0ZTtudWxsPT09YT9jLmZpcnN0QmFzZVVwZGF0ZT1iOmEubmV4dD1cbmI7Yy5sYXN0QmFzZVVwZGF0ZT1ifVxuZnVuY3Rpb24gcWgoYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTtqaD0hMTt2YXIgZj1lLmZpcnN0QmFzZVVwZGF0ZSxnPWUubGFzdEJhc2VVcGRhdGUsaD1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1oKXtlLnNoYXJlZC5wZW5kaW5nPW51bGw7dmFyIGs9aCxsPWsubmV4dDtrLm5leHQ9bnVsbDtudWxsPT09Zz9mPWw6Zy5uZXh0PWw7Zz1rO3ZhciBtPWEuYWx0ZXJuYXRlO251bGwhPT1tJiYobT1tLnVwZGF0ZVF1ZXVlLGg9bS5sYXN0QmFzZVVwZGF0ZSxoIT09ZyYmKG51bGw9PT1oP20uZmlyc3RCYXNlVXBkYXRlPWw6aC5uZXh0PWwsbS5sYXN0QmFzZVVwZGF0ZT1rKSl9aWYobnVsbCE9PWYpe3ZhciBxPWUuYmFzZVN0YXRlO2c9MDttPWw9az1udWxsO2g9Zjtkb3t2YXIgcj1oLmxhbmUseT1oLmV2ZW50VGltZTtpZigoZCZyKT09PXIpe251bGwhPT1tJiYobT1tLm5leHQ9e2V2ZW50VGltZTp5LGxhbmU6MCx0YWc6aC50YWcscGF5bG9hZDpoLnBheWxvYWQsY2FsbGJhY2s6aC5jYWxsYmFjayxcbm5leHQ6bnVsbH0pO2E6e3ZhciBuPWEsdD1oO3I9Yjt5PWM7c3dpdGNoKHQudGFnKXtjYXNlIDE6bj10LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIG4pe3E9bi5jYWxsKHkscSxyKTticmVhayBhfXE9bjticmVhayBhO2Nhc2UgMzpuLmZsYWdzPW4uZmxhZ3MmLTY1NTM3fDEyODtjYXNlIDA6bj10LnBheWxvYWQ7cj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbj9uLmNhbGwoeSxxLHIpOm47aWYobnVsbD09PXJ8fHZvaWQgMD09PXIpYnJlYWsgYTtxPUEoe30scSxyKTticmVhayBhO2Nhc2UgMjpqaD0hMH19bnVsbCE9PWguY2FsbGJhY2smJjAhPT1oLmxhbmUmJihhLmZsYWdzfD02NCxyPWUuZWZmZWN0cyxudWxsPT09cj9lLmVmZmVjdHM9W2hdOnIucHVzaChoKSl9ZWxzZSB5PXtldmVudFRpbWU6eSxsYW5lOnIsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bT8obD1tPXksaz1xKTptPW0ubmV4dD15LGd8PXI7XG5oPWgubmV4dDtpZihudWxsPT09aClpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSByPWgsaD1yLm5leHQsci5uZXh0PW51bGwsZS5sYXN0QmFzZVVwZGF0ZT1yLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKTtudWxsPT09bSYmKGs9cSk7ZS5iYXNlU3RhdGU9aztlLmZpcnN0QmFzZVVwZGF0ZT1sO2UubGFzdEJhc2VVcGRhdGU9bTtiPWUuc2hhcmVkLmludGVybGVhdmVkO2lmKG51bGwhPT1iKXtlPWI7ZG8gZ3w9ZS5sYW5lLGU9ZS5uZXh0O3doaWxlKGUhPT1iKX1lbHNlIG51bGw9PT1mJiYoZS5zaGFyZWQubGFuZXM9MCk7cmh8PWc7YS5sYW5lcz1nO2EubWVtb2l6ZWRTdGF0ZT1xfX1cbmZ1bmN0aW9uIHNoKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZSl0aHJvdyBFcnJvcihwKDE5MSxlKSk7ZS5jYWxsKGQpfX19dmFyIHRoPXt9LHVoPVVmKHRoKSx2aD1VZih0aCksd2g9VWYodGgpO2Z1bmN0aW9uIHhoKGEpe2lmKGE9PT10aCl0aHJvdyBFcnJvcihwKDE3NCkpO3JldHVybiBhfVxuZnVuY3Rpb24geWgoYSxiKXtHKHdoLGIpO0codmgsYSk7Ryh1aCx0aCk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTpsYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9bGIoYixhKX1FKHVoKTtHKHVoLGIpfWZ1bmN0aW9uIHpoKCl7RSh1aCk7RSh2aCk7RSh3aCl9ZnVuY3Rpb24gQWgoYSl7eGgod2guY3VycmVudCk7dmFyIGI9eGgodWguY3VycmVudCk7dmFyIGM9bGIoYixhLnR5cGUpO2IhPT1jJiYoRyh2aCxhKSxHKHVoLGMpKX1mdW5jdGlvbiBCaChhKXt2aC5jdXJyZW50PT09YSYmKEUodWgpLEUodmgpKX12YXIgTD1VZigwKTtcbmZ1bmN0aW9uIENoKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjEyOCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfXZhciBEaD1bXTtcbmZ1bmN0aW9uIEVoKCl7Zm9yKHZhciBhPTA7YTxEaC5sZW5ndGg7YSsrKURoW2FdLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PW51bGw7RGgubGVuZ3RoPTB9dmFyIEZoPXVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsR2g9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsSGg9MCxNPW51bGwsTj1udWxsLE89bnVsbCxJaD0hMSxKaD0hMSxLaD0wLExoPTA7ZnVuY3Rpb24gUCgpe3Rocm93IEVycm9yKHAoMzIxKSk7fWZ1bmN0aW9uIE1oKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIUhlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBOaChhLGIsYyxkLGUsZil7SGg9ZjtNPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IubGFuZXM9MDtGaC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP09oOlBoO2E9YyhkLGUpO2lmKEpoKXtmPTA7ZG97Smg9ITE7S2g9MDtpZigyNTw9Zil0aHJvdyBFcnJvcihwKDMwMSkpO2YrPTE7Tz1OPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO0ZoLmN1cnJlbnQ9UWg7YT1jKGQsZSl9d2hpbGUoSmgpfUZoLmN1cnJlbnQ9Umg7Yj1udWxsIT09TiYmbnVsbCE9PU4ubmV4dDtIaD0wO089Tj1NPW51bGw7SWg9ITE7aWYoYil0aHJvdyBFcnJvcihwKDMwMCkpO3JldHVybiBhfWZ1bmN0aW9uIFNoKCl7dmFyIGE9MCE9PUtoO0toPTA7cmV0dXJuIGF9XG5mdW5jdGlvbiBUaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1PP00ubWVtb2l6ZWRTdGF0ZT1PPWE6Tz1PLm5leHQ9YTtyZXR1cm4gT31mdW5jdGlvbiBVaCgpe2lmKG51bGw9PT1OKXt2YXIgYT1NLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1OLm5leHQ7dmFyIGI9bnVsbD09PU8/TS5tZW1vaXplZFN0YXRlOk8ubmV4dDtpZihudWxsIT09YilPPWIsTj1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzMTApKTtOPWE7YT17bWVtb2l6ZWRTdGF0ZTpOLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk4uYmFzZVN0YXRlLGJhc2VRdWV1ZTpOLmJhc2VRdWV1ZSxxdWV1ZTpOLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PU8/TS5tZW1vaXplZFN0YXRlPU89YTpPPU8ubmV4dD1hfXJldHVybiBPfVxuZnVuY3Rpb24gVmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBXaChhKXt2YXIgYj1VaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcihwKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPU4sZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7Zj1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPW51bGwsaz1udWxsLGw9Zjtkb3t2YXIgbT1sLmxhbmU7aWYoKEhoJm0pPT09bSludWxsIT09ayYmKGs9ay5uZXh0PXtsYW5lOjAsYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLGVhZ2VyU3RhdGU6bC5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLGQ9bC5oYXNFYWdlclN0YXRlP2wuZWFnZXJTdGF0ZTphKGQsbC5hY3Rpb24pO2Vsc2V7dmFyIHE9e2xhbmU6bSxhY3Rpb246bC5hY3Rpb24saGFzRWFnZXJTdGF0ZTpsLmhhc0VhZ2VyU3RhdGUsXG5lYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1rPyhoPWs9cSxnPWQpOms9ay5uZXh0PXE7TS5sYW5lc3w9bTtyaHw9bX1sPWwubmV4dH13aGlsZShudWxsIT09bCYmbCE9PWYpO251bGw9PT1rP2c9ZDprLm5leHQ9aDtIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fChkaD0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZztiLmJhc2VRdWV1ZT1rO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1hPWMuaW50ZXJsZWF2ZWQ7aWYobnVsbCE9PWEpe2U9YTtkbyBmPWUubGFuZSxNLmxhbmVzfD1mLHJofD1mLGU9ZS5uZXh0O3doaWxlKGUhPT1hKX1lbHNlIG51bGw9PT1lJiYoYy5sYW5lcz0wKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gWGgoYSl7dmFyIGI9VWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KGRoPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19ZnVuY3Rpb24gWWgoKXt9XG5mdW5jdGlvbiBaaChhLGIpe3ZhciBjPU0sZD1VaCgpLGU9YigpLGY9IUhlKGQubWVtb2l6ZWRTdGF0ZSxlKTtmJiYoZC5tZW1vaXplZFN0YXRlPWUsZGg9ITApO2Q9ZC5xdWV1ZTskaChhaS5iaW5kKG51bGwsYyxkLGEpLFthXSk7aWYoZC5nZXRTbmFwc2hvdCE9PWJ8fGZ8fG51bGwhPT1PJiZPLm1lbW9pemVkU3RhdGUudGFnJjEpe2MuZmxhZ3N8PTIwNDg7YmkoOSxjaS5iaW5kKG51bGwsYyxkLGUsYiksdm9pZCAwLG51bGwpO2lmKG51bGw9PT1RKXRocm93IEVycm9yKHAoMzQ5KSk7MCE9PShIaCYzMCl8fGRpKGMsYixlKX1yZXR1cm4gZX1mdW5jdGlvbiBkaShhLGIsYyl7YS5mbGFnc3w9MTYzODQ7YT17Z2V0U25hcHNob3Q6Yix2YWx1ZTpjfTtiPU0udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTS51cGRhdGVRdWV1ZT1iLGIuc3RvcmVzPVthXSk6KGM9Yi5zdG9yZXMsbnVsbD09PWM/Yi5zdG9yZXM9W2FdOmMucHVzaChhKSl9XG5mdW5jdGlvbiBjaShhLGIsYyxkKXtiLnZhbHVlPWM7Yi5nZXRTbmFwc2hvdD1kO2VpKGIpJiZmaShhKX1mdW5jdGlvbiBhaShhLGIsYyl7cmV0dXJuIGMoZnVuY3Rpb24oKXtlaShiKSYmZmkoYSl9KX1mdW5jdGlvbiBlaShhKXt2YXIgYj1hLmdldFNuYXBzaG90O2E9YS52YWx1ZTt0cnl7dmFyIGM9YigpO3JldHVybiFIZShhLGMpfWNhdGNoKGQpe3JldHVybiEwfX1mdW5jdGlvbiBmaShhKXt2YXIgYj1paChhLDEpO251bGwhPT1iJiZnaShiLGEsMSwtMSl9XG5mdW5jdGlvbiBoaShhKXt2YXIgYj1UaCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjAsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOlZoLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2IucXVldWU9YTthPWEuZGlzcGF0Y2g9aWkuYmluZChudWxsLE0sYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1cbmZ1bmN0aW9uIGJpKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPU0udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTS51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBqaSgpe3JldHVybiBVaCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24ga2koYSxiLGMsZCl7dmFyIGU9VGgoKTtNLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1iaSgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gbGkoYSxiLGMsZCl7dmFyIGU9VWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Til7dmFyIGc9Ti5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZNaChkLGcuZGVwcykpe2UubWVtb2l6ZWRTdGF0ZT1iaShiLGMsZixkKTtyZXR1cm59fU0uZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPWJpKDF8YixjLGYsZCl9ZnVuY3Rpb24gbWkoYSxiKXtyZXR1cm4ga2koODM5MDY1Niw4LGEsYil9ZnVuY3Rpb24gJGgoYSxiKXtyZXR1cm4gbGkoMjA0OCw4LGEsYil9ZnVuY3Rpb24gbmkoYSxiKXtyZXR1cm4gbGkoNCwyLGEsYil9ZnVuY3Rpb24gb2koYSxiKXtyZXR1cm4gbGkoNCw0LGEsYil9XG5mdW5jdGlvbiBwaShhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uIHFpKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gbGkoNCw0LHBpLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIHJpKCl7fWZ1bmN0aW9uIHNpKGEsYil7dmFyIGM9VWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJk1oKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gdGkoYSxiKXt2YXIgYz1VaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmTWgoYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gdWkoYSxiLGMpe2lmKDA9PT0oSGgmMjEpKXJldHVybiBhLmJhc2VTdGF0ZSYmKGEuYmFzZVN0YXRlPSExLGRoPSEwKSxhLm1lbW9pemVkU3RhdGU9YztIZShjLGIpfHwoYz15YygpLE0ubGFuZXN8PWMscmh8PWMsYS5iYXNlU3RhdGU9ITApO3JldHVybiBifWZ1bmN0aW9uIHZpKGEsYil7dmFyIGM9QztDPTAhPT1jJiY0PmM/Yzo0O2EoITApO3ZhciBkPUdoLnRyYW5zaXRpb247R2gudHJhbnNpdGlvbj17fTt0cnl7YSghMSksYigpfWZpbmFsbHl7Qz1jLEdoLnRyYW5zaXRpb249ZH19ZnVuY3Rpb24gd2koKXtyZXR1cm4gVWgoKS5tZW1vaXplZFN0YXRlfVxuZnVuY3Rpb24geGkoYSxiLGMpe3ZhciBkPXlpKGEpO2M9e2xhbmU6ZCxhY3Rpb246YyxoYXNFYWdlclN0YXRlOiExLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O2lmKHppKGEpKUFpKGIsYyk7ZWxzZSBpZihjPWhoKGEsYixjLGQpLG51bGwhPT1jKXt2YXIgZT1SKCk7Z2koYyxhLGQsZSk7QmkoYyxiLGQpfX1cbmZ1bmN0aW9uIGlpKGEsYixjKXt2YXIgZD15aShhKSxlPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtpZih6aShhKSlBaShiLGUpO2Vsc2V7dmFyIGY9YS5hbHRlcm5hdGU7aWYoMD09PWEubGFuZXMmJihudWxsPT09Znx8MD09PWYubGFuZXMpJiYoZj1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWYpKXRyeXt2YXIgZz1iLmxhc3RSZW5kZXJlZFN0YXRlLGg9ZihnLGMpO2UuaGFzRWFnZXJTdGF0ZT0hMDtlLmVhZ2VyU3RhdGU9aDtpZihIZShoLGcpKXt2YXIgaz1iLmludGVybGVhdmVkO251bGw9PT1rPyhlLm5leHQ9ZSxnaChiKSk6KGUubmV4dD1rLm5leHQsay5uZXh0PWUpO2IuaW50ZXJsZWF2ZWQ9ZTtyZXR1cm59fWNhdGNoKGwpe31maW5hbGx5e31jPWhoKGEsYixlLGQpO251bGwhPT1jJiYoZT1SKCksZ2koYyxhLGQsZSksQmkoYyxiLGQpKX19XG5mdW5jdGlvbiB6aShhKXt2YXIgYj1hLmFsdGVybmF0ZTtyZXR1cm4gYT09PU18fG51bGwhPT1iJiZiPT09TX1mdW5jdGlvbiBBaShhLGIpe0poPUloPSEwO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9ZnVuY3Rpb24gQmkoYSxiLGMpe2lmKDAhPT0oYyY0MTk0MjQwKSl7dmFyIGQ9Yi5sYW5lcztkJj1hLnBlbmRpbmdMYW5lcztjfD1kO2IubGFuZXM9YztDYyhhLGMpfX1cbnZhciBSaD17cmVhZENvbnRleHQ6ZWgsdXNlQ2FsbGJhY2s6UCx1c2VDb250ZXh0OlAsdXNlRWZmZWN0OlAsdXNlSW1wZXJhdGl2ZUhhbmRsZTpQLHVzZUluc2VydGlvbkVmZmVjdDpQLHVzZUxheW91dEVmZmVjdDpQLHVzZU1lbW86UCx1c2VSZWR1Y2VyOlAsdXNlUmVmOlAsdXNlU3RhdGU6UCx1c2VEZWJ1Z1ZhbHVlOlAsdXNlRGVmZXJyZWRWYWx1ZTpQLHVzZVRyYW5zaXRpb246UCx1c2VNdXRhYmxlU291cmNlOlAsdXNlU3luY0V4dGVybmFsU3RvcmU6UCx1c2VJZDpQLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sT2g9e3JlYWRDb250ZXh0OmVoLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7VGgoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDplaCx1c2VFZmZlY3Q6bWksdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIGtpKDQxOTQzMDgsXG40LHBpLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4ga2koNDE5NDMwOCw0LGEsYil9LHVzZUluc2VydGlvbkVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBraSg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPVRoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPVRoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2QucXVldWU9YTthPWEuZGlzcGF0Y2g9eGkuYmluZChudWxsLE0sYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPVxuVGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6aGksdXNlRGVidWdWYWx1ZTpyaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3JldHVybiBUaCgpLm1lbW9pemVkU3RhdGU9YX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPWhpKCExKSxiPWFbMF07YT12aS5iaW5kKG51bGwsYVsxXSk7VGgoKS5tZW1vaXplZFN0YXRlPWE7cmV0dXJuW2IsYV19LHVzZU11dGFibGVTb3VyY2U6ZnVuY3Rpb24oKXt9LHVzZVN5bmNFeHRlcm5hbFN0b3JlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1NLGU9VGgoKTtpZihJKXtpZih2b2lkIDA9PT1jKXRocm93IEVycm9yKHAoNDA3KSk7Yz1jKCl9ZWxzZXtjPWIoKTtpZihudWxsPT09USl0aHJvdyBFcnJvcihwKDM0OSkpOzAhPT0oSGgmMzApfHxkaShkLGIsYyl9ZS5tZW1vaXplZFN0YXRlPWM7dmFyIGY9e3ZhbHVlOmMsZ2V0U25hcHNob3Q6Yn07ZS5xdWV1ZT1mO21pKGFpLmJpbmQobnVsbCxkLFxuZixhKSxbYV0pO2QuZmxhZ3N8PTIwNDg7YmkoOSxjaS5iaW5kKG51bGwsZCxmLGMsYiksdm9pZCAwLG51bGwpO3JldHVybiBjfSx1c2VJZDpmdW5jdGlvbigpe3ZhciBhPVRoKCksYj1RLmlkZW50aWZpZXJQcmVmaXg7aWYoSSl7dmFyIGM9c2c7dmFyIGQ9cmc7Yz0oZCZ+KDE8PDMyLW9jKGQpLTEpKS50b1N0cmluZygzMikrYztiPVwiOlwiK2IrXCJSXCIrYztjPUtoKys7MDxjJiYoYis9XCJIXCIrYy50b1N0cmluZygzMikpO2IrPVwiOlwifWVsc2UgYz1MaCsrLGI9XCI6XCIrYitcInJcIitjLnRvU3RyaW5nKDMyKStcIjpcIjtyZXR1cm4gYS5tZW1vaXplZFN0YXRlPWJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sUGg9e3JlYWRDb250ZXh0OmVoLHVzZUNhbGxiYWNrOnNpLHVzZUNvbnRleHQ6ZWgsdXNlRWZmZWN0OiRoLHVzZUltcGVyYXRpdmVIYW5kbGU6cWksdXNlSW5zZXJ0aW9uRWZmZWN0Om5pLHVzZUxheW91dEVmZmVjdDpvaSx1c2VNZW1vOnRpLHVzZVJlZHVjZXI6V2gsdXNlUmVmOmppLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIFdoKFZoKX0sXG51c2VEZWJ1Z1ZhbHVlOnJpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9VWgoKTtyZXR1cm4gdWkoYixOLm1lbW9pemVkU3RhdGUsYSl9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1XaChWaClbMF0sYj1VaCgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6WWgsdXNlU3luY0V4dGVybmFsU3RvcmU6WmgsdXNlSWQ6d2ksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxRaD17cmVhZENvbnRleHQ6ZWgsdXNlQ2FsbGJhY2s6c2ksdXNlQ29udGV4dDplaCx1c2VFZmZlY3Q6JGgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpxaSx1c2VJbnNlcnRpb25FZmZlY3Q6bmksdXNlTGF5b3V0RWZmZWN0Om9pLHVzZU1lbW86dGksdXNlUmVkdWNlcjpYaCx1c2VSZWY6amksdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gWGgoVmgpfSx1c2VEZWJ1Z1ZhbHVlOnJpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9VWgoKTtyZXR1cm4gbnVsbD09PVxuTj9iLm1lbW9pemVkU3RhdGU9YTp1aShiLE4ubWVtb2l6ZWRTdGF0ZSxhKX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPVhoKFZoKVswXSxiPVVoKCkubWVtb2l6ZWRTdGF0ZTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpZaCx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpaaCx1c2VJZDp3aSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9O2Z1bmN0aW9uIENpKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9QSh7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pO3JldHVybiBifXJldHVybiBifWZ1bmN0aW9uIERpKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpBKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEubGFuZXMmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBFaT17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxzKT9WYihhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1SKCksZT15aShhKSxmPW1oKGQsZSk7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO2I9bmgoYSxmLGUpO251bGwhPT1iJiYoZ2koYixhLGUsZCksb2goYixhLGUpKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1SKCksZT15aShhKSxmPW1oKGQsZSk7Zi50YWc9MTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7Yj1uaChhLGYsZSk7bnVsbCE9PWImJihnaShiLGEsZSxkKSxvaChiLGEsZSkpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBjPVIoKSxkPVxueWkoYSksZT1taChjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO2I9bmgoYSxlLGQpO251bGwhPT1iJiYoZ2koYixhLGQsYyksb2goYixhLGQpKX19O2Z1bmN0aW9uIEZpKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IUllKGMsZCl8fCFJZShlLGYpOiEwfVxuZnVuY3Rpb24gR2koYSxiLGMpe3ZhciBkPSExLGU9VmY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9ZWgoZik6KGU9WmYoYik/WGY6SC5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/WWYoYSxlKTpWZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPUVpO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbHM9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gSGkoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJkVpLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gSWkoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz17fTtraChhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PWVoKGYpOihmPVpmKGIpP1hmOkguY3VycmVudCxlLmNvbnRleHQ9WWYoYSxmKSk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKERpKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChiPWUuc3RhdGUsXG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJkVpLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLHFoKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZmxhZ3N8PTQxOTQzMDgpfWZ1bmN0aW9uIEppKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVBhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplLGRpZ2VzdDpudWxsfX1cbmZ1bmN0aW9uIEtpKGEsYixjKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6bnVsbCxzdGFjazpudWxsIT1jP2M6bnVsbCxkaWdlc3Q6bnVsbCE9Yj9iOm51bGx9fWZ1bmN0aW9uIExpKGEsYil7dHJ5e2NvbnNvbGUuZXJyb3IoYi52YWx1ZSl9Y2F0Y2goYyl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGM7fSl9fXZhciBNaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBOaShhLGIsYyl7Yz1taCgtMSxjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtPaXx8KE9pPSEwLFBpPWQpO0xpKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gUWkoYSxiLGMpe2M9bWgoLTEsYyk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe3JldHVybiBkKGUpfTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7TGkoYSxiKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe0xpKGEsYik7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09Umk/Umk9bmV3IFNldChbdGhpc10pOlJpLmFkZCh0aGlzKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9XG5mdW5jdGlvbiBTaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7aWYobnVsbD09PWQpe2Q9YS5waW5nQ2FjaGU9bmV3IE1pO3ZhciBlPW5ldyBTZXQ7ZC5zZXQoYixlKX1lbHNlIGU9ZC5nZXQoYiksdm9pZCAwPT09ZSYmKGU9bmV3IFNldCxkLnNldChiLGUpKTtlLmhhcyhjKXx8KGUuYWRkKGMpLGE9VGkuYmluZChudWxsLGEsYixjKSxiLnRoZW4oYSxhKSl9ZnVuY3Rpb24gVWkoYSl7ZG97dmFyIGI7aWYoYj0xMz09PWEudGFnKWI9YS5tZW1vaXplZFN0YXRlLGI9bnVsbCE9PWI/bnVsbCE9PWIuZGVoeWRyYXRlZD8hMDohMTohMDtpZihiKXJldHVybiBhO2E9YS5yZXR1cm59d2hpbGUobnVsbCE9PWEpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gVmkoYSxiLGMsZCxlKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gYT09PWI/YS5mbGFnc3w9NjU1MzY6KGEuZmxhZ3N8PTEyOCxjLmZsYWdzfD0xMzEwNzIsYy5mbGFncyY9LTUyODA1LDE9PT1jLnRhZyYmKG51bGw9PT1jLmFsdGVybmF0ZT9jLnRhZz0xNzooYj1taCgtMSwxKSxiLnRhZz0yLG5oKGMsYiwxKSkpLGMubGFuZXN8PTEpLGE7YS5mbGFnc3w9NjU1MzY7YS5sYW5lcz1lO3JldHVybiBhfXZhciBXaT11YS5SZWFjdEN1cnJlbnRPd25lcixkaD0hMTtmdW5jdGlvbiBYaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1ZnKGIsbnVsbCxjLGQpOlVnKGIsYS5jaGlsZCxjLGQpfVxuZnVuY3Rpb24gWWkoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO2NoKGIsZSk7ZD1OaChhLGIsYyxkLGYsZSk7Yz1TaCgpO2lmKG51bGwhPT1hJiYhZGgpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tMjA1MyxhLmxhbmVzJj1+ZSxaaShhLGIsZSk7SSYmYyYmdmcoYik7Yi5mbGFnc3w9MTtYaShhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uICRpKGEsYixjLGQsZSl7aWYobnVsbD09PWEpe3ZhciBmPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmIWFqKGYpJiZ2b2lkIDA9PT1mLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1mLGJqKGEsYixmLGQsZSk7YT1SZyhjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGUpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1mPWEuY2hpbGQ7aWYoMD09PShhLmxhbmVzJmUpKXt2YXIgZz1mLm1lbW9pemVkUHJvcHM7Yz1jLmNvbXBhcmU7Yz1udWxsIT09Yz9jOkllO2lmKGMoZyxkKSYmYS5yZWY9PT1iLnJlZilyZXR1cm4gWmkoYSxiLGUpfWIuZmxhZ3N8PTE7YT1QZyhmLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGJqKGEsYixjLGQsZSl7aWYobnVsbCE9PWEpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihJZShmLGQpJiZhLnJlZj09PWIucmVmKWlmKGRoPSExLGIucGVuZGluZ1Byb3BzPWQ9ZiwwIT09KGEubGFuZXMmZSkpMCE9PShhLmZsYWdzJjEzMTA3MikmJihkaD0hMCk7ZWxzZSByZXR1cm4gYi5sYW5lcz1hLmxhbmVzLFppKGEsYixlKX1yZXR1cm4gY2ooYSxiLGMsZCxlKX1cbmZ1bmN0aW9uIGRqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQuY2hpbGRyZW4sZj1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtpZihcImhpZGRlblwiPT09ZC5tb2RlKWlmKDA9PT0oYi5tb2RlJjEpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjAsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH0sRyhlaixmaiksZmp8PWM7ZWxzZXtpZigwPT09KGMmMTA3Mzc0MTgyNCkpcmV0dXJuIGE9bnVsbCE9PWY/Zi5iYXNlTGFuZXN8YzpjLGIubGFuZXM9Yi5jaGlsZExhbmVzPTEwNzM3NDE4MjQsYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfSxiLnVwZGF0ZVF1ZXVlPW51bGwsRyhlaixmaiksZmp8PWEsbnVsbDtiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9O2Q9bnVsbCE9PWY/Zi5iYXNlTGFuZXM6YztHKGVqLGZqKTtmanw9ZH1lbHNlIG51bGwhPT1cbmY/KGQ9Zi5iYXNlTGFuZXN8YyxiLm1lbW9pemVkU3RhdGU9bnVsbCk6ZD1jLEcoZWosZmopLGZqfD1kO1hpKGEsYixlLGMpO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGdqKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyfWZ1bmN0aW9uIGNqKGEsYixjLGQsZSl7dmFyIGY9WmYoYyk/WGY6SC5jdXJyZW50O2Y9WWYoYixmKTtjaChiLGUpO2M9TmgoYSxiLGMsZCxmLGUpO2Q9U2goKTtpZihudWxsIT09YSYmIWRoKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsWmkoYSxiLGUpO0kmJmQmJnZnKGIpO2IuZmxhZ3N8PTE7WGkoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBoaihhLGIsYyxkLGUpe2lmKFpmKGMpKXt2YXIgZj0hMDtjZyhiKX1lbHNlIGY9ITE7Y2goYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpaWooYSxiKSxHaShiLGMsZCksSWkoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9ZWgobCk6KGw9WmYoYyk/WGY6SC5jdXJyZW50LGw9WWYoYixsKSk7dmFyIG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMscT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7cXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fFxuKGghPT1kfHxrIT09bCkmJkhpKGIsZyxkLGwpO2poPSExO3ZhciByPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXI7cWgoYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHIhPT1rfHxXZi5jdXJyZW50fHxqaD8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihEaShiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9amh8fEZpKGIsYyxoLGQscixrLGwpKT8ocXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpKTpcbihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCksZD0hMSl9ZWxzZXtnPWIuc3RhdGVOb2RlO2xoKGEsYik7aD1iLm1lbW9pemVkUHJvcHM7bD1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6Q2koYi50eXBlLGgpO2cucHJvcHM9bDtxPWIucGVuZGluZ1Byb3BzO3I9Zy5jb250ZXh0O2s9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9ZWgoayk6KGs9WmYoYyk/WGY6SC5jdXJyZW50LGs9WWYoYixrKSk7dmFyIHk9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KG09XCJmdW5jdGlvblwiPT09dHlwZW9mIHl8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1xfHxyIT09aykmJkhpKGIsZyxkLGspO2poPSExO3I9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cjtxaChiLGQsZyxlKTt2YXIgbj1iLm1lbW9pemVkU3RhdGU7aCE9PXF8fHIhPT1ufHxXZi5jdXJyZW50fHxqaD8oXCJmdW5jdGlvblwiPT09dHlwZW9mIHkmJihEaShiLGMseSxkKSxuPWIubWVtb2l6ZWRTdGF0ZSksKGw9amh8fEZpKGIsYyxsLGQscixuLGspfHwhMSk/KG18fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsbixrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXG5nLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQsbixrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0xMDI0KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MTAyNCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPW4pLGcucHJvcHM9ZCxnLnN0YXRlPW4sZy5jb250ZXh0PWssZD1sKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09XG5hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGQ9ITEpfXJldHVybiBqaihhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBqaihhLGIsYyxkLGUsZil7Z2ooYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmMTI4KTtpZighZCYmIWcpcmV0dXJuIGUmJmRnKGIsYywhMSksWmkoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7V2kuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5mbGFnc3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1VZyhiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPVVnKGIsbnVsbCxoLGYpKTpYaShhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZkZyhiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGtqKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/YWcoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmYWcoYSxiLmNvbnRleHQsITEpO3loKGEsYi5jb250YWluZXJJbmZvKX1cbmZ1bmN0aW9uIGxqKGEsYixjLGQsZSl7SWcoKTtKZyhlKTtiLmZsYWdzfD0yNTY7WGkoYSxiLGMsZCk7cmV0dXJuIGIuY2hpbGR9dmFyIG1qPXtkZWh5ZHJhdGVkOm51bGwsdHJlZUNvbnRleHQ6bnVsbCxyZXRyeUxhbmU6MH07ZnVuY3Rpb24gbmooYSl7cmV0dXJue2Jhc2VMYW5lczphLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9fVxuZnVuY3Rpb24gb2ooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9TC5jdXJyZW50LGY9ITEsZz0wIT09KGIuZmxhZ3MmMTI4KSxoOyhoPWcpfHwoaD1udWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZT8hMTowIT09KGUmMikpO2lmKGgpZj0hMCxiLmZsYWdzJj0tMTI5O2Vsc2UgaWYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpZXw9MTtHKEwsZSYxKTtpZihudWxsPT09YSl7RWcoYik7YT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJihhPWEuZGVoeWRyYXRlZCxudWxsIT09YSkpcmV0dXJuIDA9PT0oYi5tb2RlJjEpP2IubGFuZXM9MTpcIiQhXCI9PT1hLmRhdGE/Yi5sYW5lcz04OmIubGFuZXM9MTA3Mzc0MTgyNCxudWxsO2c9ZC5jaGlsZHJlbjthPWQuZmFsbGJhY2s7cmV0dXJuIGY/KGQ9Yi5tb2RlLGY9Yi5jaGlsZCxnPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Z30sMD09PShkJjEpJiZudWxsIT09Zj8oZi5jaGlsZExhbmVzPTAsZi5wZW5kaW5nUHJvcHM9XG5nKTpmPXBqKGcsZCwwLG51bGwpLGE9VGcoYSxkLGMsbnVsbCksZi5yZXR1cm49YixhLnJldHVybj1iLGYuc2libGluZz1hLGIuY2hpbGQ9ZixiLmNoaWxkLm1lbW9pemVkU3RhdGU9bmooYyksYi5tZW1vaXplZFN0YXRlPW1qLGEpOnFqKGIsZyl9ZT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUmJihoPWUuZGVoeWRyYXRlZCxudWxsIT09aCkpcmV0dXJuIHJqKGEsYixnLGQsaCxlLGMpO2lmKGYpe2Y9ZC5mYWxsYmFjaztnPWIubW9kZTtlPWEuY2hpbGQ7aD1lLnNpYmxpbmc7dmFyIGs9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpkLmNoaWxkcmVufTswPT09KGcmMSkmJmIuY2hpbGQhPT1lPyhkPWIuY2hpbGQsZC5jaGlsZExhbmVzPTAsZC5wZW5kaW5nUHJvcHM9ayxiLmRlbGV0aW9ucz1udWxsKTooZD1QZyhlLGspLGQuc3VidHJlZUZsYWdzPWUuc3VidHJlZUZsYWdzJjE0NjgwMDY0KTtudWxsIT09aD9mPVBnKGgsZik6KGY9VGcoZixnLGMsbnVsbCksZi5mbGFnc3w9Mik7Zi5yZXR1cm49XG5iO2QucmV0dXJuPWI7ZC5zaWJsaW5nPWY7Yi5jaGlsZD1kO2Q9ZjtmPWIuY2hpbGQ7Zz1hLmNoaWxkLm1lbW9pemVkU3RhdGU7Zz1udWxsPT09Zz9uaihjKTp7YmFzZUxhbmVzOmcuYmFzZUxhbmVzfGMsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6Zy50cmFuc2l0aW9uc307Zi5tZW1vaXplZFN0YXRlPWc7Zi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YztiLm1lbW9pemVkU3RhdGU9bWo7cmV0dXJuIGR9Zj1hLmNoaWxkO2E9Zi5zaWJsaW5nO2Q9UGcoZix7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpkLmNoaWxkcmVufSk7MD09PShiLm1vZGUmMSkmJihkLmxhbmVzPWMpO2QucmV0dXJuPWI7ZC5zaWJsaW5nPW51bGw7bnVsbCE9PWEmJihjPWIuZGVsZXRpb25zLG51bGw9PT1jPyhiLmRlbGV0aW9ucz1bYV0sYi5mbGFnc3w9MTYpOmMucHVzaChhKSk7Yi5jaGlsZD1kO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBkfVxuZnVuY3Rpb24gcWooYSxiKXtiPXBqKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmJ9LGEubW9kZSwwLG51bGwpO2IucmV0dXJuPWE7cmV0dXJuIGEuY2hpbGQ9Yn1mdW5jdGlvbiBzaihhLGIsYyxkKXtudWxsIT09ZCYmSmcoZCk7VWcoYixhLmNoaWxkLG51bGwsYyk7YT1xaihiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuKTthLmZsYWdzfD0yO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBhfVxuZnVuY3Rpb24gcmooYSxiLGMsZCxlLGYsZyl7aWYoYyl7aWYoYi5mbGFncyYyNTYpcmV0dXJuIGIuZmxhZ3MmPS0yNTcsZD1LaShFcnJvcihwKDQyMikpKSxzaihhLGIsZyxkKTtpZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXJldHVybiBiLmNoaWxkPWEuY2hpbGQsYi5mbGFnc3w9MTI4LG51bGw7Zj1kLmZhbGxiYWNrO2U9Yi5tb2RlO2Q9cGooe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn0sZSwwLG51bGwpO2Y9VGcoZixlLGcsbnVsbCk7Zi5mbGFnc3w9MjtkLnJldHVybj1iO2YucmV0dXJuPWI7ZC5zaWJsaW5nPWY7Yi5jaGlsZD1kOzAhPT0oYi5tb2RlJjEpJiZVZyhiLGEuY2hpbGQsbnVsbCxnKTtiLmNoaWxkLm1lbW9pemVkU3RhdGU9bmooZyk7Yi5tZW1vaXplZFN0YXRlPW1qO3JldHVybiBmfWlmKDA9PT0oYi5tb2RlJjEpKXJldHVybiBzaihhLGIsZyxudWxsKTtpZihcIiQhXCI9PT1lLmRhdGEpe2Q9ZS5uZXh0U2libGluZyYmZS5uZXh0U2libGluZy5kYXRhc2V0O1xuaWYoZCl2YXIgaD1kLmRnc3Q7ZD1oO2Y9RXJyb3IocCg0MTkpKTtkPUtpKGYsZCx2b2lkIDApO3JldHVybiBzaihhLGIsZyxkKX1oPTAhPT0oZyZhLmNoaWxkTGFuZXMpO2lmKGRofHxoKXtkPVE7aWYobnVsbCE9PWQpe3N3aXRjaChnJi1nKXtjYXNlIDQ6ZT0yO2JyZWFrO2Nhc2UgMTY6ZT04O2JyZWFrO2Nhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDplPTMyO2JyZWFrO2Nhc2UgNTM2ODcwOTEyOmU9MjY4NDM1NDU2O2JyZWFrO2RlZmF1bHQ6ZT0wfWU9MCE9PShlJihkLnN1c3BlbmRlZExhbmVzfGcpKT8wOmU7XG4wIT09ZSYmZSE9PWYucmV0cnlMYW5lJiYoZi5yZXRyeUxhbmU9ZSxpaChhLGUpLGdpKGQsYSxlLC0xKSl9dGooKTtkPUtpKEVycm9yKHAoNDIxKSkpO3JldHVybiBzaihhLGIsZyxkKX1pZihcIiQ/XCI9PT1lLmRhdGEpcmV0dXJuIGIuZmxhZ3N8PTEyOCxiLmNoaWxkPWEuY2hpbGQsYj11ai5iaW5kKG51bGwsYSksZS5fcmVhY3RSZXRyeT1iLG51bGw7YT1mLnRyZWVDb250ZXh0O3lnPUxmKGUubmV4dFNpYmxpbmcpO3hnPWI7ST0hMDt6Zz1udWxsO251bGwhPT1hJiYob2dbcGcrK109cmcsb2dbcGcrK109c2csb2dbcGcrK109cWcscmc9YS5pZCxzZz1hLm92ZXJmbG93LHFnPWIpO2I9cWooYixkLmNoaWxkcmVuKTtiLmZsYWdzfD00MDk2O3JldHVybiBifWZ1bmN0aW9uIHZqKGEsYixjKXthLmxhbmVzfD1iO3ZhciBkPWEuYWx0ZXJuYXRlO251bGwhPT1kJiYoZC5sYW5lc3w9Yik7YmgoYS5yZXR1cm4sYixjKX1cbmZ1bmN0aW9uIHdqKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFN0YXRlO251bGw9PT1mP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmV9OihmLmlzQmFja3dhcmRzPWIsZi5yZW5kZXJpbmc9bnVsbCxmLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGYubGFzdD1kLGYudGFpbD1jLGYudGFpbE1vZGU9ZSl9XG5mdW5jdGlvbiB4aihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO1hpKGEsYixkLmNoaWxkcmVuLGMpO2Q9TC5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZmxhZ3N8PTEyODtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJnZqKGEsYyxiKTtlbHNlIGlmKDE5PT09YS50YWcpdmooYSxjLGIpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1HKEwsZCk7aWYoMD09PShiLm1vZGUmMSkpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PUNoKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7d2ooYiwhMSxlLGMsZik7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1DaChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9d2ooYiwhMCxjLG51bGwsZik7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6d2ooYiwhMSxudWxsLG51bGwsdm9pZCAwKTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWooYSxiKXswPT09KGIubW9kZSYxKSYmbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mil9ZnVuY3Rpb24gWmkoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO3JofD1iLmxhbmVzO2lmKDA9PT0oYyZiLmNoaWxkTGFuZXMpKXJldHVybiBudWxsO2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcihwKDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1QZyhhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9UGcoYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHlqKGEsYixjKXtzd2l0Y2goYi50YWcpe2Nhc2UgMzpraihiKTtJZygpO2JyZWFrO2Nhc2UgNTpBaChiKTticmVhaztjYXNlIDE6WmYoYi50eXBlKSYmY2coYik7YnJlYWs7Y2FzZSA0OnloKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDp2YXIgZD1iLnR5cGUuX2NvbnRleHQsZT1iLm1lbW9pemVkUHJvcHMudmFsdWU7RyhXZyxkLl9jdXJyZW50VmFsdWUpO2QuX2N1cnJlbnRWYWx1ZT1lO2JyZWFrO2Nhc2UgMTM6ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQpe2lmKG51bGwhPT1kLmRlaHlkcmF0ZWQpcmV0dXJuIEcoTCxMLmN1cnJlbnQmMSksYi5mbGFnc3w9MTI4LG51bGw7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIG9qKGEsYixjKTtHKEwsTC5jdXJyZW50JjEpO2E9WmkoYSxiLGMpO3JldHVybiBudWxsIT09YT9hLnNpYmxpbmc6bnVsbH1HKEwsTC5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD0wIT09KGMmXG5iLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyYxMjgpKXtpZihkKXJldHVybiB4aihhLGIsYyk7Yi5mbGFnc3w9MTI4fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCk7RyhMLEwuY3VycmVudCk7aWYoZClicmVhaztlbHNlIHJldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gYi5sYW5lcz0wLGRqKGEsYixjKX1yZXR1cm4gWmkoYSxiLGMpfXZhciB6aixBaixCaixDajtcbnpqPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtBaj1mdW5jdGlvbigpe307XG5Caj1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7eGgodWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplPUEoe30sZSx7dmFsdWU6dm9pZCAwfSk7ZD1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZT1nYihhLGUpO2Q9Z2IoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGUub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1CZil9dWIoYyxkKTt2YXIgZztjPW51bGw7Zm9yKGwgaW4gZSlpZighZC5oYXNPd25Qcm9wZXJ0eShsKSYmZS5oYXNPd25Qcm9wZXJ0eShsKSYmbnVsbCE9ZVtsXSlpZihcInN0eWxlXCI9PT1sKXt2YXIgaD1lW2xdO2ZvcihnIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShnKSYmXG4oY3x8KGM9e30pLGNbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwmJlwiY2hpbGRyZW5cIiE9PWwmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihlYS5oYXNPd25Qcm9wZXJ0eShsKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2gobCxudWxsKSk7Zm9yKGwgaW4gZCl7dmFyIGs9ZFtsXTtoPW51bGwhPWU/ZVtsXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShsKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1sKWlmKGgpe2ZvcihnIGluIGgpIWguaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChjfHwoYz17fSksY1tnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmhbZ10hPT1rW2ddJiYoY3x8KGM9e30pLGNbZ109a1tnXSl9ZWxzZSBjfHwoZnx8KGY9W10pLGYucHVzaChsLFxuYykpLGM9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChsLGspKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChsLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiYoZWEuaGFzT3duUHJvcGVydHkobCk/KG51bGwhPWsmJlwib25TY3JvbGxcIj09PWwmJkQoXCJzY3JvbGxcIixhKSxmfHxoPT09a3x8KGY9W10pKTooZj1mfHxbXSkucHVzaChsLGspKX1jJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0NqPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O1xuZnVuY3Rpb24gRGooYSxiKXtpZighSSlzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gUyhhKXt2YXIgYj1udWxsIT09YS5hbHRlcm5hdGUmJmEuYWx0ZXJuYXRlLmNoaWxkPT09YS5jaGlsZCxjPTAsZD0wO2lmKGIpZm9yKHZhciBlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzJjE0NjgwMDY0LGR8PWUuZmxhZ3MmMTQ2ODAwNjQsZS5yZXR1cm49YSxlPWUuc2libGluZztlbHNlIGZvcihlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzLGR8PWUuZmxhZ3MsZS5yZXR1cm49YSxlPWUuc2libGluZzthLnN1YnRyZWVGbGFnc3w9ZDthLmNoaWxkTGFuZXM9YztyZXR1cm4gYn1cbmZ1bmN0aW9uIEVqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wczt3ZyhiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBTKGIpLG51bGw7Y2FzZSAxOnJldHVybiBaZihiLnR5cGUpJiYkZigpLFMoYiksbnVsbDtjYXNlIDM6ZD1iLnN0YXRlTm9kZTt6aCgpO0UoV2YpO0UoSCk7RWgoKTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpR2coYik/Yi5mbGFnc3w9NDpudWxsPT09YXx8YS5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCYmMD09PShiLmZsYWdzJjI1Nil8fChiLmZsYWdzfD0xMDI0LG51bGwhPT16ZyYmKEZqKHpnKSx6Zz1udWxsKSk7QWooYSxiKTtTKGIpO3JldHVybiBudWxsO2Nhc2UgNTpCaChiKTt2YXIgZT14aCh3aC5jdXJyZW50KTtcbmM9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlCaihhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mik7ZWxzZXtpZighZCl7aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTY2KSk7UyhiKTtyZXR1cm4gbnVsbH1hPXhoKHVoLmN1cnJlbnQpO2lmKEdnKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW09mXT1iO2RbUGZdPWY7YT0wIT09KGIubW9kZSYxKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkQoXCJjYW5jZWxcIixkKTtEKFwiY2xvc2VcIixkKTticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkQoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPGxmLmxlbmd0aDtlKyspRChsZltlXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RChcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RChcImVycm9yXCIsXG5kKTtEKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RChcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RChcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0QoXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoZCxmKSxEKFwiaW52YWxpZFwiLGQpfXViKGMsZik7ZT1udWxsO2Zvcih2YXIgZyBpbiBmKWlmKGYuaGFzT3duUHJvcGVydHkoZykpe3ZhciBoPWZbZ107XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGg/ZC50ZXh0Q29udGVudCE9PWgmJighMCE9PWYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLnRleHRDb250ZW50LGgsYSksZT1bXCJjaGlsZHJlblwiLGhdKTpcIm51bWJlclwiPT09dHlwZW9mIGgmJmQudGV4dENvbnRlbnQhPT1cIlwiK2gmJighMCE9PWYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLnRleHRDb250ZW50LFxuaCxhKSxlPVtcImNoaWxkcmVuXCIsXCJcIitoXSk6ZWEuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWgmJlwib25TY3JvbGxcIj09PWcmJkQoXCJzY3JvbGxcIixkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoZCk7ZGIoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShkKTtqYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGQub25jbGljaz1CZil9ZD1lO2IudXBkYXRlUXVldWU9ZDtudWxsIT09ZCYmKGIuZmxhZ3N8PTQpfWVsc2V7Zz05PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudDtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWEmJihhPWtiKGMpKTtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/XCJzY3JpcHRcIj09PWM/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlxuXCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2FbT2ZdPWI7YVtQZl09ZDt6aihhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7YTp7Zz12YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RChcImNhbmNlbFwiLGEpO0QoXCJjbG9zZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkQoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxsZi5sZW5ndGg7ZSsrKUQobGZbZV0sYSk7ZT1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpEKFwiZXJyb3JcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RChcImVycm9yXCIsXG5hKTtEKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkQoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RChcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1kO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPWdiKGEsZCk7RChcImludmFsaWRcIixhKTticmVhaztkZWZhdWx0OmU9ZH11YihjLGUpO2g9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj9zYihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmbmIoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PVxuY3x8XCJcIiE9PWspJiZvYihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmb2IoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJihlYS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1mJiZEKFwic2Nyb2xsXCIsYSk6bnVsbCE9ayYmdGEoYSxmLGssZykpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShhKTtkYihhLGQsITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSxcbiEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLm9uQ2xpY2smJihhLm9uY2xpY2s9QmYpfXN3aXRjaChjKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOmQ9ISFkLmF1dG9Gb2N1czticmVhayBhO2Nhc2UgXCJpbWdcIjpkPSEwO2JyZWFrIGE7ZGVmYXVsdDpkPSExfX1kJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTIpfVMoYik7cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKUNqKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2NikpO2M9eGgod2guY3VycmVudCk7eGgodWguY3VycmVudCk7aWYoR2coYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLm1lbW9pemVkUHJvcHM7ZFtPZl09YjtpZihmPWQubm9kZVZhbHVlIT09YylpZihhPVxueGcsbnVsbCE9PWEpc3dpdGNoKGEudGFnKXtjYXNlIDM6QWYoZC5ub2RlVmFsdWUsYywwIT09KGEubW9kZSYxKSk7YnJlYWs7Y2FzZSA1OiEwIT09YS5tZW1vaXplZFByb3BzLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC5ub2RlVmFsdWUsYywwIT09KGEubW9kZSYxKSl9ZiYmKGIuZmxhZ3N8PTQpfWVsc2UgZD0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGRbT2ZdPWIsYi5zdGF0ZU5vZGU9ZH1TKGIpO3JldHVybiBudWxsO2Nhc2UgMTM6RShMKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKXtpZihJJiZudWxsIT09eWcmJjAhPT0oYi5tb2RlJjEpJiYwPT09KGIuZmxhZ3MmMTI4KSlIZygpLElnKCksYi5mbGFnc3w9OTg1NjAsZj0hMTtlbHNlIGlmKGY9R2coYiksbnVsbCE9PWQmJm51bGwhPT1kLmRlaHlkcmF0ZWQpe2lmKG51bGw9PT1cbmEpe2lmKCFmKXRocm93IEVycm9yKHAoMzE4KSk7Zj1iLm1lbW9pemVkU3RhdGU7Zj1udWxsIT09Zj9mLmRlaHlkcmF0ZWQ6bnVsbDtpZighZil0aHJvdyBFcnJvcihwKDMxNykpO2ZbT2ZdPWJ9ZWxzZSBJZygpLDA9PT0oYi5mbGFncyYxMjgpJiYoYi5tZW1vaXplZFN0YXRlPW51bGwpLGIuZmxhZ3N8PTQ7UyhiKTtmPSExfWVsc2UgbnVsbCE9PXpnJiYoRmooemcpLHpnPW51bGwpLGY9ITA7aWYoIWYpcmV0dXJuIGIuZmxhZ3MmNjU1MzY/YjpudWxsfWlmKDAhPT0oYi5mbGFncyYxMjgpKXJldHVybiBiLmxhbmVzPWMsYjtkPW51bGwhPT1kO2QhPT0obnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUpJiZkJiYoYi5jaGlsZC5mbGFnc3w9ODE5MiwwIT09KGIubW9kZSYxKSYmKG51bGw9PT1hfHwwIT09KEwuY3VycmVudCYxKT8wPT09VCYmKFQ9Myk6dGooKSkpO251bGwhPT1iLnVwZGF0ZVF1ZXVlJiYoYi5mbGFnc3w9NCk7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIHpoKCksXG5BaihhLGIpLG51bGw9PT1hJiZzZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxTKGIpLG51bGw7Y2FzZSAxMDpyZXR1cm4gYWgoYi50eXBlLl9jb250ZXh0KSxTKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxTKGIpLG51bGw7Y2FzZSAxOTpFKEwpO2Y9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1mKXJldHVybiBTKGIpLG51bGw7ZD0wIT09KGIuZmxhZ3MmMTI4KTtnPWYucmVuZGVyaW5nO2lmKG51bGw9PT1nKWlmKGQpRGooZiwhMSk7ZWxzZXtpZigwIT09VHx8bnVsbCE9PWEmJjAhPT0oYS5mbGFncyYxMjgpKWZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtnPUNoKGEpO2lmKG51bGwhPT1nKXtiLmZsYWdzfD0xMjg7RGooZiwhMSk7ZD1nLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYoYi51cGRhdGVRdWV1ZT1kLGIuZmxhZ3N8PTQpO2Iuc3VidHJlZUZsYWdzPTA7ZD1jO2ZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KWY9YyxhPWQsZi5mbGFncyY9MTQ2ODAwNjYsXG5nPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYuc3VidHJlZUZsYWdzPTAsZi5tZW1vaXplZFByb3BzPW51bGwsZi5tZW1vaXplZFN0YXRlPW51bGwsZi51cGRhdGVRdWV1ZT1udWxsLGYuZGVwZW5kZW5jaWVzPW51bGwsZi5zdGF0ZU5vZGU9bnVsbCk6KGYuY2hpbGRMYW5lcz1nLmNoaWxkTGFuZXMsZi5sYW5lcz1nLmxhbmVzLGYuY2hpbGQ9Zy5jaGlsZCxmLnN1YnRyZWVGbGFncz0wLGYuZGVsZXRpb25zPW51bGwsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsZi5kZXBlbmRlbmNpZXM9bnVsbD09PWE/bnVsbDp7bGFuZXM6YS5sYW5lcyxmaXJzdENvbnRleHQ6YS5maXJzdENvbnRleHR9KSxjPWMuc2libGluZztHKEwsTC5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9YT1cbmEuc2libGluZ31udWxsIT09Zi50YWlsJiZCKCk+R2omJihiLmZsYWdzfD0xMjgsZD0hMCxEaihmLCExKSxiLmxhbmVzPTQxOTQzMDQpfWVsc2V7aWYoIWQpaWYoYT1DaChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9MTI4LGQ9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZmxhZ3N8PTQpLERqKGYsITApLG51bGw9PT1mLnRhaWwmJlwiaGlkZGVuXCI9PT1mLnRhaWxNb2RlJiYhZy5hbHRlcm5hdGUmJiFJKXJldHVybiBTKGIpLG51bGx9ZWxzZSAyKkIoKS1mLnJlbmRlcmluZ1N0YXJ0VGltZT5HaiYmMTA3Mzc0MTgyNCE9PWMmJihiLmZsYWdzfD0xMjgsZD0hMCxEaihmLCExKSxiLmxhbmVzPTQxOTQzMDQpO2YuaXNCYWNrd2FyZHM/KGcuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zyk6KGM9Zi5sYXN0LG51bGwhPT1jP2Muc2libGluZz1nOmIuY2hpbGQ9ZyxmLmxhc3Q9Zyl9aWYobnVsbCE9PWYudGFpbClyZXR1cm4gYj1mLnRhaWwsZi5yZW5kZXJpbmc9XG5iLGYudGFpbD1iLnNpYmxpbmcsZi5yZW5kZXJpbmdTdGFydFRpbWU9QigpLGIuc2libGluZz1udWxsLGM9TC5jdXJyZW50LEcoTCxkP2MmMXwyOmMmMSksYjtTKGIpO3JldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gSGooKSxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGUsbnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUhPT1kJiYoYi5mbGFnc3w9ODE5MiksZCYmMCE9PShiLm1vZGUmMSk/MCE9PShmaiYxMDczNzQxODI0KSYmKFMoYiksYi5zdWJ0cmVlRmxhZ3MmNiYmKGIuZmxhZ3N8PTgxOTIpKTpTKGIpLG51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtjYXNlIDI1OnJldHVybiBudWxsfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fVxuZnVuY3Rpb24gSWooYSxiKXt3ZyhiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMTpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxhPWIuZmxhZ3MsYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDM6cmV0dXJuIHpoKCksRShXZiksRShIKSxFaCgpLGE9Yi5mbGFncywwIT09KGEmNjU1MzYpJiYwPT09KGEmMTI4KT8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDU6cmV0dXJuIEJoKGIpLG51bGw7Y2FzZSAxMzpFKEwpO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXtpZihudWxsPT09Yi5hbHRlcm5hdGUpdGhyb3cgRXJyb3IocCgzNDApKTtJZygpfWE9Yi5mbGFncztyZXR1cm4gYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDE5OnJldHVybiBFKEwpLG51bGw7Y2FzZSA0OnJldHVybiB6aCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gYWgoYi50eXBlLl9jb250ZXh0KSxudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gSGooKSxcbm51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX12YXIgSmo9ITEsVT0hMSxLaj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldCxWPW51bGw7ZnVuY3Rpb24gTGooYSxiKXt2YXIgYz1hLnJlZjtpZihudWxsIT09YylpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYyl0cnl7YyhudWxsKX1jYXRjaChkKXtXKGEsYixkKX1lbHNlIGMuY3VycmVudD1udWxsfWZ1bmN0aW9uIE1qKGEsYixjKXt0cnl7YygpfWNhdGNoKGQpe1coYSxiLGQpfX12YXIgTmo9ITE7XG5mdW5jdGlvbiBPaihhLGIpe0NmPWRkO2E9TWUoKTtpZihOZShhKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gYSl2YXIgYz17c3RhcnQ6YS5zZWxlY3Rpb25TdGFydCxlbmQ6YS5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7Yz0oYz1hLm93bmVyRG9jdW1lbnQpJiZjLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGQ9Yy5nZXRTZWxlY3Rpb24mJmMuZ2V0U2VsZWN0aW9uKCk7aWYoZCYmMCE9PWQucmFuZ2VDb3VudCl7Yz1kLmFuY2hvck5vZGU7dmFyIGU9ZC5hbmNob3JPZmZzZXQsZj1kLmZvY3VzTm9kZTtkPWQuZm9jdXNPZmZzZXQ7dHJ5e2Mubm9kZVR5cGUsZi5ub2RlVHlwZX1jYXRjaChGKXtjPW51bGw7YnJlYWsgYX12YXIgZz0wLGg9LTEsaz0tMSxsPTAsbT0wLHE9YSxyPW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgeTs7KXtxIT09Y3x8MCE9PWUmJjMhPT1xLm5vZGVUeXBlfHwoaD1nK2UpO3EhPT1mfHwwIT09ZCYmMyE9PXEubm9kZVR5cGV8fChrPWcrZCk7Mz09PXEubm9kZVR5cGUmJihnKz1cbnEubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh5PXEuZmlyc3RDaGlsZCkpYnJlYWs7cj1xO3E9eX1mb3IoOzspe2lmKHE9PT1hKWJyZWFrIGI7cj09PWMmJisrbD09PWUmJihoPWcpO3I9PT1mJiYrK209PT1kJiYoaz1nKTtpZihudWxsIT09KHk9cS5uZXh0U2libGluZykpYnJlYWs7cT1yO3I9cS5wYXJlbnROb2RlfXE9eX1jPS0xPT09aHx8LTE9PT1rP251bGw6e3N0YXJ0OmgsZW5kOmt9fWVsc2UgYz1udWxsfWM9Y3x8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgYz1udWxsO0RmPXtmb2N1c2VkRWxlbTphLHNlbGVjdGlvblJhbmdlOmN9O2RkPSExO2ZvcihWPWI7bnVsbCE9PVY7KWlmKGI9VixhPWIuY2hpbGQsMCE9PShiLnN1YnRyZWVGbGFncyYxMDI4KSYmbnVsbCE9PWEpYS5yZXR1cm49YixWPWE7ZWxzZSBmb3IoO251bGwhPT1WOyl7Yj1WO3RyeXt2YXIgbj1iLmFsdGVybmF0ZTtpZigwIT09KGIuZmxhZ3MmMTAyNCkpc3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmJyZWFrO1xuY2FzZSAxOmlmKG51bGwhPT1uKXt2YXIgdD1uLm1lbW9pemVkUHJvcHMsSj1uLm1lbW9pemVkU3RhdGUseD1iLnN0YXRlTm9kZSx3PXguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT90OkNpKGIudHlwZSx0KSxKKTt4Ll9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPXd9YnJlYWs7Y2FzZSAzOnZhciB1PWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87MT09PXUubm9kZVR5cGU/dS50ZXh0Q29udGVudD1cIlwiOjk9PT11Lm5vZGVUeXBlJiZ1LmRvY3VtZW50RWxlbWVudCYmdS5yZW1vdmVDaGlsZCh1LmRvY3VtZW50RWxlbWVudCk7YnJlYWs7Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpicmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMTYzKSk7fX1jYXRjaChGKXtXKGIsYi5yZXR1cm4sRil9YT1iLnNpYmxpbmc7aWYobnVsbCE9PWEpe2EucmV0dXJuPWIucmV0dXJuO1Y9YTticmVha31WPWIucmV0dXJufW49Tmo7Tmo9ITE7cmV0dXJuIG59XG5mdW5jdGlvbiBQaihhLGIsYyl7dmFyIGQ9Yi51cGRhdGVRdWV1ZTtkPW51bGwhPT1kP2QubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1kKXt2YXIgZT1kPWQubmV4dDtkb3tpZigoZS50YWcmYSk9PT1hKXt2YXIgZj1lLmRlc3Ryb3k7ZS5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1mJiZNaihiLGMsZil9ZT1lLm5leHR9d2hpbGUoZSE9PWQpfX1mdW5jdGlvbiBRaihhLGIpe2I9Yi51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXt2YXIgYz1iPWIubmV4dDtkb3tpZigoYy50YWcmYSk9PT1hKXt2YXIgZD1jLmNyZWF0ZTtjLmRlc3Ryb3k9ZCgpfWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX19ZnVuY3Rpb24gUmooYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpe3ZhciBjPWEuc3RhdGVOb2RlO3N3aXRjaChhLnRhZyl7Y2FzZSA1OmE9YzticmVhaztkZWZhdWx0OmE9Y31cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmIuY3VycmVudD1hfX1cbmZ1bmN0aW9uIFNqKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO251bGwhPT1iJiYoYS5hbHRlcm5hdGU9bnVsbCxTaihiKSk7YS5jaGlsZD1udWxsO2EuZGVsZXRpb25zPW51bGw7YS5zaWJsaW5nPW51bGw7NT09PWEudGFnJiYoYj1hLnN0YXRlTm9kZSxudWxsIT09YiYmKGRlbGV0ZSBiW09mXSxkZWxldGUgYltQZl0sZGVsZXRlIGJbb2ZdLGRlbGV0ZSBiW1FmXSxkZWxldGUgYltSZl0pKTthLnN0YXRlTm9kZT1udWxsO2EucmV0dXJuPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2Euc3RhdGVOb2RlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIFRqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gVWooYSl7YTpmb3IoOzspe2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8VGooYS5yZXR1cm4pKXJldHVybiBudWxsO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjtmb3IoYT1hLnNpYmxpbmc7NSE9PWEudGFnJiY2IT09YS50YWcmJjE4IT09YS50YWc7KXtpZihhLmZsYWdzJjIpY29udGludWUgYTtpZihudWxsPT09YS5jaGlsZHx8ND09PWEudGFnKWNvbnRpbnVlIGE7ZWxzZSBhLmNoaWxkLnJldHVybj1hLGE9YS5jaGlsZH1pZighKGEuZmxhZ3MmMikpcmV0dXJuIGEuc3RhdGVOb2RlfX1cbmZ1bmN0aW9uIFZqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1CZikpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihWaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVZqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIFdqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoV2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylXaihhLGIsYyksYT1hLnNpYmxpbmd9dmFyIFg9bnVsbCxYaj0hMTtmdW5jdGlvbiBZaihhLGIsYyl7Zm9yKGM9Yy5jaGlsZDtudWxsIT09YzspWmooYSxiLGMpLGM9Yy5zaWJsaW5nfVxuZnVuY3Rpb24gWmooYSxiLGMpe2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Db21taXRGaWJlclVubW91bnQpdHJ5e2xjLm9uQ29tbWl0RmliZXJVbm1vdW50KGtjLGMpfWNhdGNoKGgpe31zd2l0Y2goYy50YWcpe2Nhc2UgNTpVfHxMaihjLGIpO2Nhc2UgNjp2YXIgZD1YLGU9WGo7WD1udWxsO1lqKGEsYixjKTtYPWQ7WGo9ZTtudWxsIT09WCYmKFhqPyhhPVgsYz1jLnN0YXRlTm9kZSw4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYyk6YS5yZW1vdmVDaGlsZChjKSk6WC5yZW1vdmVDaGlsZChjLnN0YXRlTm9kZSkpO2JyZWFrO2Nhc2UgMTg6bnVsbCE9PVgmJihYaj8oYT1YLGM9Yy5zdGF0ZU5vZGUsOD09PWEubm9kZVR5cGU/S2YoYS5wYXJlbnROb2RlLGMpOjE9PT1hLm5vZGVUeXBlJiZLZihhLGMpLGJkKGEpKTpLZihYLGMuc3RhdGVOb2RlKSk7YnJlYWs7Y2FzZSA0OmQ9WDtlPVhqO1g9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztYaj0hMDtcbllqKGEsYixjKTtYPWQ7WGo9ZTticmVhaztjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6aWYoIVUmJihkPWMudXBkYXRlUXVldWUsbnVsbCE9PWQmJihkPWQubGFzdEVmZmVjdCxudWxsIT09ZCkpKXtlPWQ9ZC5uZXh0O2Rve3ZhciBmPWUsZz1mLmRlc3Ryb3k7Zj1mLnRhZzt2b2lkIDAhPT1nJiYoMCE9PShmJjIpP01qKGMsYixnKTowIT09KGYmNCkmJk1qKGMsYixnKSk7ZT1lLm5leHR9d2hpbGUoZSE9PWQpfVlqKGEsYixjKTticmVhaztjYXNlIDE6aWYoIVUmJihMaihjLGIpLGQ9Yy5zdGF0ZU5vZGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFVubW91bnQpKXRyeXtkLnByb3BzPWMubWVtb2l6ZWRQcm9wcyxkLnN0YXRlPWMubWVtb2l6ZWRTdGF0ZSxkLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goaCl7VyhjLGIsaCl9WWooYSxiLGMpO2JyZWFrO2Nhc2UgMjE6WWooYSxiLGMpO2JyZWFrO2Nhc2UgMjI6Yy5tb2RlJjE/KFU9KGQ9VSl8fG51bGwhPT1cbmMubWVtb2l6ZWRTdGF0ZSxZaihhLGIsYyksVT1kKTpZaihhLGIsYyk7YnJlYWs7ZGVmYXVsdDpZaihhLGIsYyl9fWZ1bmN0aW9uIGFrKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IEtqKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9YmsuYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG5mdW5jdGlvbiBjayhhLGIpe3ZhciBjPWIuZGVsZXRpb25zO2lmKG51bGwhPT1jKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdO3RyeXt2YXIgZj1hLGc9YixoPWc7YTpmb3IoO251bGwhPT1oOyl7c3dpdGNoKGgudGFnKXtjYXNlIDU6WD1oLnN0YXRlTm9kZTtYaj0hMTticmVhayBhO2Nhc2UgMzpYPWguc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WGo9ITA7YnJlYWsgYTtjYXNlIDQ6WD1oLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1hqPSEwO2JyZWFrIGF9aD1oLnJldHVybn1pZihudWxsPT09WCl0aHJvdyBFcnJvcihwKDE2MCkpO1pqKGYsZyxlKTtYPW51bGw7WGo9ITE7dmFyIGs9ZS5hbHRlcm5hdGU7bnVsbCE9PWsmJihrLnJldHVybj1udWxsKTtlLnJldHVybj1udWxsfWNhdGNoKGwpe1coZSxiLGwpfX1pZihiLnN1YnRyZWVGbGFncyYxMjg1NClmb3IoYj1iLmNoaWxkO251bGwhPT1iOylkayhiLGEpLGI9Yi5zaWJsaW5nfVxuZnVuY3Rpb24gZGsoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZSxkPWEuZmxhZ3M7c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2soYixhKTtlayhhKTtpZihkJjQpe3RyeXtQaigzLGEsYS5yZXR1cm4pLFFqKDMsYSl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfXRyeXtQaig1LGEsYS5yZXR1cm4pfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSAxOmNrKGIsYSk7ZWsoYSk7ZCY1MTImJm51bGwhPT1jJiZMaihjLGMucmV0dXJuKTticmVhaztjYXNlIDU6Y2soYixhKTtlayhhKTtkJjUxMiYmbnVsbCE9PWMmJkxqKGMsYy5yZXR1cm4pO2lmKGEuZmxhZ3MmMzIpe3ZhciBlPWEuc3RhdGVOb2RlO3RyeXtvYihlLFwiXCIpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19aWYoZCY0JiYoZT1hLnN0YXRlTm9kZSxudWxsIT1lKSl7dmFyIGY9YS5tZW1vaXplZFByb3BzLGc9bnVsbCE9PWM/Yy5tZW1vaXplZFByb3BzOmYsaD1hLnR5cGUsaz1hLnVwZGF0ZVF1ZXVlO1xuYS51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1rKXRyeXtcImlucHV0XCI9PT1oJiZcInJhZGlvXCI9PT1mLnR5cGUmJm51bGwhPWYubmFtZSYmYWIoZSxmKTt2YihoLGcpO3ZhciBsPXZiKGgsZik7Zm9yKGc9MDtnPGsubGVuZ3RoO2crPTIpe3ZhciBtPWtbZ10scT1rW2crMV07XCJzdHlsZVwiPT09bT9zYihlLHEpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PW0/bmIoZSxxKTpcImNoaWxkcmVuXCI9PT1tP29iKGUscSk6dGEoZSxtLHEsbCl9c3dpdGNoKGgpe2Nhc2UgXCJpbnB1dFwiOmJiKGUsZik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoZSxmKTticmVhaztjYXNlIFwic2VsZWN0XCI6dmFyIHI9ZS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlO2UuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWYubXVsdGlwbGU7dmFyIHk9Zi52YWx1ZTtudWxsIT15P2ZiKGUsISFmLm11bHRpcGxlLHksITEpOnIhPT0hIWYubXVsdGlwbGUmJihudWxsIT1mLmRlZmF1bHRWYWx1ZT9mYihlLCEhZi5tdWx0aXBsZSxcbmYuZGVmYXVsdFZhbHVlLCEwKTpmYihlLCEhZi5tdWx0aXBsZSxmLm11bHRpcGxlP1tdOlwiXCIsITEpKX1lW1BmXT1mfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSA2OmNrKGIsYSk7ZWsoYSk7aWYoZCY0KXtpZihudWxsPT09YS5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjIpKTtlPWEuc3RhdGVOb2RlO2Y9YS5tZW1vaXplZFByb3BzO3RyeXtlLm5vZGVWYWx1ZT1mfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSAzOmNrKGIsYSk7ZWsoYSk7aWYoZCY0JiZudWxsIT09YyYmYy5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl0cnl7YmQoYi5jb250YWluZXJJbmZvKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9YnJlYWs7Y2FzZSA0OmNrKGIsYSk7ZWsoYSk7YnJlYWs7Y2FzZSAxMzpjayhiLGEpO2VrKGEpO2U9YS5jaGlsZDtlLmZsYWdzJjgxOTImJihmPW51bGwhPT1lLm1lbW9pemVkU3RhdGUsZS5zdGF0ZU5vZGUuaXNIaWRkZW49ZiwhZnx8XG5udWxsIT09ZS5hbHRlcm5hdGUmJm51bGwhPT1lLmFsdGVybmF0ZS5tZW1vaXplZFN0YXRlfHwoZms9QigpKSk7ZCY0JiZhayhhKTticmVhaztjYXNlIDIyOm09bnVsbCE9PWMmJm51bGwhPT1jLm1lbW9pemVkU3RhdGU7YS5tb2RlJjE/KFU9KGw9VSl8fG0sY2soYixhKSxVPWwpOmNrKGIsYSk7ZWsoYSk7aWYoZCY4MTkyKXtsPW51bGwhPT1hLm1lbW9pemVkU3RhdGU7aWYoKGEuc3RhdGVOb2RlLmlzSGlkZGVuPWwpJiYhbSYmMCE9PShhLm1vZGUmMSkpZm9yKFY9YSxtPWEuY2hpbGQ7bnVsbCE9PW07KXtmb3IocT1WPW07bnVsbCE9PVY7KXtyPVY7eT1yLmNoaWxkO3N3aXRjaChyLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OlBqKDQscixyLnJldHVybik7YnJlYWs7Y2FzZSAxOkxqKHIsci5yZXR1cm4pO3ZhciBuPXIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxVbm1vdW50KXtkPXI7Yz1yLnJldHVybjt0cnl7Yj1kLG4ucHJvcHM9XG5iLm1lbW9pemVkUHJvcHMsbi5zdGF0ZT1iLm1lbW9pemVkU3RhdGUsbi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKHQpe1coZCxjLHQpfX1icmVhaztjYXNlIDU6TGoocixyLnJldHVybik7YnJlYWs7Y2FzZSAyMjppZihudWxsIT09ci5tZW1vaXplZFN0YXRlKXtnayhxKTtjb250aW51ZX19bnVsbCE9PXk/KHkucmV0dXJuPXIsVj15KTpnayhxKX1tPW0uc2libGluZ31hOmZvcihtPW51bGwscT1hOzspe2lmKDU9PT1xLnRhZyl7aWYobnVsbD09PW0pe209cTt0cnl7ZT1xLnN0YXRlTm9kZSxsPyhmPWUuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuc2V0UHJvcGVydHk/Zi5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpmLmRpc3BsYXk9XCJub25lXCIpOihoPXEuc3RhdGVOb2RlLGs9cS5tZW1vaXplZFByb3BzLnN0eWxlLGc9dm9pZCAwIT09ayYmbnVsbCE9PWsmJmsuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2suZGlzcGxheTpudWxsLGguc3R5bGUuZGlzcGxheT1cbnJiKFwiZGlzcGxheVwiLGcpKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fX1lbHNlIGlmKDY9PT1xLnRhZyl7aWYobnVsbD09PW0pdHJ5e3Euc3RhdGVOb2RlLm5vZGVWYWx1ZT1sP1wiXCI6cS5tZW1vaXplZFByb3BzfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19ZWxzZSBpZigoMjIhPT1xLnRhZyYmMjMhPT1xLnRhZ3x8bnVsbD09PXEubWVtb2l6ZWRTdGF0ZXx8cT09PWEpJiZudWxsIT09cS5jaGlsZCl7cS5jaGlsZC5yZXR1cm49cTtxPXEuY2hpbGQ7Y29udGludWV9aWYocT09PWEpYnJlYWsgYTtmb3IoO251bGw9PT1xLnNpYmxpbmc7KXtpZihudWxsPT09cS5yZXR1cm58fHEucmV0dXJuPT09YSlicmVhayBhO209PT1xJiYobT1udWxsKTtxPXEucmV0dXJufW09PT1xJiYobT1udWxsKTtxLnNpYmxpbmcucmV0dXJuPXEucmV0dXJuO3E9cS5zaWJsaW5nfX1icmVhaztjYXNlIDE5OmNrKGIsYSk7ZWsoYSk7ZCY0JiZhayhhKTticmVhaztjYXNlIDIxOmJyZWFrO2RlZmF1bHQ6Y2soYixcbmEpLGVrKGEpfX1mdW5jdGlvbiBlayhhKXt2YXIgYj1hLmZsYWdzO2lmKGImMil7dHJ5e2E6e2Zvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKFRqKGMpKXt2YXIgZD1jO2JyZWFrIGF9Yz1jLnJldHVybn10aHJvdyBFcnJvcihwKDE2MCkpO31zd2l0Y2goZC50YWcpe2Nhc2UgNTp2YXIgZT1kLnN0YXRlTm9kZTtkLmZsYWdzJjMyJiYob2IoZSxcIlwiKSxkLmZsYWdzJj0tMzMpO3ZhciBmPVVqKGEpO1dqKGEsZixlKTticmVhaztjYXNlIDM6Y2FzZSA0OnZhciBnPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saD1VaihhKTtWaihhLGgsZyk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MSkpO319Y2F0Y2goayl7VyhhLGEucmV0dXJuLGspfWEuZmxhZ3MmPS0zfWImNDA5NiYmKGEuZmxhZ3MmPS00MDk3KX1mdW5jdGlvbiBoayhhLGIsYyl7Vj1hO2lrKGEsYixjKX1cbmZ1bmN0aW9uIGlrKGEsYixjKXtmb3IodmFyIGQ9MCE9PShhLm1vZGUmMSk7bnVsbCE9PVY7KXt2YXIgZT1WLGY9ZS5jaGlsZDtpZigyMj09PWUudGFnJiZkKXt2YXIgZz1udWxsIT09ZS5tZW1vaXplZFN0YXRlfHxKajtpZighZyl7dmFyIGg9ZS5hbHRlcm5hdGUsaz1udWxsIT09aCYmbnVsbCE9PWgubWVtb2l6ZWRTdGF0ZXx8VTtoPUpqO3ZhciBsPVU7Smo9ZztpZigoVT1rKSYmIWwpZm9yKFY9ZTtudWxsIT09VjspZz1WLGs9Zy5jaGlsZCwyMj09PWcudGFnJiZudWxsIT09Zy5tZW1vaXplZFN0YXRlP2prKGUpOm51bGwhPT1rPyhrLnJldHVybj1nLFY9ayk6amsoZSk7Zm9yKDtudWxsIT09ZjspVj1mLGlrKGYsYixjKSxmPWYuc2libGluZztWPWU7Smo9aDtVPWx9a2soYSxiLGMpfWVsc2UgMCE9PShlLnN1YnRyZWVGbGFncyY4NzcyKSYmbnVsbCE9PWY/KGYucmV0dXJuPWUsVj1mKTprayhhLGIsYyl9fVxuZnVuY3Rpb24ga2soYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXt2YXIgYz1iLmFsdGVybmF0ZTt0cnl7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpVfHxRaig1LGIpO2JyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihiLmZsYWdzJjQmJiFVKWlmKG51bGw9PT1jKWQuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBlPWIuZWxlbWVudFR5cGU9PT1iLnR5cGU/Yy5tZW1vaXplZFByb3BzOkNpKGIudHlwZSxjLm1lbW9pemVkUHJvcHMpO2QuY29tcG9uZW50RGlkVXBkYXRlKGUsYy5tZW1vaXplZFN0YXRlLGQuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBmPWIudXBkYXRlUXVldWU7bnVsbCE9PWYmJnNoKGIsZixkKTticmVhaztjYXNlIDM6dmFyIGc9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09Zyl7Yz1udWxsO2lmKG51bGwhPT1iLmNoaWxkKXN3aXRjaChiLmNoaWxkLnRhZyl7Y2FzZSA1OmM9XG5iLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6Yz1iLmNoaWxkLnN0YXRlTm9kZX1zaChiLGcsYyl9YnJlYWs7Y2FzZSA1OnZhciBoPWIuc3RhdGVOb2RlO2lmKG51bGw9PT1jJiZiLmZsYWdzJjQpe2M9aDt2YXIgaz1iLm1lbW9pemVkUHJvcHM7c3dpdGNoKGIudHlwZSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjprLmF1dG9Gb2N1cyYmYy5mb2N1cygpO2JyZWFrO2Nhc2UgXCJpbWdcIjprLnNyYyYmKGMuc3JjPWsuc3JjKX19YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6aWYobnVsbD09PWIubWVtb2l6ZWRTdGF0ZSl7dmFyIGw9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWwpe3ZhciBtPWwubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09bSl7dmFyIHE9bS5kZWh5ZHJhdGVkO251bGwhPT1xJiZiZChxKX19fWJyZWFrO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIxOmNhc2UgMjI6Y2FzZSAyMzpjYXNlIDI1OmJyZWFrO1xuZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO31VfHxiLmZsYWdzJjUxMiYmUmooYil9Y2F0Y2gocil7VyhiLGIucmV0dXJuLHIpfX1pZihiPT09YSl7Vj1udWxsO2JyZWFrfWM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtWPWM7YnJlYWt9Vj1iLnJldHVybn19ZnVuY3Rpb24gZ2soYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7aWYoYj09PWEpe1Y9bnVsbDticmVha312YXIgYz1iLnNpYmxpbmc7aWYobnVsbCE9PWMpe2MucmV0dXJuPWIucmV0dXJuO1Y9YzticmVha31WPWIucmV0dXJufX1cbmZ1bmN0aW9uIGprKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO3RyeXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6dmFyIGM9Yi5yZXR1cm47dHJ5e1FqKDQsYil9Y2F0Y2goayl7VyhiLGMsayl9YnJlYWs7Y2FzZSAxOnZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZE1vdW50KXt2YXIgZT1iLnJldHVybjt0cnl7ZC5jb21wb25lbnREaWRNb3VudCgpfWNhdGNoKGspe1coYixlLGspfX12YXIgZj1iLnJldHVybjt0cnl7UmooYil9Y2F0Y2goayl7VyhiLGYsayl9YnJlYWs7Y2FzZSA1OnZhciBnPWIucmV0dXJuO3RyeXtSaihiKX1jYXRjaChrKXtXKGIsZyxrKX19fWNhdGNoKGspe1coYixiLnJldHVybixrKX1pZihiPT09YSl7Vj1udWxsO2JyZWFrfXZhciBoPWIuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Yi5yZXR1cm47Vj1oO2JyZWFrfVY9Yi5yZXR1cm59fVxudmFyIGxrPU1hdGguY2VpbCxtaz11YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLG5rPXVhLlJlYWN0Q3VycmVudE93bmVyLG9rPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLEs9MCxRPW51bGwsWT1udWxsLFo9MCxmaj0wLGVqPVVmKDApLFQ9MCxwaz1udWxsLHJoPTAscWs9MCxyaz0wLHNrPW51bGwsdGs9bnVsbCxmaz0wLEdqPUluZmluaXR5LHVrPW51bGwsT2k9ITEsUGk9bnVsbCxSaT1udWxsLHZrPSExLHdrPW51bGwseGs9MCx5az0wLHprPW51bGwsQWs9LTEsQms9MDtmdW5jdGlvbiBSKCl7cmV0dXJuIDAhPT0oSyY2KT9CKCk6LTEhPT1Baz9BazpBaz1CKCl9XG5mdW5jdGlvbiB5aShhKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gMTtpZigwIT09KEsmMikmJjAhPT1aKXJldHVybiBaJi1aO2lmKG51bGwhPT1LZy50cmFuc2l0aW9uKXJldHVybiAwPT09QmsmJihCaz15YygpKSxCazthPUM7aWYoMCE9PWEpcmV0dXJuIGE7YT13aW5kb3cuZXZlbnQ7YT12b2lkIDA9PT1hPzE2OmpkKGEudHlwZSk7cmV0dXJuIGF9ZnVuY3Rpb24gZ2koYSxiLGMsZCl7aWYoNTA8eWspdGhyb3cgeWs9MCx6az1udWxsLEVycm9yKHAoMTg1KSk7QWMoYSxjLGQpO2lmKDA9PT0oSyYyKXx8YSE9PVEpYT09PVEmJigwPT09KEsmMikmJihxa3w9YyksND09PVQmJkNrKGEsWikpLERrKGEsZCksMT09PWMmJjA9PT1LJiYwPT09KGIubW9kZSYxKSYmKEdqPUIoKSs1MDAsZmcmJmpnKCkpfVxuZnVuY3Rpb24gRGsoYSxiKXt2YXIgYz1hLmNhbGxiYWNrTm9kZTt3YyhhLGIpO3ZhciBkPXVjKGEsYT09PVE/WjowKTtpZigwPT09ZCludWxsIT09YyYmYmMoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MDtlbHNlIGlmKGI9ZCYtZCxhLmNhbGxiYWNrUHJpb3JpdHkhPT1iKXtudWxsIT1jJiZiYyhjKTtpZigxPT09YikwPT09YS50YWc/aWcoRWsuYmluZChudWxsLGEpKTpoZyhFay5iaW5kKG51bGwsYSkpLEpmKGZ1bmN0aW9uKCl7MD09PShLJjYpJiZqZygpfSksYz1udWxsO2Vsc2V7c3dpdGNoKERjKGQpKXtjYXNlIDE6Yz1mYzticmVhaztjYXNlIDQ6Yz1nYzticmVhaztjYXNlIDE2OmM9aGM7YnJlYWs7Y2FzZSA1MzY4NzA5MTI6Yz1qYzticmVhaztkZWZhdWx0OmM9aGN9Yz1GayhjLEdrLmJpbmQobnVsbCxhKSl9YS5jYWxsYmFja1ByaW9yaXR5PWI7YS5jYWxsYmFja05vZGU9Y319XG5mdW5jdGlvbiBHayhhLGIpe0FrPS0xO0JrPTA7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7dmFyIGM9YS5jYWxsYmFja05vZGU7aWYoSGsoKSYmYS5jYWxsYmFja05vZGUhPT1jKXJldHVybiBudWxsO3ZhciBkPXVjKGEsYT09PVE/WjowKTtpZigwPT09ZClyZXR1cm4gbnVsbDtpZigwIT09KGQmMzApfHwwIT09KGQmYS5leHBpcmVkTGFuZXMpfHxiKWI9SWsoYSxkKTtlbHNle2I9ZDt2YXIgZT1LO0t8PTI7dmFyIGY9SmsoKTtpZihRIT09YXx8WiE9PWIpdWs9bnVsbCxHaj1CKCkrNTAwLEtrKGEsYik7ZG8gdHJ5e0xrKCk7YnJlYWt9Y2F0Y2goaCl7TWsoYSxoKX13aGlsZSgxKTskZygpO21rLmN1cnJlbnQ9ZjtLPWU7bnVsbCE9PVk/Yj0wOihRPW51bGwsWj0wLGI9VCl9aWYoMCE9PWIpezI9PT1iJiYoZT14YyhhKSwwIT09ZSYmKGQ9ZSxiPU5rKGEsZSkpKTtpZigxPT09Yil0aHJvdyBjPXBrLEtrKGEsMCksQ2soYSxkKSxEayhhLEIoKSksYztpZig2PT09YilDayhhLGQpO1xuZWxzZXtlPWEuY3VycmVudC5hbHRlcm5hdGU7aWYoMD09PShkJjMwKSYmIU9rKGUpJiYoYj1JayhhLGQpLDI9PT1iJiYoZj14YyhhKSwwIT09ZiYmKGQ9ZixiPU5rKGEsZikpKSwxPT09YikpdGhyb3cgYz1wayxLayhhLDApLENrKGEsZCksRGsoYSxCKCkpLGM7YS5maW5pc2hlZFdvcms9ZTthLmZpbmlzaGVkTGFuZXM9ZDtzd2l0Y2goYil7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcihwKDM0NSkpO2Nhc2UgMjpQayhhLHRrLHVrKTticmVhaztjYXNlIDM6Q2soYSxkKTtpZigoZCYxMzAwMjM0MjQpPT09ZCYmKGI9ZmsrNTAwLUIoKSwxMDxiKSl7aWYoMCE9PXVjKGEsMCkpYnJlYWs7ZT1hLnN1c3BlbmRlZExhbmVzO2lmKChlJmQpIT09ZCl7UigpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9RmYoUGsuYmluZChudWxsLGEsdGssdWspLGIpO2JyZWFrfVBrKGEsdGssdWspO2JyZWFrO2Nhc2UgNDpDayhhLGQpO2lmKChkJjQxOTQyNDApPT09XG5kKWJyZWFrO2I9YS5ldmVudFRpbWVzO2ZvcihlPS0xOzA8ZDspe3ZhciBnPTMxLW9jKGQpO2Y9MTw8ZztnPWJbZ107Zz5lJiYoZT1nKTtkJj1+Zn1kPWU7ZD1CKCktZDtkPSgxMjA+ZD8xMjA6NDgwPmQ/NDgwOjEwODA+ZD8xMDgwOjE5MjA+ZD8xOTIwOjNFMz5kPzNFMzo0MzIwPmQ/NDMyMDoxOTYwKmxrKGQvMTk2MCkpLWQ7aWYoMTA8ZCl7YS50aW1lb3V0SGFuZGxlPUZmKFBrLmJpbmQobnVsbCxhLHRrLHVrKSxkKTticmVha31QayhhLHRrLHVrKTticmVhaztjYXNlIDU6UGsoYSx0ayx1ayk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDMyOSkpO319fURrKGEsQigpKTtyZXR1cm4gYS5jYWxsYmFja05vZGU9PT1jP0drLmJpbmQobnVsbCxhKTpudWxsfVxuZnVuY3Rpb24gTmsoYSxiKXt2YXIgYz1zazthLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJihLayhhLGIpLmZsYWdzfD0yNTYpO2E9SWsoYSxiKTsyIT09YSYmKGI9dGssdGs9YyxudWxsIT09YiYmRmooYikpO3JldHVybiBhfWZ1bmN0aW9uIEZqKGEpe251bGw9PT10az90az1hOnRrLnB1c2guYXBwbHkodGssYSl9XG5mdW5jdGlvbiBPayhhKXtmb3IodmFyIGI9YTs7KXtpZihiLmZsYWdzJjE2Mzg0KXt2YXIgYz1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1jJiYoYz1jLnN0b3JlcyxudWxsIT09YykpZm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF0sZj1lLmdldFNuYXBzaG90O2U9ZS52YWx1ZTt0cnl7aWYoIUhlKGYoKSxlKSlyZXR1cm4hMX1jYXRjaChnKXtyZXR1cm4hMX19fWM9Yi5jaGlsZDtpZihiLnN1YnRyZWVGbGFncyYxNjM4NCYmbnVsbCE9PWMpYy5yZXR1cm49YixiPWM7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4hMDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiEwfVxuZnVuY3Rpb24gQ2soYSxiKXtiJj1+cms7YiY9fnFrO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtb2MoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fWZ1bmN0aW9uIEVrKGEpe2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO0hrKCk7dmFyIGI9dWMoYSwwKTtpZigwPT09KGImMSkpcmV0dXJuIERrKGEsQigpKSxudWxsO3ZhciBjPUlrKGEsYik7aWYoMCE9PWEudGFnJiYyPT09Yyl7dmFyIGQ9eGMoYSk7MCE9PWQmJihiPWQsYz1OayhhLGQpKX1pZigxPT09Yyl0aHJvdyBjPXBrLEtrKGEsMCksQ2soYSxiKSxEayhhLEIoKSksYztpZig2PT09Yyl0aHJvdyBFcnJvcihwKDM0NSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWI7UGsoYSx0ayx1ayk7RGsoYSxCKCkpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gUWsoYSxiKXt2YXIgYz1LO0t8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Sz1jLDA9PT1LJiYoR2o9QigpKzUwMCxmZyYmamcoKSl9fWZ1bmN0aW9uIFJrKGEpe251bGwhPT13ayYmMD09PXdrLnRhZyYmMD09PShLJjYpJiZIaygpO3ZhciBiPUs7S3w9MTt2YXIgYz1vay50cmFuc2l0aW9uLGQ9Qzt0cnl7aWYob2sudHJhbnNpdGlvbj1udWxsLEM9MSxhKXJldHVybiBhKCl9ZmluYWxseXtDPWQsb2sudHJhbnNpdGlvbj1jLEs9YiwwPT09KEsmNikmJmpnKCl9fWZ1bmN0aW9uIEhqKCl7Zmo9ZWouY3VycmVudDtFKGVqKX1cbmZ1bmN0aW9uIEtrKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLEdmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7d2coZCk7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJiRmKCk7YnJlYWs7Y2FzZSAzOnpoKCk7RShXZik7RShIKTtFaCgpO2JyZWFrO2Nhc2UgNTpCaChkKTticmVhaztjYXNlIDQ6emgoKTticmVhaztjYXNlIDEzOkUoTCk7YnJlYWs7Y2FzZSAxOTpFKEwpO2JyZWFrO2Nhc2UgMTA6YWgoZC50eXBlLl9jb250ZXh0KTticmVhaztjYXNlIDIyOmNhc2UgMjM6SGooKX1jPWMucmV0dXJufVE9YTtZPWE9UGcoYS5jdXJyZW50LG51bGwpO1o9Zmo9YjtUPTA7cGs9bnVsbDtyaz1xaz1yaD0wO3RrPXNrPW51bGw7aWYobnVsbCE9PWZoKXtmb3IoYj1cbjA7YjxmaC5sZW5ndGg7YisrKWlmKGM9ZmhbYl0sZD1jLmludGVybGVhdmVkLG51bGwhPT1kKXtjLmludGVybGVhdmVkPW51bGw7dmFyIGU9ZC5uZXh0LGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXt2YXIgZz1mLm5leHQ7Zi5uZXh0PWU7ZC5uZXh0PWd9Yy5wZW5kaW5nPWR9Zmg9bnVsbH1yZXR1cm4gYX1cbmZ1bmN0aW9uIE1rKGEsYil7ZG97dmFyIGM9WTt0cnl7JGcoKTtGaC5jdXJyZW50PVJoO2lmKEloKXtmb3IodmFyIGQ9TS5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH1JaD0hMX1IaD0wO089Tj1NPW51bGw7Smg9ITE7S2g9MDtuay5jdXJyZW50PW51bGw7aWYobnVsbD09PWN8fG51bGw9PT1jLnJldHVybil7VD0xO3BrPWI7WT1udWxsO2JyZWFrfWE6e3ZhciBmPWEsZz1jLnJldHVybixoPWMsaz1iO2I9WjtoLmZsYWdzfD0zMjc2ODtpZihudWxsIT09ayYmXCJvYmplY3RcIj09PXR5cGVvZiBrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay50aGVuKXt2YXIgbD1rLG09aCxxPW0udGFnO2lmKDA9PT0obS5tb2RlJjEpJiYoMD09PXF8fDExPT09cXx8MTU9PT1xKSl7dmFyIHI9bS5hbHRlcm5hdGU7cj8obS51cGRhdGVRdWV1ZT1yLnVwZGF0ZVF1ZXVlLG0ubWVtb2l6ZWRTdGF0ZT1yLm1lbW9pemVkU3RhdGUsXG5tLmxhbmVzPXIubGFuZXMpOihtLnVwZGF0ZVF1ZXVlPW51bGwsbS5tZW1vaXplZFN0YXRlPW51bGwpfXZhciB5PVVpKGcpO2lmKG51bGwhPT15KXt5LmZsYWdzJj0tMjU3O1ZpKHksZyxoLGYsYik7eS5tb2RlJjEmJlNpKGYsbCxiKTtiPXk7az1sO3ZhciBuPWIudXBkYXRlUXVldWU7aWYobnVsbD09PW4pe3ZhciB0PW5ldyBTZXQ7dC5hZGQoayk7Yi51cGRhdGVRdWV1ZT10fWVsc2Ugbi5hZGQoayk7YnJlYWsgYX1lbHNle2lmKDA9PT0oYiYxKSl7U2koZixsLGIpO3RqKCk7YnJlYWsgYX1rPUVycm9yKHAoNDI2KSl9fWVsc2UgaWYoSSYmaC5tb2RlJjEpe3ZhciBKPVVpKGcpO2lmKG51bGwhPT1KKXswPT09KEouZmxhZ3MmNjU1MzYpJiYoSi5mbGFnc3w9MjU2KTtWaShKLGcsaCxmLGIpO0pnKEppKGssaCkpO2JyZWFrIGF9fWY9az1KaShrLGgpOzQhPT1UJiYoVD0yKTtudWxsPT09c2s/c2s9W2ZdOnNrLnB1c2goZik7Zj1nO2Rve3N3aXRjaChmLnRhZyl7Y2FzZSAzOmYuZmxhZ3N8PTY1NTM2O1xuYiY9LWI7Zi5sYW5lc3w9Yjt2YXIgeD1OaShmLGssYik7cGgoZix4KTticmVhayBhO2Nhc2UgMTpoPWs7dmFyIHc9Zi50eXBlLHU9Zi5zdGF0ZU5vZGU7aWYoMD09PShmLmZsYWdzJjEyOCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT11JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgdS5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1SaXx8IVJpLmhhcyh1KSkpKXtmLmZsYWdzfD02NTUzNjtiJj0tYjtmLmxhbmVzfD1iO3ZhciBGPVFpKGYsaCxiKTtwaChmLEYpO2JyZWFrIGF9fWY9Zi5yZXR1cm59d2hpbGUobnVsbCE9PWYpfVNrKGMpfWNhdGNoKG5hKXtiPW5hO1k9PT1jJiZudWxsIT09YyYmKFk9Yz1jLnJldHVybik7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9ZnVuY3Rpb24gSmsoKXt2YXIgYT1tay5jdXJyZW50O21rLmN1cnJlbnQ9Umg7cmV0dXJuIG51bGw9PT1hP1JoOmF9XG5mdW5jdGlvbiB0aigpe2lmKDA9PT1UfHwzPT09VHx8Mj09PVQpVD00O251bGw9PT1RfHwwPT09KHJoJjI2ODQzNTQ1NSkmJjA9PT0ocWsmMjY4NDM1NDU1KXx8Q2soUSxaKX1mdW5jdGlvbiBJayhhLGIpe3ZhciBjPUs7S3w9Mjt2YXIgZD1KaygpO2lmKFEhPT1hfHxaIT09Yil1az1udWxsLEtrKGEsYik7ZG8gdHJ5e1RrKCk7YnJlYWt9Y2F0Y2goZSl7TWsoYSxlKX13aGlsZSgxKTskZygpO0s9Yzttay5jdXJyZW50PWQ7aWYobnVsbCE9PVkpdGhyb3cgRXJyb3IocCgyNjEpKTtRPW51bGw7Wj0wO3JldHVybiBUfWZ1bmN0aW9uIFRrKCl7Zm9yKDtudWxsIT09WTspVWsoWSl9ZnVuY3Rpb24gTGsoKXtmb3IoO251bGwhPT1ZJiYhY2MoKTspVWsoWSl9ZnVuY3Rpb24gVWsoYSl7dmFyIGI9VmsoYS5hbHRlcm5hdGUsYSxmaik7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iP1NrKGEpOlk9Yjtuay5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBTayhhKXt2YXIgYj1hO2Rve3ZhciBjPWIuYWx0ZXJuYXRlO2E9Yi5yZXR1cm47aWYoMD09PShiLmZsYWdzJjMyNzY4KSl7aWYoYz1FaihjLGIsZmopLG51bGwhPT1jKXtZPWM7cmV0dXJufX1lbHNle2M9SWooYyxiKTtpZihudWxsIT09Yyl7Yy5mbGFncyY9MzI3Njc7WT1jO3JldHVybn1pZihudWxsIT09YSlhLmZsYWdzfD0zMjc2OCxhLnN1YnRyZWVGbGFncz0wLGEuZGVsZXRpb25zPW51bGw7ZWxzZXtUPTY7WT1udWxsO3JldHVybn19Yj1iLnNpYmxpbmc7aWYobnVsbCE9PWIpe1k9YjtyZXR1cm59WT1iPWF9d2hpbGUobnVsbCE9PWIpOzA9PT1UJiYoVD01KX1mdW5jdGlvbiBQayhhLGIsYyl7dmFyIGQ9QyxlPW9rLnRyYW5zaXRpb247dHJ5e29rLnRyYW5zaXRpb249bnVsbCxDPTEsV2soYSxiLGMsZCl9ZmluYWxseXtvay50cmFuc2l0aW9uPWUsQz1kfXJldHVybiBudWxsfVxuZnVuY3Rpb24gV2soYSxiLGMsZCl7ZG8gSGsoKTt3aGlsZShudWxsIT09d2spO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO2M9YS5maW5pc2hlZFdvcms7dmFyIGU9YS5maW5pc2hlZExhbmVzO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcihwKDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja1ByaW9yaXR5PTA7dmFyIGY9Yy5sYW5lc3xjLmNoaWxkTGFuZXM7QmMoYSxmKTthPT09USYmKFk9UT1udWxsLFo9MCk7MD09PShjLnN1YnRyZWVGbGFncyYyMDY0KSYmMD09PShjLmZsYWdzJjIwNjQpfHx2a3x8KHZrPSEwLEZrKGhjLGZ1bmN0aW9uKCl7SGsoKTtyZXR1cm4gbnVsbH0pKTtmPTAhPT0oYy5mbGFncyYxNTk5MCk7aWYoMCE9PShjLnN1YnRyZWVGbGFncyYxNTk5MCl8fGYpe2Y9b2sudHJhbnNpdGlvbjtvay50cmFuc2l0aW9uPW51bGw7XG52YXIgZz1DO0M9MTt2YXIgaD1LO0t8PTQ7bmsuY3VycmVudD1udWxsO09qKGEsYyk7ZGsoYyxhKTtPZShEZik7ZGQ9ISFDZjtEZj1DZj1udWxsO2EuY3VycmVudD1jO2hrKGMsYSxlKTtkYygpO0s9aDtDPWc7b2sudHJhbnNpdGlvbj1mfWVsc2UgYS5jdXJyZW50PWM7dmsmJih2az0hMSx3az1hLHhrPWUpO2Y9YS5wZW5kaW5nTGFuZXM7MD09PWYmJihSaT1udWxsKTttYyhjLnN0YXRlTm9kZSxkKTtEayhhLEIoKSk7aWYobnVsbCE9PWIpZm9yKGQ9YS5vblJlY292ZXJhYmxlRXJyb3IsYz0wO2M8Yi5sZW5ndGg7YysrKWU9YltjXSxkKGUudmFsdWUse2NvbXBvbmVudFN0YWNrOmUuc3RhY2ssZGlnZXN0OmUuZGlnZXN0fSk7aWYoT2kpdGhyb3cgT2k9ITEsYT1QaSxQaT1udWxsLGE7MCE9PSh4ayYxKSYmMCE9PWEudGFnJiZIaygpO2Y9YS5wZW5kaW5nTGFuZXM7MCE9PShmJjEpP2E9PT16az95aysrOih5az0wLHprPWEpOnlrPTA7amcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIEhrKCl7aWYobnVsbCE9PXdrKXt2YXIgYT1EYyh4ayksYj1vay50cmFuc2l0aW9uLGM9Qzt0cnl7b2sudHJhbnNpdGlvbj1udWxsO0M9MTY+YT8xNjphO2lmKG51bGw9PT13ayl2YXIgZD0hMTtlbHNle2E9d2s7d2s9bnVsbDt4az0wO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMzMSkpO3ZhciBlPUs7S3w9NDtmb3IoVj1hLmN1cnJlbnQ7bnVsbCE9PVY7KXt2YXIgZj1WLGc9Zi5jaGlsZDtpZigwIT09KFYuZmxhZ3MmMTYpKXt2YXIgaD1mLmRlbGV0aW9ucztpZihudWxsIT09aCl7Zm9yKHZhciBrPTA7azxoLmxlbmd0aDtrKyspe3ZhciBsPWhba107Zm9yKFY9bDtudWxsIT09Vjspe3ZhciBtPVY7c3dpdGNoKG0udGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlBqKDgsbSxmKX12YXIgcT1tLmNoaWxkO2lmKG51bGwhPT1xKXEucmV0dXJuPW0sVj1xO2Vsc2UgZm9yKDtudWxsIT09Vjspe209Vjt2YXIgcj1tLnNpYmxpbmcseT1tLnJldHVybjtTaihtKTtpZihtPT09XG5sKXtWPW51bGw7YnJlYWt9aWYobnVsbCE9PXIpe3IucmV0dXJuPXk7Vj1yO2JyZWFrfVY9eX19fXZhciBuPWYuYWx0ZXJuYXRlO2lmKG51bGwhPT1uKXt2YXIgdD1uLmNoaWxkO2lmKG51bGwhPT10KXtuLmNoaWxkPW51bGw7ZG97dmFyIEo9dC5zaWJsaW5nO3Quc2libGluZz1udWxsO3Q9Sn13aGlsZShudWxsIT09dCl9fVY9Zn19aWYoMCE9PShmLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PWcpZy5yZXR1cm49ZixWPWc7ZWxzZSBiOmZvcig7bnVsbCE9PVY7KXtmPVY7aWYoMCE9PShmLmZsYWdzJjIwNDgpKXN3aXRjaChmLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpQaig5LGYsZi5yZXR1cm4pfXZhciB4PWYuc2libGluZztpZihudWxsIT09eCl7eC5yZXR1cm49Zi5yZXR1cm47Vj14O2JyZWFrIGJ9Vj1mLnJldHVybn19dmFyIHc9YS5jdXJyZW50O2ZvcihWPXc7bnVsbCE9PVY7KXtnPVY7dmFyIHU9Zy5jaGlsZDtpZigwIT09KGcuc3VidHJlZUZsYWdzJjIwNjQpJiZudWxsIT09XG51KXUucmV0dXJuPWcsVj11O2Vsc2UgYjpmb3IoZz13O251bGwhPT1WOyl7aD1WO2lmKDAhPT0oaC5mbGFncyYyMDQ4KSl0cnl7c3dpdGNoKGgudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlFqKDksaCl9fWNhdGNoKG5hKXtXKGgsaC5yZXR1cm4sbmEpfWlmKGg9PT1nKXtWPW51bGw7YnJlYWsgYn12YXIgRj1oLnNpYmxpbmc7aWYobnVsbCE9PUYpe0YucmV0dXJuPWgucmV0dXJuO1Y9RjticmVhayBifVY9aC5yZXR1cm59fUs9ZTtqZygpO2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Qb3N0Q29tbWl0RmliZXJSb290KXRyeXtsYy5vblBvc3RDb21taXRGaWJlclJvb3Qoa2MsYSl9Y2F0Y2gobmEpe31kPSEwfXJldHVybiBkfWZpbmFsbHl7Qz1jLG9rLnRyYW5zaXRpb249Yn19cmV0dXJuITF9ZnVuY3Rpb24gWGsoYSxiLGMpe2I9SmkoYyxiKTtiPU5pKGEsYiwxKTthPW5oKGEsYiwxKTtiPVIoKTtudWxsIT09YSYmKEFjKGEsMSxiKSxEayhhLGIpKX1cbmZ1bmN0aW9uIFcoYSxiLGMpe2lmKDM9PT1hLnRhZylYayhhLGEsYyk7ZWxzZSBmb3IoO251bGwhPT1iOyl7aWYoMz09PWIudGFnKXtYayhiLGEsYyk7YnJlYWt9ZWxzZSBpZigxPT09Yi50YWcpe3ZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1SaXx8IVJpLmhhcyhkKSkpe2E9SmkoYyxhKTthPVFpKGIsYSwxKTtiPW5oKGIsYSwxKTthPVIoKTtudWxsIT09YiYmKEFjKGIsMSxhKSxEayhiLGEpKTticmVha319Yj1iLnJldHVybn19XG5mdW5jdGlvbiBUaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2I9UigpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmYztRPT09YSYmKFomYyk9PT1jJiYoND09PVR8fDM9PT1UJiYoWiYxMzAwMjM0MjQpPT09WiYmNTAwPkIoKS1maz9LayhhLDApOnJrfD1jKTtEayhhLGIpfWZ1bmN0aW9uIFlrKGEsYil7MD09PWImJigwPT09KGEubW9kZSYxKT9iPTE6KGI9c2Msc2M8PD0xLDA9PT0oc2MmMTMwMDIzNDI0KSYmKHNjPTQxOTQzMDQpKSk7dmFyIGM9UigpO2E9aWgoYSxiKTtudWxsIT09YSYmKEFjKGEsYixjKSxEayhhLGMpKX1mdW5jdGlvbiB1aihhKXt2YXIgYj1hLm1lbW9pemVkU3RhdGUsYz0wO251bGwhPT1iJiYoYz1iLnJldHJ5TGFuZSk7WWsoYSxjKX1cbmZ1bmN0aW9uIGJrKGEsYil7dmFyIGM9MDtzd2l0Y2goYS50YWcpe2Nhc2UgMTM6dmFyIGQ9YS5zdGF0ZU5vZGU7dmFyIGU9YS5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoYz1lLnJldHJ5TGFuZSk7YnJlYWs7Y2FzZSAxOTpkPWEuc3RhdGVOb2RlO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMTQpKTt9bnVsbCE9PWQmJmQuZGVsZXRlKGIpO1lrKGEsYyl9dmFyIFZrO1xuVms9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxXZi5jdXJyZW50KWRoPSEwO2Vsc2V7aWYoMD09PShhLmxhbmVzJmMpJiYwPT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gZGg9ITEseWooYSxiLGMpO2RoPTAhPT0oYS5mbGFncyYxMzEwNzIpPyEwOiExfWVsc2UgZGg9ITEsSSYmMCE9PShiLmZsYWdzJjEwNDg1NzYpJiZ1ZyhiLG5nLGIuaW5kZXgpO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjp2YXIgZD1iLnR5cGU7aWooYSxiKTthPWIucGVuZGluZ1Byb3BzO3ZhciBlPVlmKGIsSC5jdXJyZW50KTtjaChiLGMpO2U9TmgobnVsbCxiLGQsYSxlLGMpO3ZhciBmPVNoKCk7Yi5mbGFnc3w9MTtcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Y/KGIudGFnPTEsYi5tZW1vaXplZFN0YXRlPW51bGwsYi51cGRhdGVRdWV1ZT1cbm51bGwsWmYoZCk/KGY9ITAsY2coYikpOmY9ITEsYi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbCxraChiKSxlLnVwZGF0ZXI9RWksYi5zdGF0ZU5vZGU9ZSxlLl9yZWFjdEludGVybmFscz1iLElpKGIsZCxhLGMpLGI9amoobnVsbCxiLGQsITAsZixjKSk6KGIudGFnPTAsSSYmZiYmdmcoYiksWGkobnVsbCxiLGUsYyksYj1iLmNoaWxkKTtyZXR1cm4gYjtjYXNlIDE2OmQ9Yi5lbGVtZW50VHlwZTthOntpaihhLGIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1kLl9pbml0O2Q9ZShkLl9wYXlsb2FkKTtiLnR5cGU9ZDtlPWIudGFnPVprKGQpO2E9Q2koZCxhKTtzd2l0Y2goZSl7Y2FzZSAwOmI9Y2oobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTpiPWhqKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9WWkobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj0kaShudWxsLGIsZCxDaShkLnR5cGUsYSksYyk7YnJlYWsgYX10aHJvdyBFcnJvcihwKDMwNixcbmQsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkNpKGQsZSksY2ooYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkNpKGQsZSksaGooYSxiLGQsZSxjKTtjYXNlIDM6YTp7a2ooYik7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzODcpKTtkPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFN0YXRlO2U9Zi5lbGVtZW50O2xoKGEsYik7cWgoYixkLG51bGwsYyk7dmFyIGc9Yi5tZW1vaXplZFN0YXRlO2Q9Zy5lbGVtZW50O2lmKGYuaXNEZWh5ZHJhdGVkKWlmKGY9e2VsZW1lbnQ6ZCxpc0RlaHlkcmF0ZWQ6ITEsY2FjaGU6Zy5jYWNoZSxwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzOmcucGVuZGluZ1N1c3BlbnNlQm91bmRhcmllcyx0cmFuc2l0aW9uczpnLnRyYW5zaXRpb25zfSxiLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1cbmYsYi5tZW1vaXplZFN0YXRlPWYsYi5mbGFncyYyNTYpe2U9SmkoRXJyb3IocCg0MjMpKSxiKTtiPWxqKGEsYixkLGMsZSk7YnJlYWsgYX1lbHNlIGlmKGQhPT1lKXtlPUppKEVycm9yKHAoNDI0KSksYik7Yj1saihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBmb3IoeWc9TGYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSx4Zz1iLEk9ITAsemc9bnVsbCxjPVZnKGIsbnVsbCxkLGMpLGIuY2hpbGQ9YztjOyljLmZsYWdzPWMuZmxhZ3MmLTN8NDA5NixjPWMuc2libGluZztlbHNle0lnKCk7aWYoZD09PWUpe2I9WmkoYSxiLGMpO2JyZWFrIGF9WGkoYSxiLGQsYyl9Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gQWgoYiksbnVsbD09PWEmJkVnKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sRWYoZCxlKT9nPW51bGw6bnVsbCE9PWYmJkVmKGQsZikmJihiLmZsYWdzfD0zMiksXG5naihhLGIpLFhpKGEsYixnLGMpLGIuY2hpbGQ7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmRWcoYiksbnVsbDtjYXNlIDEzOnJldHVybiBvaihhLGIsYyk7Y2FzZSA0OnJldHVybiB5aChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1VZyhiLG51bGwsZCxjKTpYaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkNpKGQsZSksWWkoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFhpKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gWGkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gWGkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFByb3BzO1xuZz1lLnZhbHVlO0coV2csZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZztpZihudWxsIT09ZilpZihIZShmLnZhbHVlLGcpKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIVdmLmN1cnJlbnQpe2I9WmkoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGY9Yi5jaGlsZCxudWxsIT09ZiYmKGYucmV0dXJuPWIpO251bGwhPT1mOyl7dmFyIGg9Zi5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PWgpe2c9Zi5jaGlsZDtmb3IodmFyIGs9aC5maXJzdENvbnRleHQ7bnVsbCE9PWs7KXtpZihrLmNvbnRleHQ9PT1kKXtpZigxPT09Zi50YWcpe2s9bWgoLTEsYyYtYyk7ay50YWc9Mjt2YXIgbD1mLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1sKXtsPWwuc2hhcmVkO3ZhciBtPWwucGVuZGluZztudWxsPT09bT9rLm5leHQ9azooay5uZXh0PW0ubmV4dCxtLm5leHQ9ayk7bC5wZW5kaW5nPWt9fWYubGFuZXN8PWM7az1mLmFsdGVybmF0ZTtudWxsIT09ayYmKGsubGFuZXN8PWMpO2JoKGYucmV0dXJuLFxuYyxiKTtoLmxhbmVzfD1jO2JyZWFrfWs9ay5uZXh0fX1lbHNlIGlmKDEwPT09Zi50YWcpZz1mLnR5cGU9PT1iLnR5cGU/bnVsbDpmLmNoaWxkO2Vsc2UgaWYoMTg9PT1mLnRhZyl7Zz1mLnJldHVybjtpZihudWxsPT09Zyl0aHJvdyBFcnJvcihwKDM0MSkpO2cubGFuZXN8PWM7aD1nLmFsdGVybmF0ZTtudWxsIT09aCYmKGgubGFuZXN8PWMpO2JoKGcsYyxiKTtnPWYuc2libGluZ31lbHNlIGc9Zi5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1mO2Vsc2UgZm9yKGc9ZjtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9Zj1nLnNpYmxpbmc7aWYobnVsbCE9PWYpe2YucmV0dXJuPWcucmV0dXJuO2c9ZjticmVha31nPWcucmV0dXJufWY9Z31YaShhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxkPWIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGNoKGIsYyksZT1laChlKSxkPWQoZSksYi5mbGFnc3w9MSxYaShhLGIsZCxjKSxcbmIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZD1iLnR5cGUsZT1DaShkLGIucGVuZGluZ1Byb3BzKSxlPUNpKGQudHlwZSxlKSwkaShhLGIsZCxlLGMpO2Nhc2UgMTU6cmV0dXJuIGJqKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6Q2koZCxlKSxpaihhLGIpLGIudGFnPTEsWmYoZCk/KGE9ITAsY2coYikpOmE9ITEsY2goYixjKSxHaShiLGQsZSksSWkoYixkLGUsYyksamoobnVsbCxiLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiB4aihhLGIsYyk7Y2FzZSAyMjpyZXR1cm4gZGooYSxiLGMpfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fTtmdW5jdGlvbiBGayhhLGIpe3JldHVybiBhYyhhLGIpfVxuZnVuY3Rpb24gJGsoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLnN1YnRyZWVGbGFncz10aGlzLmZsYWdzPTA7dGhpcy5kZWxldGlvbnM9bnVsbDt0aGlzLmNoaWxkTGFuZXM9dGhpcy5sYW5lcz0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gQmcoYSxiLGMsZCl7cmV0dXJuIG5ldyAkayhhLGIsYyxkKX1mdW5jdGlvbiBhaihhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfVxuZnVuY3Rpb24gWmsoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGFqKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1EYSlyZXR1cm4gMTE7aWYoYT09PUdhKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIFBnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9QmcoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy50eXBlPWEudHlwZSxjLmZsYWdzPTAsYy5zdWJ0cmVlRmxhZ3M9MCxjLmRlbGV0aW9ucz1udWxsKTtjLmZsYWdzPWEuZmxhZ3MmMTQ2ODAwNjQ7Yy5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcztjLmxhbmVzPWEubGFuZXM7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntsYW5lczpiLmxhbmVzLGZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dH07XG5jLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIFJnKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlhaihhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSB5YTpyZXR1cm4gVGcoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSB6YTpnPTg7ZXw9ODticmVhaztjYXNlIEFhOnJldHVybiBhPUJnKDEyLGMsYixlfDIpLGEuZWxlbWVudFR5cGU9QWEsYS5sYW5lcz1mLGE7Y2FzZSBFYTpyZXR1cm4gYT1CZygxMyxjLGIsZSksYS5lbGVtZW50VHlwZT1FYSxhLmxhbmVzPWYsYTtjYXNlIEZhOnJldHVybiBhPUJnKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUZhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHBqKGMsZSxmLGIpO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBCYTpnPTEwO2JyZWFrIGE7Y2FzZSBDYTpnPTk7YnJlYWsgYTtjYXNlIERhOmc9MTE7XG5icmVhayBhO2Nhc2UgR2E6Zz0xNDticmVhayBhO2Nhc2UgSGE6Zz0xNjtkPW51bGw7YnJlYWsgYX10aHJvdyBFcnJvcihwKDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPUJnKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmxhbmVzPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gVGcoYSxiLGMsZCl7YT1CZyg3LGEsZCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gcGooYSxiLGMsZCl7YT1CZygyMixhLGQsYik7YS5lbGVtZW50VHlwZT1JYTthLmxhbmVzPWM7YS5zdGF0ZU5vZGU9e2lzSGlkZGVuOiExfTtyZXR1cm4gYX1mdW5jdGlvbiBRZyhhLGIsYyl7YT1CZyg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBTZyhhLGIsYyl7Yj1CZyg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGFsKGEsYixjLGQsZSl7dGhpcy50YWc9Yjt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLmZpbmlzaGVkV29yaz10aGlzLnBpbmdDYWNoZT10aGlzLmN1cnJlbnQ9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5jYWxsYmFja05vZGU9dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9MDt0aGlzLmV2ZW50VGltZXM9emMoMCk7dGhpcy5leHBpcmF0aW9uVGltZXM9emMoLTEpO3RoaXMuZW50YW5nbGVkTGFuZXM9dGhpcy5maW5pc2hlZExhbmVzPXRoaXMubXV0YWJsZVJlYWRMYW5lcz10aGlzLmV4cGlyZWRMYW5lcz10aGlzLnBpbmdlZExhbmVzPXRoaXMuc3VzcGVuZGVkTGFuZXM9dGhpcy5wZW5kaW5nTGFuZXM9MDt0aGlzLmVudGFuZ2xlbWVudHM9emMoMCk7dGhpcy5pZGVudGlmaWVyUHJlZml4PWQ7dGhpcy5vblJlY292ZXJhYmxlRXJyb3I9ZTt0aGlzLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9XG5udWxsfWZ1bmN0aW9uIGJsKGEsYixjLGQsZSxmLGcsaCxrKXthPW5ldyBhbChhLGIsYyxoLGspOzE9PT1iPyhiPTEsITA9PT1mJiYoYnw9OCkpOmI9MDtmPUJnKDMsbnVsbCxudWxsLGIpO2EuY3VycmVudD1mO2Yuc3RhdGVOb2RlPWE7Zi5tZW1vaXplZFN0YXRlPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOmMsY2FjaGU6bnVsbCx0cmFuc2l0aW9uczpudWxsLHBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXM6bnVsbH07a2goZik7cmV0dXJuIGF9ZnVuY3Rpb24gY2woYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp3YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGRsKGEpe2lmKCFhKXJldHVybiBWZjthPWEuX3JlYWN0SW50ZXJuYWxzO2E6e2lmKFZiKGEpIT09YXx8MSE9PWEudGFnKXRocm93IEVycm9yKHAoMTcwKSk7dmFyIGI9YTtkb3tzd2l0Y2goYi50YWcpe2Nhc2UgMzpiPWIuc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYTtjYXNlIDE6aWYoWmYoYi50eXBlKSl7Yj1iLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBhfX1iPWIucmV0dXJufXdoaWxlKG51bGwhPT1iKTt0aHJvdyBFcnJvcihwKDE3MSkpO31pZigxPT09YS50YWcpe3ZhciBjPWEudHlwZTtpZihaZihjKSlyZXR1cm4gYmcoYSxjLGIpfXJldHVybiBifVxuZnVuY3Rpb24gZWwoYSxiLGMsZCxlLGYsZyxoLGspe2E9YmwoYyxkLCEwLGEsZSxmLGcsaCxrKTthLmNvbnRleHQ9ZGwobnVsbCk7Yz1hLmN1cnJlbnQ7ZD1SKCk7ZT15aShjKTtmPW1oKGQsZSk7Zi5jYWxsYmFjaz12b2lkIDAhPT1iJiZudWxsIT09Yj9iOm51bGw7bmgoYyxmLGUpO2EuY3VycmVudC5sYW5lcz1lO0FjKGEsZSxkKTtEayhhLGQpO3JldHVybiBhfWZ1bmN0aW9uIGZsKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPVIoKSxnPXlpKGUpO2M9ZGwoYyk7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1taChmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PWQ/bnVsbDpkO251bGwhPT1kJiYoYi5jYWxsYmFjaz1kKTthPW5oKGUsYixnKTtudWxsIT09YSYmKGdpKGEsZSxnLGYpLG9oKGEsZSxnKSk7cmV0dXJuIGd9XG5mdW5jdGlvbiBnbChhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIGhsKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBpbChhLGIpe2hsKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZobChhLGIpfWZ1bmN0aW9uIGpsKCl7cmV0dXJuIG51bGx9dmFyIGtsPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByZXBvcnRFcnJvcj9yZXBvcnRFcnJvcjpmdW5jdGlvbihhKXtjb25zb2xlLmVycm9yKGEpfTtmdW5jdGlvbiBsbChhKXt0aGlzLl9pbnRlcm5hbFJvb3Q9YX1cbm1sLnByb3RvdHlwZS5yZW5kZXI9bGwucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IocCg0MDkpKTtmbChhLGIsbnVsbCxudWxsKX07bWwucHJvdG90eXBlLnVubW91bnQ9bGwucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbCE9PWEpe3RoaXMuX2ludGVybmFsUm9vdD1udWxsO3ZhciBiPWEuY29udGFpbmVySW5mbztSayhmdW5jdGlvbigpe2ZsKG51bGwsYSxudWxsLG51bGwpfSk7Ylt1Zl09bnVsbH19O2Z1bmN0aW9uIG1sKGEpe3RoaXMuX2ludGVybmFsUm9vdD1hfVxubWwucHJvdG90eXBlLnVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uPWZ1bmN0aW9uKGEpe2lmKGEpe3ZhciBiPUhjKCk7YT17YmxvY2tlZE9uOm51bGwsdGFyZ2V0OmEscHJpb3JpdHk6Yn07Zm9yKHZhciBjPTA7YzxRYy5sZW5ndGgmJjAhPT1iJiZiPFFjW2NdLnByaW9yaXR5O2MrKyk7UWMuc3BsaWNlKGMsMCxhKTswPT09YyYmVmMoYSl9fTtmdW5jdGlvbiBubChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSl9ZnVuY3Rpb24gb2woYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfWZ1bmN0aW9uIHBsKCl7fVxuZnVuY3Rpb24gcWwoYSxiLGMsZCxlKXtpZihlKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGY9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9Z2woZyk7Zi5jYWxsKGEpfX12YXIgZz1lbChiLGQsYSwwLG51bGwsITEsITEsXCJcIixwbCk7YS5fcmVhY3RSb290Q29udGFpbmVyPWc7YVt1Zl09Zy5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtSaygpO3JldHVybiBnfWZvcig7ZT1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChlKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGg9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9Z2woayk7aC5jYWxsKGEpfX12YXIgaz1ibChhLDAsITEsbnVsbCxudWxsLCExLCExLFwiXCIscGwpO2EuX3JlYWN0Um9vdENvbnRhaW5lcj1rO2FbdWZdPWsuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7UmsoZnVuY3Rpb24oKXtmbChiLGssYyxkKX0pO3JldHVybiBrfVxuZnVuY3Rpb24gcmwoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9ZjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9Z2woZyk7aC5jYWxsKGEpfX1mbChiLGcsYSxlKX1lbHNlIGc9cWwoYyxiLGEsZSxkKTtyZXR1cm4gZ2woZyl9RWM9ZnVuY3Rpb24oYSl7c3dpdGNoKGEudGFnKXtjYXNlIDM6dmFyIGI9YS5zdGF0ZU5vZGU7aWYoYi5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXt2YXIgYz10YyhiLnBlbmRpbmdMYW5lcyk7MCE9PWMmJihDYyhiLGN8MSksRGsoYixCKCkpLDA9PT0oSyY2KSYmKEdqPUIoKSs1MDAsamcoKSkpfWJyZWFrO2Nhc2UgMTM6UmsoZnVuY3Rpb24oKXt2YXIgYj1paChhLDEpO2lmKG51bGwhPT1iKXt2YXIgYz1SKCk7Z2koYixhLDEsYyl9fSksaWwoYSwxKX19O1xuRmM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9aWgoYSwxMzQyMTc3MjgpO2lmKG51bGwhPT1iKXt2YXIgYz1SKCk7Z2koYixhLDEzNDIxNzcyOCxjKX1pbChhLDEzNDIxNzcyOCl9fTtHYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj15aShhKSxjPWloKGEsYik7aWYobnVsbCE9PWMpe3ZhciBkPVIoKTtnaShjLGEsYixkKX1pbChhLGIpfX07SGM9ZnVuY3Rpb24oKXtyZXR1cm4gQ307SWM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1DO3RyeXtyZXR1cm4gQz1hLGIoKX1maW5hbGx5e0M9Y319O1xueWI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpiYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9RGIoZCk7aWYoIWUpdGhyb3cgRXJyb3IocCg5MCkpO1dhKGQpO2JiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZmIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtHYj1RaztIYj1SaztcbnZhciBzbD17dXNpbmdDbGllbnRFbnRyeVBvaW50OiExLEV2ZW50czpbQ2IsdWUsRGIsRWIsRmIsUWtdfSx0bD17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6V2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxOC4zLjFcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHVsPXtidW5kbGVUeXBlOnRsLmJ1bmRsZVR5cGUsdmVyc2lvbjp0bC52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6dGwucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp0bC5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0RXJyb3JIYW5kbGVyOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjp1YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9WmIoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOnRsLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbmpsLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGwscmVjb25jaWxlclZlcnNpb246XCIxOC4zLjEtbmV4dC1mMTMzOGY4MDgwLTIwMjQwNDI2XCJ9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgdmw9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF2bC5pc0Rpc2FibGVkJiZ2bC5zdXBwb3J0c0ZpYmVyKXRyeXtrYz12bC5pbmplY3QodWwpLGxjPXZsfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1zbDtcbmV4cG9ydHMuY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIW5sKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIGNsKGEsYixudWxsLGMpfTtleHBvcnRzLmNyZWF0ZVJvb3Q9ZnVuY3Rpb24oYSxiKXtpZighbmwoYSkpdGhyb3cgRXJyb3IocCgyOTkpKTt2YXIgYz0hMSxkPVwiXCIsZT1rbDtudWxsIT09YiYmdm9pZCAwIT09YiYmKCEwPT09Yi51bnN0YWJsZV9zdHJpY3RNb2RlJiYoYz0hMCksdm9pZCAwIT09Yi5pZGVudGlmaWVyUHJlZml4JiYoZD1iLmlkZW50aWZpZXJQcmVmaXgpLHZvaWQgMCE9PWIub25SZWNvdmVyYWJsZUVycm9yJiYoZT1iLm9uUmVjb3ZlcmFibGVFcnJvcikpO2I9YmwoYSwxLCExLG51bGwsbnVsbCxjLCExLGQsZSk7YVt1Zl09Yi5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtyZXR1cm4gbmV3IGxsKGIpfTtcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IocCgxODgpKTthPU9iamVjdC5rZXlzKGEpLmpvaW4oXCIsXCIpO3Rocm93IEVycm9yKHAoMjY4LGEpKTt9YT1aYihiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O2V4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEpe3JldHVybiBSayhhKX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighb2woYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gcmwobnVsbCxhLGIsITAsYyl9O1xuZXhwb3J0cy5oeWRyYXRlUm9vdD1mdW5jdGlvbihhLGIsYyl7aWYoIW5sKGEpKXRocm93IEVycm9yKHAoNDA1KSk7dmFyIGQ9bnVsbCE9YyYmYy5oeWRyYXRlZFNvdXJjZXN8fG51bGwsZT0hMSxmPVwiXCIsZz1rbDtudWxsIT09YyYmdm9pZCAwIT09YyYmKCEwPT09Yy51bnN0YWJsZV9zdHJpY3RNb2RlJiYoZT0hMCksdm9pZCAwIT09Yy5pZGVudGlmaWVyUHJlZml4JiYoZj1jLmlkZW50aWZpZXJQcmVmaXgpLHZvaWQgMCE9PWMub25SZWNvdmVyYWJsZUVycm9yJiYoZz1jLm9uUmVjb3ZlcmFibGVFcnJvcikpO2I9ZWwoYixudWxsLGEsMSxudWxsIT1jP2M6bnVsbCxlLCExLGYsZyk7YVt1Zl09Yi5jdXJyZW50O3NmKGEpO2lmKGQpZm9yKGE9MDthPGQubGVuZ3RoO2ErKyljPWRbYV0sZT1jLl9nZXRWZXJzaW9uLGU9ZShjLl9zb3VyY2UpLG51bGw9PWIubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT9iLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9W2MsZV06Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhLnB1c2goYyxcbmUpO3JldHVybiBuZXcgbWwoYil9O2V4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighb2woYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gcmwobnVsbCxhLGIsITEsYyl9O2V4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZT1mdW5jdGlvbihhKXtpZighb2woYSkpdGhyb3cgRXJyb3IocCg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFJrKGZ1bmN0aW9uKCl7cmwobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW3VmXT1udWxsfSl9KSwhMCk6ITF9O2V4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9UWs7XG5leHBvcnRzLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2lmKCFvbChjKSl0aHJvdyBFcnJvcihwKDIwMCkpO2lmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxzKXRocm93IEVycm9yKHAoMzgpKTtyZXR1cm4gcmwoYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE4LjMuMS1uZXh0LWYxMzM4ZjgwODAtMjAyNDA0MjZcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIG0gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGV4cG9ydHMuY3JlYXRlUm9vdCA9IG0uY3JlYXRlUm9vdDtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IG0uaHlkcmF0ZVJvb3Q7XG59IGVsc2Uge1xuICB2YXIgaSA9IG0uX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7XG4gIGV4cG9ydHMuY3JlYXRlUm9vdCA9IGZ1bmN0aW9uKGMsIG8pIHtcbiAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBtLmNyZWF0ZVJvb3QoYywgbyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gZmFsc2U7XG4gICAgfVxuICB9O1xuICBleHBvcnRzLmh5ZHJhdGVSb290ID0gZnVuY3Rpb24oYywgaCwgbykge1xuICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG0uaHlkcmF0ZVJvb3QoYywgaCwgbyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gZmFsc2U7XG4gICAgfVxuICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnRyYW5zaXRpb25hbC5lbGVtZW50XCIpLFxuICBSRUFDVF9QT1JUQUxfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIiksXG4gIFJFQUNUX0ZSQUdNRU5UX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksXG4gIFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIiksXG4gIFJFQUNUX1BST0ZJTEVSX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik7XG5TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik7XG52YXIgUkVBQ1RfQ09OU1VNRVJfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5jb25zdW1lclwiKSxcbiAgUkVBQ1RfQ09OVEVYVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksXG4gIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksXG4gIFJFQUNUX1NVU1BFTlNFX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksXG4gIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpLFxuICBSRUFDVF9NRU1PX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSxcbiAgUkVBQ1RfTEFaWV9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmxhenlcIiksXG4gIFJFQUNUX09GRlNDUkVFTl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0Lm9mZnNjcmVlblwiKSxcbiAgUkVBQ1RfQ0xJRU5UX1JFRkVSRU5DRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5jbGllbnQucmVmZXJlbmNlXCIpO1xuZnVuY3Rpb24gdHlwZU9mKG9iamVjdCkge1xuICBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIG9iamVjdCAmJiBudWxsICE9PSBvYmplY3QpIHtcbiAgICB2YXIgJCR0eXBlb2YgPSBvYmplY3QuJCR0eXBlb2Y7XG4gICAgc3dpdGNoICgkJHR5cGVvZikge1xuICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgIHN3aXRjaCAoKChvYmplY3QgPSBvYmplY3QudHlwZSksIG9iamVjdCkpIHtcbiAgICAgICAgICBjYXNlIFJFQUNUX0ZSQUdNRU5UX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9QUk9GSUxFUl9UWVBFOlxuICAgICAgICAgIGNhc2UgUkVBQ1RfU1RSSUNUX01PREVfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEU6XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBzd2l0Y2ggKCgob2JqZWN0ID0gb2JqZWN0ICYmIG9iamVjdC4kJHR5cGVvZiksIG9iamVjdCkpIHtcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9DT05URVhUX1RZUEU6XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRTpcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfTUVNT19UWVBFOlxuICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfQ09OU1VNRVJfVFlQRTpcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiAkJHR5cGVvZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgcmV0dXJuICQkdHlwZW9mO1xuICAgIH1cbiAgfVxufVxuZXhwb3J0cy5Db250ZXh0Q29uc3VtZXIgPSBSRUFDVF9DT05TVU1FUl9UWVBFO1xuZXhwb3J0cy5Db250ZXh0UHJvdmlkZXIgPSBSRUFDVF9DT05URVhUX1RZUEU7XG5leHBvcnRzLkVsZW1lbnQgPSBSRUFDVF9FTEVNRU5UX1RZUEU7XG5leHBvcnRzLkZvcndhcmRSZWYgPSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFO1xuZXhwb3J0cy5GcmFnbWVudCA9IFJFQUNUX0ZSQUdNRU5UX1RZUEU7XG5leHBvcnRzLkxhenkgPSBSRUFDVF9MQVpZX1RZUEU7XG5leHBvcnRzLk1lbW8gPSBSRUFDVF9NRU1PX1RZUEU7XG5leHBvcnRzLlBvcnRhbCA9IFJFQUNUX1BPUlRBTF9UWVBFO1xuZXhwb3J0cy5Qcm9maWxlciA9IFJFQUNUX1BST0ZJTEVSX1RZUEU7XG5leHBvcnRzLlN0cmljdE1vZGUgPSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFO1xuZXhwb3J0cy5TdXNwZW5zZSA9IFJFQUNUX1NVU1BFTlNFX1RZUEU7XG5leHBvcnRzLlN1c3BlbnNlTGlzdCA9IFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRTtcbmV4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXIgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfQ09OU1VNRVJfVFlQRTtcbn07XG5leHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0NPTlRFWFRfVFlQRTtcbn07XG5leHBvcnRzLmlzRWxlbWVudCA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgcmV0dXJuIChcbiAgICBcIm9iamVjdFwiID09PSB0eXBlb2Ygb2JqZWN0ICYmXG4gICAgbnVsbCAhPT0gb2JqZWN0ICYmXG4gICAgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEVcbiAgKTtcbn07XG5leHBvcnRzLmlzRm9yd2FyZFJlZiA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFO1xufTtcbmV4cG9ydHMuaXNGcmFnbWVudCA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFO1xufTtcbmV4cG9ydHMuaXNMYXp5ID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0xBWllfVFlQRTtcbn07XG5leHBvcnRzLmlzTWVtbyA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9NRU1PX1RZUEU7XG59O1xuZXhwb3J0cy5pc1BvcnRhbCA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9QT1JUQUxfVFlQRTtcbn07XG5leHBvcnRzLmlzUHJvZmlsZXIgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfUFJPRklMRVJfVFlQRTtcbn07XG5leHBvcnRzLmlzU3RyaWN0TW9kZSA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFO1xufTtcbmV4cG9ydHMuaXNTdXNwZW5zZSA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9TVVNQRU5TRV9UWVBFO1xufTtcbmV4cG9ydHMuaXNTdXNwZW5zZUxpc3QgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFO1xufTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgcmV0dXJuIFwic3RyaW5nXCIgPT09IHR5cGVvZiB0eXBlIHx8XG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdHlwZSB8fFxuICAgIHR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUgfHxcbiAgICB0eXBlID09PSBSRUFDVF9QUk9GSUxFUl9UWVBFIHx8XG4gICAgdHlwZSA9PT0gUkVBQ1RfU1RSSUNUX01PREVfVFlQRSB8fFxuICAgIHR5cGUgPT09IFJFQUNUX1NVU1BFTlNFX1RZUEUgfHxcbiAgICB0eXBlID09PSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUgfHxcbiAgICB0eXBlID09PSBSRUFDVF9PRkZTQ1JFRU5fVFlQRSB8fFxuICAgIChcIm9iamVjdFwiID09PSB0eXBlb2YgdHlwZSAmJlxuICAgICAgbnVsbCAhPT0gdHlwZSAmJlxuICAgICAgKHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0xBWllfVFlQRSB8fFxuICAgICAgICB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9NRU1PX1RZUEUgfHxcbiAgICAgICAgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFIHx8XG4gICAgICAgIHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlNVTUVSX1RZUEUgfHxcbiAgICAgICAgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSB8fFxuICAgICAgICB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9DTElFTlRfUkVGRVJFTkNFIHx8XG4gICAgICAgIHZvaWQgMCAhPT0gdHlwZS5nZXRNb2R1bGVJZCkpXG4gICAgPyAhMFxuICAgIDogITE7XG59O1xuZXhwb3J0cy50eXBlT2YgPSB0eXBlT2Y7XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGY9cmVxdWlyZShcInJlYWN0XCIpLGs9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksbD1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksbT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LG49Zi5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRC5SZWFjdEN1cnJlbnRPd25lcixwPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBxKGMsYSxnKXt2YXIgYixkPXt9LGU9bnVsbCxoPW51bGw7dm9pZCAwIT09ZyYmKGU9XCJcIitnKTt2b2lkIDAhPT1hLmtleSYmKGU9XCJcIithLmtleSk7dm9pZCAwIT09YS5yZWYmJihoPWEucmVmKTtmb3IoYiBpbiBhKW0uY2FsbChhLGIpJiYhcC5oYXNPd25Qcm9wZXJ0eShiKSYmKGRbYl09YVtiXSk7aWYoYyYmYy5kZWZhdWx0UHJvcHMpZm9yKGIgaW4gYT1jLmRlZmF1bHRQcm9wcyxhKXZvaWQgMD09PWRbYl0mJihkW2JdPWFbYl0pO3JldHVybnskJHR5cGVvZjprLHR5cGU6YyxrZXk6ZSxyZWY6aCxwcm9wczpkLF9vd25lcjpuLmN1cnJlbnR9fWV4cG9ydHMuRnJhZ21lbnQ9bDtleHBvcnRzLmpzeD1xO2V4cG9ydHMuanN4cz1xO1xuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBsPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLG49U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSxwPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxxPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxyPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSx0PVN5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKSx1PVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLHY9U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLHc9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLHg9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIikseT1TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKSx6PVN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBBKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT16JiZhW3pdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG52YXIgQj17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sQz1PYmplY3QuYXNzaWduLEQ9e307ZnVuY3Rpb24gRShhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1lfHxCfUUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307XG5FLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3IoXCJzZXRTdGF0ZSguLi4pOiB0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcy5cIik7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtFLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBGKCl7fUYucHJvdG90eXBlPUUucHJvdG90eXBlO2Z1bmN0aW9uIEcoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZXx8Qn12YXIgSD1HLnByb3RvdHlwZT1uZXcgRjtcbkguY29uc3RydWN0b3I9RztDKEgsRS5wcm90b3R5cGUpO0guaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEk9QXJyYXkuaXNBcnJheSxKPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksSz17Y3VycmVudDpudWxsfSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixlKXt2YXIgZCxjPXt9LGs9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoZCBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoaz1cIlwiK2Iua2V5KSxiKUouY2FsbChiLGQpJiYhTC5oYXNPd25Qcm9wZXJ0eShkKSYmKGNbZF09YltkXSk7dmFyIGc9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1nKWMuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zyl7Zm9yKHZhciBmPUFycmF5KGcpLG09MDttPGc7bSsrKWZbbV09YXJndW1lbnRzW20rMl07Yy5jaGlsZHJlbj1mfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihkIGluIGc9YS5kZWZhdWx0UHJvcHMsZyl2b2lkIDA9PT1jW2RdJiYoY1tkXT1nW2RdKTtyZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEsa2V5OmsscmVmOmgscHJvcHM6Yyxfb3duZXI6Sy5jdXJyZW50fX1cbmZ1bmN0aW9uIE4oYSxiKXtyZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE8oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWx9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIithLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBQPS9cXC8rL2c7ZnVuY3Rpb24gUShhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShcIlwiK2Eua2V5KTpiLnRvU3RyaW5nKDM2KX1cbmZ1bmN0aW9uIFIoYSxiLGUsZCxjKXt2YXIgaz10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09a3x8XCJib29sZWFuXCI9PT1rKWE9bnVsbDt2YXIgaD0hMTtpZihudWxsPT09YSloPSEwO2Vsc2Ugc3dpdGNoKGspe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6aD0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgbDpjYXNlIG46aD0hMH19aWYoaClyZXR1cm4gaD1hLGM9YyhoKSxhPVwiXCI9PT1kP1wiLlwiK1EoaCwwKTpkLEkoYyk/KGU9XCJcIixudWxsIT1hJiYoZT1hLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIiksUihjLGIsZSxcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBhfSkpOm51bGwhPWMmJihPKGMpJiYoYz1OKGMsZSsoIWMua2V5fHxoJiZoLmtleT09PWMua2V5P1wiXCI6KFwiXCIrYy5rZXkpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIikrYSkpLGIucHVzaChjKSksMTtoPTA7ZD1cIlwiPT09ZD9cIi5cIjpkK1wiOlwiO2lmKEkoYSkpZm9yKHZhciBnPTA7ZzxhLmxlbmd0aDtnKyspe2s9XG5hW2ddO3ZhciBmPWQrUShrLGcpO2grPVIoayxiLGUsZixjKX1lbHNlIGlmKGY9QShhKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksZz0wOyEoaz1hLm5leHQoKSkuZG9uZTspaz1rLnZhbHVlLGY9ZCtRKGssZysrKSxoKz1SKGssYixlLGYsYyk7ZWxzZSBpZihcIm9iamVjdFwiPT09ayl0aHJvdyBiPVN0cmluZyhhKSxFcnJvcihcIk9iamVjdHMgYXJlIG5vdCB2YWxpZCBhcyBhIFJlYWN0IGNoaWxkIChmb3VuZDogXCIrKFwiW29iamVjdCBPYmplY3RdXCI9PT1iP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmIpK1wiKS4gSWYgeW91IG1lYW50IHRvIHJlbmRlciBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4sIHVzZSBhbiBhcnJheSBpbnN0ZWFkLlwiKTtyZXR1cm4gaH1cbmZ1bmN0aW9uIFMoYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGQ9W10sYz0wO1IoYSxkLFwiXCIsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYi5jYWxsKGUsYSxjKyspfSk7cmV0dXJuIGR9ZnVuY3Rpb24gVChhKXtpZigtMT09PWEuX3N0YXR1cyl7dmFyIGI9YS5fcmVzdWx0O2I9YigpO2IudGhlbihmdW5jdGlvbihiKXtpZigwPT09YS5fc3RhdHVzfHwtMT09PWEuX3N0YXR1cylhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yn0sZnVuY3Rpb24oYil7aWYoMD09PWEuX3N0YXR1c3x8LTE9PT1hLl9zdGF0dXMpYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWJ9KTstMT09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0wLGEuX3Jlc3VsdD1iKX1pZigxPT09YS5fc3RhdHVzKXJldHVybiBhLl9yZXN1bHQuZGVmYXVsdDt0aHJvdyBhLl9yZXN1bHQ7fVxudmFyIFU9e2N1cnJlbnQ6bnVsbH0sVj17dHJhbnNpdGlvbjpudWxsfSxXPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlUsUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6VixSZWFjdEN1cnJlbnRPd25lcjpLfTtmdW5jdGlvbiBYKCl7dGhyb3cgRXJyb3IoXCJhY3QoLi4uKSBpcyBub3Qgc3VwcG9ydGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzIG9mIFJlYWN0LlwiKTt9XG5leHBvcnRzLkNoaWxkcmVuPXttYXA6Uyxmb3JFYWNoOmZ1bmN0aW9uKGEsYixlKXtTKGEsZnVuY3Rpb24oKXtiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sZSl9LGNvdW50OmZ1bmN0aW9uKGEpe3ZhciBiPTA7UyhhLGZ1bmN0aW9uKCl7YisrfSk7cmV0dXJuIGJ9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuIFMoYSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pfHxbXX0sb25seTpmdW5jdGlvbihhKXtpZighTyhhKSl0aHJvdyBFcnJvcihcIlJlYWN0LkNoaWxkcmVuLm9ubHkgZXhwZWN0ZWQgdG8gcmVjZWl2ZSBhIHNpbmdsZSBSZWFjdCBlbGVtZW50IGNoaWxkLlwiKTtyZXR1cm4gYX19O2V4cG9ydHMuQ29tcG9uZW50PUU7ZXhwb3J0cy5GcmFnbWVudD1wO2V4cG9ydHMuUHJvZmlsZXI9cjtleHBvcnRzLlB1cmVDb21wb25lbnQ9RztleHBvcnRzLlN0cmljdE1vZGU9cTtleHBvcnRzLlN1c3BlbnNlPXc7XG5leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPVc7ZXhwb3J0cy5hY3Q9WDtcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcihcIlJlYWN0LmNsb25lRWxlbWVudCguLi4pOiBUaGUgYXJndW1lbnQgbXVzdCBiZSBhIFJlYWN0IGVsZW1lbnQsIGJ1dCB5b3UgcGFzc2VkIFwiK2ErXCIuXCIpO3ZhciBkPUMoe30sYS5wcm9wcyksYz1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Sy5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGM9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilKLmNhbGwoYixmKSYmIUwuaGFzT3duUHJvcGVydHkoZikmJihkW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO1xuZm9yKHZhciBtPTA7bTxmO20rKylnW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49Z31yZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEudHlwZSxrZXk6YyxyZWY6ayxwcm9wczpkLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEpe2E9eyQkdHlwZW9mOnUsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsLF9kZWZhdWx0VmFsdWU6bnVsbCxfZ2xvYmFsTmFtZTpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp0LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1NO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07XG5leHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PU87ZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp5LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6VH19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp4LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy5zdGFydFRyYW5zaXRpb249ZnVuY3Rpb24oYSl7dmFyIGI9Vi50cmFuc2l0aW9uO1YudHJhbnNpdGlvbj17fTt0cnl7YSgpfWZpbmFsbHl7Vi50cmFuc2l0aW9uPWJ9fTtleHBvcnRzLnVuc3RhYmxlX2FjdD1YO2V4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNvbnRleHQoYSl9O1xuZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZURlZmVycmVkVmFsdWU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VEZWZlcnJlZFZhbHVlKGEpfTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSWQ9ZnVuY3Rpb24oKXtyZXR1cm4gVS5jdXJyZW50LnVzZUlkKCl9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixlKX07ZXhwb3J0cy51c2VJbnNlcnRpb25FZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUluc2VydGlvbkVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTGF5b3V0RWZmZWN0KGEsYil9O1xuZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWR1Y2VyKGEsYixlKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VTdGF0ZShhKX07ZXhwb3J0cy51c2VTeW5jRXh0ZXJuYWxTdG9yZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VTeW5jRXh0ZXJuYWxTdG9yZShhLGIsZSl9O2V4cG9ydHMudXNlVHJhbnNpdGlvbj1mdW5jdGlvbigpe3JldHVybiBVLmN1cnJlbnQudXNlVHJhbnNpdGlvbigpfTtleHBvcnRzLnZlcnNpb249XCIxOC4zLjFcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO2Z1bmN0aW9uIGYoYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzA8Yzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKDA8ZyhlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gaChhKXtyZXR1cm4gMD09PWEubGVuZ3RoP251bGw6YVswXX1mdW5jdGlvbiBrKGEpe2lmKDA9PT1hLmxlbmd0aClyZXR1cm4gbnVsbDt2YXIgYj1hWzBdLGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aCx3PWU+Pj4xO2Q8dzspe3ZhciBtPTIqKGQrMSktMSxDPWFbbV0sbj1tKzEseD1hW25dO2lmKDA+ZyhDLGMpKW48ZSYmMD5nKHgsQyk/KGFbZF09eCxhW25dPWMsZD1uKTooYVtkXT1DLGFbbV09YyxkPW0pO2Vsc2UgaWYobjxlJiYwPmcoeCxjKSlhW2RdPXgsYVtuXT1jLGQ9bjtlbHNlIGJyZWFrIGF9fXJldHVybiBifVxuZnVuY3Rpb24gZyhhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH1pZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19dmFyIHI9W10sdD1bXSx1PTEsdj1udWxsLHk9Myx6PSExLEE9ITEsQj0hMSxEPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6bnVsbCxFPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0Om51bGwsRj1cInVuZGVmaW5lZFwiIT09dHlwZW9mIHNldEltbWVkaWF0ZT9zZXRJbW1lZGlhdGU6bnVsbDtcblwidW5kZWZpbmVkXCIhPT10eXBlb2YgbmF2aWdhdG9yJiZ2b2lkIDAhPT1uYXZpZ2F0b3Iuc2NoZWR1bGluZyYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcuaXNJbnB1dFBlbmRpbmcmJm5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nLmJpbmQobmF2aWdhdG9yLnNjaGVkdWxpbmcpO2Z1bmN0aW9uIEcoYSl7Zm9yKHZhciBiPWgodCk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylrKHQpO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpayh0KSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLGYocixiKTtlbHNlIGJyZWFrO2I9aCh0KX19ZnVuY3Rpb24gSChhKXtCPSExO0coYSk7aWYoIUEpaWYobnVsbCE9PWgocikpQT0hMCxJKEopO2Vsc2V7dmFyIGI9aCh0KTtudWxsIT09YiYmSyhILGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIEooYSxiKXtBPSExO0ImJihCPSExLEUoTCksTD0tMSk7ej0hMDt2YXIgYz15O3RyeXtHKGIpO2Zvcih2PWgocik7bnVsbCE9PXYmJighKHYuZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFNKCkpOyl7dmFyIGQ9di5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7di5jYWxsYmFjaz1udWxsO3k9di5wcmlvcml0eUxldmVsO3ZhciBlPWQodi5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP3YuY2FsbGJhY2s9ZTp2PT09aChyKSYmayhyKTtHKGIpfWVsc2UgayhyKTt2PWgocil9aWYobnVsbCE9PXYpdmFyIHc9ITA7ZWxzZXt2YXIgbT1oKHQpO251bGwhPT1tJiZLKEgsbS5zdGFydFRpbWUtYik7dz0hMX1yZXR1cm4gd31maW5hbGx5e3Y9bnVsbCx5PWMsej0hMX19dmFyIE49ITEsTz1udWxsLEw9LTEsUD01LFE9LTE7XG5mdW5jdGlvbiBNKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCktUTxQPyExOiEwfWZ1bmN0aW9uIFIoKXtpZihudWxsIT09Tyl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtRPWE7dmFyIGI9ITA7dHJ5e2I9TyghMCxhKX1maW5hbGx5e2I/UygpOihOPSExLE89bnVsbCl9fWVsc2UgTj0hMX12YXIgUztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgRilTPWZ1bmN0aW9uKCl7RihSKX07ZWxzZSBpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgVD1uZXcgTWVzc2FnZUNoYW5uZWwsVT1ULnBvcnQyO1QucG9ydDEub25tZXNzYWdlPVI7Uz1mdW5jdGlvbigpe1UucG9zdE1lc3NhZ2UobnVsbCl9fWVsc2UgUz1mdW5jdGlvbigpe0QoUiwwKX07ZnVuY3Rpb24gSShhKXtPPWE7Tnx8KE49ITAsUygpKX1mdW5jdGlvbiBLKGEsYil7TD1EKGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9XG5leHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7QXx8enx8KEE9ITAsSShKKSl9O1xuZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6UD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiB5fTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIGgocil9O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goeSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9eX12YXIgYz15O3k9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e3k9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O1xuZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9eTt5PWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXt5PWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jPyhjPWMuZGVsYXksYz1cIm51bWJlclwiPT09dHlwZW9mIGMmJjA8Yz9kK2M6ZCk6Yz1kO3N3aXRjaChhKXtjYXNlIDE6dmFyIGU9LTE7YnJlYWs7Y2FzZSAyOmU9MjUwO2JyZWFrO2Nhc2UgNTplPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmU9MUU0O2JyZWFrO2RlZmF1bHQ6ZT01RTN9ZT1jK2U7YT17aWQ6dSsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTpjLGV4cGlyYXRpb25UaW1lOmUsc29ydEluZGV4Oi0xfTtjPmQ/KGEuc29ydEluZGV4PWMsZih0LGEpLG51bGw9PT1oKHIpJiZhPT09aCh0KSYmKEI/KEUoTCksTD0tMSk6Qj0hMCxLKEgsYy1kKSkpOihhLnNvcnRJbmRleD1lLGYocixhKSxBfHx6fHwoQT0hMCxJKEopKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1NO2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPXk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e3k9Y319fTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCLCBjb21wYXJlLCBjb21wYXJlQ29udGV4dCkge1xuICB2YXIgcmV0ID0gY29tcGFyZSA/IGNvbXBhcmUuY2FsbChjb21wYXJlQ29udGV4dCwgb2JqQSwgb2JqQikgOiB2b2lkIDA7XG5cbiAgaWYgKHJldCAhPT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuICEhcmV0O1xuICB9XG5cbiAgaWYgKG9iakEgPT09IG9iakIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gXCJvYmplY3RcIiB8fCAhb2JqQSB8fCB0eXBlb2Ygb2JqQiAhPT0gXCJvYmplY3RcIiB8fCAhb2JqQikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgYkhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5iaW5kKG9iakIpO1xuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IGtleXNBLmxlbmd0aDsgaWR4KyspIHtcbiAgICB2YXIga2V5ID0ga2V5c0FbaWR4XTtcblxuICAgIGlmICghYkhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWVBID0gb2JqQVtrZXldO1xuICAgIHZhciB2YWx1ZUIgPSBvYmpCW2tleV07XG5cbiAgICByZXQgPSBjb21wYXJlID8gY29tcGFyZS5jYWxsKGNvbXBhcmVDb250ZXh0LCB2YWx1ZUEsIHZhbHVlQiwga2V5KSA6IHZvaWQgMDtcblxuICAgIGlmIChyZXQgPT09IGZhbHNlIHx8IChyZXQgPT09IHZvaWQgMCAmJiB2YWx1ZUEgIT09IHZhbHVlQikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcbm9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJmdW5jdGlvbiBzdHlsaXNfbWluIChXKSB7XG4gIGZ1bmN0aW9uIE0oZCwgYywgZSwgaCwgYSkge1xuICAgIGZvciAodmFyIG0gPSAwLCBiID0gMCwgdiA9IDAsIG4gPSAwLCBxLCBnLCB4ID0gMCwgSyA9IDAsIGssIHUgPSBrID0gcSA9IDAsIGwgPSAwLCByID0gMCwgSSA9IDAsIHQgPSAwLCBCID0gZS5sZW5ndGgsIEogPSBCIC0gMSwgeSwgZiA9ICcnLCBwID0gJycsIEYgPSAnJywgRyA9ICcnLCBDOyBsIDwgQjspIHtcbiAgICAgIGcgPSBlLmNoYXJDb2RlQXQobCk7XG4gICAgICBsID09PSBKICYmIDAgIT09IGIgKyBuICsgdiArIG0gJiYgKDAgIT09IGIgJiYgKGcgPSA0NyA9PT0gYiA/IDEwIDogNDcpLCBuID0gdiA9IG0gPSAwLCBCKyssIEorKyk7XG5cbiAgICAgIGlmICgwID09PSBiICsgbiArIHYgKyBtKSB7XG4gICAgICAgIGlmIChsID09PSBKICYmICgwIDwgciAmJiAoZiA9IGYucmVwbGFjZShOLCAnJykpLCAwIDwgZi50cmltKCkubGVuZ3RoKSkge1xuICAgICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIGNhc2UgNTk6XG4gICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIGYgKz0gZS5jaGFyQXQobCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZyA9IDU5O1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgICAgY2FzZSAxMjM6XG4gICAgICAgICAgICBmID0gZi50cmltKCk7XG4gICAgICAgICAgICBxID0gZi5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgayA9IDE7XG5cbiAgICAgICAgICAgIGZvciAodCA9ICsrbDsgbCA8IEI7KSB7XG4gICAgICAgICAgICAgIHN3aXRjaCAoZyA9IGUuY2hhckNvZGVBdChsKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTIzOlxuICAgICAgICAgICAgICAgICAgaysrO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDEyNTpcbiAgICAgICAgICAgICAgICAgIGstLTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZyA9IGUuY2hhckNvZGVBdChsICsgMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgICAgICAgICBhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHUgPSBsICsgMTsgdSA8IEo7ICsrdSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUuY2hhckNvZGVBdCh1KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoNDIgPT09IGcgJiYgNDIgPT09IGUuY2hhckNvZGVBdCh1IC0gMSkgJiYgbCArIDIgIT09IHUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHUgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoNDcgPT09IGcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHUgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHU7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA5MTpcbiAgICAgICAgICAgICAgICAgIGcrKztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgICAgICAgICBnKys7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDM0OlxuICAgICAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICAgICAgICBmb3IgKDsgbCsrIDwgSiAmJiBlLmNoYXJDb2RlQXQobCkgIT09IGc7KSB7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICgwID09PSBrKSBicmVhaztcbiAgICAgICAgICAgICAgbCsrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBrID0gZS5zdWJzdHJpbmcodCwgbCk7XG4gICAgICAgICAgICAwID09PSBxICYmIChxID0gKGYgPSBmLnJlcGxhY2UoY2EsICcnKS50cmltKCkpLmNoYXJDb2RlQXQoMCkpO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKHEpIHtcbiAgICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgICAwIDwgciAmJiAoZiA9IGYucmVwbGFjZShOLCAnJykpO1xuICAgICAgICAgICAgICAgIGcgPSBmLmNoYXJDb2RlQXQoMSk7XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTAwOlxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDk6XG4gICAgICAgICAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgICAgICAgICAgIHIgPSBjO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgciA9IE87XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgayA9IE0oYywgciwgaywgZywgYSArIDEpO1xuICAgICAgICAgICAgICAgIHQgPSBrLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAwIDwgQSAmJiAociA9IFgoTywgZiwgSSksIEMgPSBIKDMsIGssIHIsIGMsIEQsIHosIHQsIGcsIGEsIGgpLCBmID0gci5qb2luKCcnKSwgdm9pZCAwICE9PSBDICYmIDAgPT09ICh0ID0gKGsgPSBDLnRyaW0oKSkubGVuZ3RoKSAmJiAoZyA9IDAsIGsgPSAnJykpO1xuICAgICAgICAgICAgICAgIGlmICgwIDwgdCkgc3dpdGNoIChnKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgICAgICAgICAgZiA9IGYucmVwbGFjZShkYSwgZWEpO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDEwMDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA5OlxuICAgICAgICAgICAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICAgICAgICAgICAgayA9IGYgKyAneycgKyBrICsgJ30nO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDc6XG4gICAgICAgICAgICAgICAgICAgIGYgPSBmLnJlcGxhY2UoZmEsICckMSAkMicpO1xuICAgICAgICAgICAgICAgICAgICBrID0gZiArICd7JyArIGsgKyAnfSc7XG4gICAgICAgICAgICAgICAgICAgIGsgPSAxID09PSB3IHx8IDIgPT09IHcgJiYgTCgnQCcgKyBrLCAzKSA/ICdALXdlYmtpdC0nICsgayArICdAJyArIGsgOiAnQCcgKyBrO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgayA9IGYgKyBrLCAxMTIgPT09IGggJiYgKGsgPSAocCArPSBrLCAnJykpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBrID0gJyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBrID0gTShjLCBYKGMsIGYsIEkpLCBrLCBoLCBhICsgMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEYgKz0gaztcbiAgICAgICAgICAgIGsgPSBJID0gciA9IHUgPSBxID0gMDtcbiAgICAgICAgICAgIGYgPSAnJztcbiAgICAgICAgICAgIGcgPSBlLmNoYXJDb2RlQXQoKytsKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgY2FzZSA1OTpcbiAgICAgICAgICAgIGYgPSAoMCA8IHIgPyBmLnJlcGxhY2UoTiwgJycpIDogZikudHJpbSgpO1xuICAgICAgICAgICAgaWYgKDEgPCAodCA9IGYubGVuZ3RoKSkgc3dpdGNoICgwID09PSB1ICYmIChxID0gZi5jaGFyQ29kZUF0KDApLCA0NSA9PT0gcSB8fCA5NiA8IHEgJiYgMTIzID4gcSkgJiYgKHQgPSAoZiA9IGYucmVwbGFjZSgnICcsICc6JykpLmxlbmd0aCksIDAgPCBBICYmIHZvaWQgMCAhPT0gKEMgPSBIKDEsIGYsIGMsIGQsIEQsIHosIHAubGVuZ3RoLCBoLCBhLCBoKSkgJiYgMCA9PT0gKHQgPSAoZiA9IEMudHJpbSgpKS5sZW5ndGgpICYmIChmID0gJ1xceDAwXFx4MDAnKSwgcSA9IGYuY2hhckNvZGVBdCgwKSwgZyA9IGYuY2hhckNvZGVBdCgxKSwgcSkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgICBpZiAoMTA1ID09PSBnIHx8IDk5ID09PSBnKSB7XG4gICAgICAgICAgICAgICAgICBHICs9IGYgKyBlLmNoYXJBdChsKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIDU4ICE9PSBmLmNoYXJDb2RlQXQodCAtIDEpICYmIChwICs9IFAoZiwgcSwgZywgZi5jaGFyQ29kZUF0KDIpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBJID0gciA9IHUgPSBxID0gMDtcbiAgICAgICAgICAgIGYgPSAnJztcbiAgICAgICAgICAgIGcgPSBlLmNoYXJDb2RlQXQoKytsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICA0NyA9PT0gYiA/IGIgPSAwIDogMCA9PT0gMSArIHEgJiYgMTA3ICE9PSBoICYmIDAgPCBmLmxlbmd0aCAmJiAociA9IDEsIGYgKz0gJ1xceDAwJyk7XG4gICAgICAgICAgMCA8IEEgKiBZICYmIEgoMCwgZiwgYywgZCwgRCwgeiwgcC5sZW5ndGgsIGgsIGEsIGgpO1xuICAgICAgICAgIHogPSAxO1xuICAgICAgICAgIEQrKztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDU5OlxuICAgICAgICBjYXNlIDEyNTpcbiAgICAgICAgICBpZiAoMCA9PT0gYiArIG4gKyB2ICsgbSkge1xuICAgICAgICAgICAgeisrO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgeisrO1xuICAgICAgICAgIHkgPSBlLmNoYXJBdChsKTtcblxuICAgICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG4gKyBtICsgYikgc3dpdGNoICh4KSB7XG4gICAgICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgICAgICBjYXNlIDU4OlxuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgICAgICAgeSA9ICcnO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgMzIgIT09IGcgJiYgKHkgPSAnICcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgIHkgPSAnXFxcXDAnO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgeSA9ICdcXFxcZic7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICB5ID0gJ1xcXFx2JztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMzg6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiAociA9IEkgPSAxLCB5ID0gJ1xcZicgKyB5KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMTA4OlxuICAgICAgICAgICAgICBpZiAoMCA9PT0gbiArIGIgKyBtICsgRSAmJiAwIDwgdSkgc3dpdGNoIChsIC0gdSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgIDExMiA9PT0geCAmJiA1OCA9PT0gZS5jaGFyQ29kZUF0KGwgLSAzKSAmJiAoRSA9IHgpO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgMTExID09PSBLICYmIChFID0gSyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNTg6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiAodSA9IGwpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgICAgMCA9PT0gYiArIHYgKyBuICsgbSAmJiAociA9IDEsIHkgKz0gJ1xccicpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICAgIDAgPT09IGIgJiYgKG4gPSBuID09PSBnID8gMCA6IDAgPT09IG4gPyBnIDogbik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDkxOlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIHYgJiYgbSsrO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA5MzpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyB2ICYmIG0tLTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDE6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiB2LS07XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgICBpZiAoMCA9PT0gbiArIGIgKyBtKSB7XG4gICAgICAgICAgICAgICAgaWYgKDAgPT09IHEpIHN3aXRjaCAoMiAqIHggKyAzICogSykge1xuICAgICAgICAgICAgICAgICAgY2FzZSA1MzM6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBxID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdisrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICAgIDAgPT09IGIgKyB2ICsgbiArIG0gKyB1ICsgayAmJiAoayA9IDEpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgIGlmICghKDAgPCBuICsgbSArIHYpKSBzd2l0Y2ggKGIpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICBzd2l0Y2ggKDIgKiBnICsgMyAqIGUuY2hhckNvZGVBdChsICsgMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyMzU6XG4gICAgICAgICAgICAgICAgICAgICAgYiA9IDQ3O1xuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjIwOlxuICAgICAgICAgICAgICAgICAgICAgIHQgPSBsLCBiID0gNDI7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgICAgICAgIDQ3ID09PSBnICYmIDQyID09PSB4ICYmIHQgKyAyICE9PSBsICYmICgzMyA9PT0gZS5jaGFyQ29kZUF0KHQgKyAyKSAmJiAocCArPSBlLnN1YnN0cmluZyh0LCBsICsgMSkpLCB5ID0gJycsIGIgPSAwKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIDAgPT09IGIgJiYgKGYgKz0geSk7XG4gICAgICB9XG5cbiAgICAgIEsgPSB4O1xuICAgICAgeCA9IGc7XG4gICAgICBsKys7XG4gICAgfVxuXG4gICAgdCA9IHAubGVuZ3RoO1xuXG4gICAgaWYgKDAgPCB0KSB7XG4gICAgICByID0gYztcbiAgICAgIGlmICgwIDwgQSAmJiAoQyA9IEgoMiwgcCwgciwgZCwgRCwgeiwgdCwgaCwgYSwgaCksIHZvaWQgMCAhPT0gQyAmJiAwID09PSAocCA9IEMpLmxlbmd0aCkpIHJldHVybiBHICsgcCArIEY7XG4gICAgICBwID0gci5qb2luKCcsJykgKyAneycgKyBwICsgJ30nO1xuXG4gICAgICBpZiAoMCAhPT0gdyAqIEUpIHtcbiAgICAgICAgMiAhPT0gdyB8fCBMKHAsIDIpIHx8IChFID0gMCk7XG5cbiAgICAgICAgc3dpdGNoIChFKSB7XG4gICAgICAgICAgY2FzZSAxMTE6XG4gICAgICAgICAgICBwID0gcC5yZXBsYWNlKGhhLCAnOi1tb3otJDEnKSArIHA7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTEyOlxuICAgICAgICAgICAgcCA9IHAucmVwbGFjZShRLCAnOjotd2Via2l0LWlucHV0LSQxJykgKyBwLnJlcGxhY2UoUSwgJzo6LW1vei0kMScpICsgcC5yZXBsYWNlKFEsICc6LW1zLWlucHV0LSQxJykgKyBwO1xuICAgICAgICB9XG5cbiAgICAgICAgRSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIEcgKyBwICsgRjtcbiAgfVxuXG4gIGZ1bmN0aW9uIFgoZCwgYywgZSkge1xuICAgIHZhciBoID0gYy50cmltKCkuc3BsaXQoaWEpO1xuICAgIGMgPSBoO1xuICAgIHZhciBhID0gaC5sZW5ndGgsXG4gICAgICAgIG0gPSBkLmxlbmd0aDtcblxuICAgIHN3aXRjaCAobSkge1xuICAgICAgY2FzZSAwOlxuICAgICAgY2FzZSAxOlxuICAgICAgICB2YXIgYiA9IDA7XG5cbiAgICAgICAgZm9yIChkID0gMCA9PT0gbSA/ICcnIDogZFswXSArICcgJzsgYiA8IGE7ICsrYikge1xuICAgICAgICAgIGNbYl0gPSBaKGQsIGNbYl0sIGUpLnRyaW0oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB2YXIgdiA9IGIgPSAwO1xuXG4gICAgICAgIGZvciAoYyA9IFtdOyBiIDwgYTsgKytiKSB7XG4gICAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCBtOyArK24pIHtcbiAgICAgICAgICAgIGNbdisrXSA9IFooZFtuXSArICcgJywgaFtiXSwgZSkudHJpbSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIGM7XG4gIH1cblxuICBmdW5jdGlvbiBaKGQsIGMsIGUpIHtcbiAgICB2YXIgaCA9IGMuY2hhckNvZGVBdCgwKTtcbiAgICAzMyA+IGggJiYgKGggPSAoYyA9IGMudHJpbSgpKS5jaGFyQ29kZUF0KDApKTtcblxuICAgIHN3aXRjaCAoaCkge1xuICAgICAgY2FzZSAzODpcbiAgICAgICAgcmV0dXJuIGMucmVwbGFjZShGLCAnJDEnICsgZC50cmltKCkpO1xuXG4gICAgICBjYXNlIDU4OlxuICAgICAgICByZXR1cm4gZC50cmltKCkgKyBjLnJlcGxhY2UoRiwgJyQxJyArIGQudHJpbSgpKTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKDAgPCAxICogZSAmJiAwIDwgYy5pbmRleE9mKCdcXGYnKSkgcmV0dXJuIGMucmVwbGFjZShGLCAoNTggPT09IGQuY2hhckNvZGVBdCgwKSA/ICcnIDogJyQxJykgKyBkLnRyaW0oKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGQgKyBjO1xuICB9XG5cbiAgZnVuY3Rpb24gUChkLCBjLCBlLCBoKSB7XG4gICAgdmFyIGEgPSBkICsgJzsnLFxuICAgICAgICBtID0gMiAqIGMgKyAzICogZSArIDQgKiBoO1xuXG4gICAgaWYgKDk0NCA9PT0gbSkge1xuICAgICAgZCA9IGEuaW5kZXhPZignOicsIDkpICsgMTtcbiAgICAgIHZhciBiID0gYS5zdWJzdHJpbmcoZCwgYS5sZW5ndGggLSAxKS50cmltKCk7XG4gICAgICBiID0gYS5zdWJzdHJpbmcoMCwgZCkudHJpbSgpICsgYiArICc7JztcbiAgICAgIHJldHVybiAxID09PSB3IHx8IDIgPT09IHcgJiYgTChiLCAxKSA/ICctd2Via2l0LScgKyBiICsgYiA6IGI7XG4gICAgfVxuXG4gICAgaWYgKDAgPT09IHcgfHwgMiA9PT0gdyAmJiAhTChhLCAxKSkgcmV0dXJuIGE7XG5cbiAgICBzd2l0Y2ggKG0pIHtcbiAgICAgIGNhc2UgMTAxNTpcbiAgICAgICAgcmV0dXJuIDk3ID09PSBhLmNoYXJDb2RlQXQoMTApID8gJy13ZWJraXQtJyArIGEgKyBhIDogYTtcblxuICAgICAgY2FzZSA5NTE6XG4gICAgICAgIHJldHVybiAxMTYgPT09IGEuY2hhckNvZGVBdCgzKSA/ICctd2Via2l0LScgKyBhICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgOTYzOlxuICAgICAgICByZXR1cm4gMTEwID09PSBhLmNoYXJDb2RlQXQoNSkgPyAnLXdlYmtpdC0nICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDEwMDk6XG4gICAgICAgIGlmICgxMDAgIT09IGEuY2hhckNvZGVBdCg0KSkgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTY5OlxuICAgICAgY2FzZSA5NDI6XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgOTc4OlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1vei0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgMTAxOTpcbiAgICAgIGNhc2UgOTgzOlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1vei0nICsgYSArICctbXMtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDg4MzpcbiAgICAgICAgaWYgKDQ1ID09PSBhLmNoYXJDb2RlQXQoOCkpIHJldHVybiAnLXdlYmtpdC0nICsgYSArIGE7XG4gICAgICAgIGlmICgwIDwgYS5pbmRleE9mKCdpbWFnZS1zZXQoJywgMTEpKSByZXR1cm4gYS5yZXBsYWNlKGphLCAnJDEtd2Via2l0LSQyJykgKyBhO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5MzI6XG4gICAgICAgIGlmICg0NSA9PT0gYS5jaGFyQ29kZUF0KDQpKSBzd2l0Y2ggKGEuY2hhckNvZGVBdCg1KSkge1xuICAgICAgICAgIGNhc2UgMTAzOlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LWJveC0nICsgYS5yZXBsYWNlKCctZ3JvdycsICcnKSArICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYS5yZXBsYWNlKCdncm93JywgJ3Bvc2l0aXZlJykgKyBhO1xuXG4gICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhLnJlcGxhY2UoJ3NocmluaycsICduZWdhdGl2ZScpICsgYTtcblxuICAgICAgICAgIGNhc2UgOTg6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhLnJlcGxhY2UoJ2Jhc2lzJywgJ3ByZWZlcnJlZC1zaXplJykgKyBhO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDk2NDpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LScgKyBhICsgYTtcblxuICAgICAgY2FzZSAxMDIzOlxuICAgICAgICBpZiAoOTkgIT09IGEuY2hhckNvZGVBdCg4KSkgYnJlYWs7XG4gICAgICAgIGIgPSBhLnN1YnN0cmluZyhhLmluZGV4T2YoJzonLCAxNSkpLnJlcGxhY2UoJ2ZsZXgtJywgJycpLnJlcGxhY2UoJ3NwYWNlLWJldHdlZW4nLCAnanVzdGlmeScpO1xuICAgICAgICByZXR1cm4gJy13ZWJraXQtYm94LXBhY2snICsgYiArICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LXBhY2snICsgYiArIGE7XG5cbiAgICAgIGNhc2UgMTAwNTpcbiAgICAgICAgcmV0dXJuIGthLnRlc3QoYSkgPyBhLnJlcGxhY2UoYWEsICc6LXdlYmtpdC0nKSArIGEucmVwbGFjZShhYSwgJzotbW96LScpICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgMWUzOlxuICAgICAgICBiID0gYS5zdWJzdHJpbmcoMTMpLnRyaW0oKTtcbiAgICAgICAgYyA9IGIuaW5kZXhPZignLScpICsgMTtcblxuICAgICAgICBzd2l0Y2ggKGIuY2hhckNvZGVBdCgwKSArIGIuY2hhckNvZGVBdChjKSkge1xuICAgICAgICAgIGNhc2UgMjI2OlxuICAgICAgICAgICAgYiA9IGEucmVwbGFjZShHLCAndGInKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMzI6XG4gICAgICAgICAgICBiID0gYS5yZXBsYWNlKEcsICd0Yi1ybCcpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDIyMDpcbiAgICAgICAgICAgIGIgPSBhLnJlcGxhY2UoRywgJ2xyJyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGIgKyBhO1xuXG4gICAgICBjYXNlIDEwMTc6XG4gICAgICAgIGlmICgtMSA9PT0gYS5pbmRleE9mKCdzdGlja3knLCA5KSkgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTc1OlxuICAgICAgICBjID0gKGEgPSBkKS5sZW5ndGggLSAxMDtcbiAgICAgICAgYiA9ICgzMyA9PT0gYS5jaGFyQ29kZUF0KGMpID8gYS5zdWJzdHJpbmcoMCwgYykgOiBhKS5zdWJzdHJpbmcoZC5pbmRleE9mKCc6JywgNykgKyAxKS50cmltKCk7XG5cbiAgICAgICAgc3dpdGNoIChtID0gYi5jaGFyQ29kZUF0KDApICsgKGIuY2hhckNvZGVBdCg3KSB8IDApKSB7XG4gICAgICAgICAgY2FzZSAyMDM6XG4gICAgICAgICAgICBpZiAoMTExID4gYi5jaGFyQ29kZUF0KDgpKSBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgYSA9IGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgYikgKyAnOycgKyBhO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDIwNzpcbiAgICAgICAgICBjYXNlIDEwMjpcbiAgICAgICAgICAgIGEgPSBhLnJlcGxhY2UoYiwgJy13ZWJraXQtJyArICgxMDIgPCBtID8gJ2lubGluZS0nIDogJycpICsgJ2JveCcpICsgJzsnICsgYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyBiKSArICc7JyArIGEucmVwbGFjZShiLCAnLW1zLScgKyBiICsgJ2JveCcpICsgJzsnICsgYTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhICsgJzsnO1xuXG4gICAgICBjYXNlIDkzODpcbiAgICAgICAgaWYgKDQ1ID09PSBhLmNoYXJDb2RlQXQoNSkpIHN3aXRjaCAoYS5jaGFyQ29kZUF0KDYpKSB7XG4gICAgICAgICAgY2FzZSAxMDU6XG4gICAgICAgICAgICByZXR1cm4gYiA9IGEucmVwbGFjZSgnLWl0ZW1zJywgJycpLCAnLXdlYmtpdC0nICsgYSArICctd2Via2l0LWJveC0nICsgYiArICctbXMtZmxleC0nICsgYiArIGE7XG5cbiAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC1pdGVtLScgKyBhLnJlcGxhY2UoYmEsICcnKSArIGE7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LWxpbmUtcGFjaycgKyBhLnJlcGxhY2UoJ2FsaWduLWNvbnRlbnQnLCAnJykucmVwbGFjZShiYSwgJycpICsgYTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5NzM6XG4gICAgICBjYXNlIDk4OTpcbiAgICAgICAgaWYgKDQ1ICE9PSBhLmNoYXJDb2RlQXQoMykgfHwgMTIyID09PSBhLmNoYXJDb2RlQXQoNCkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDkzMTpcbiAgICAgIGNhc2UgOTUzOlxuICAgICAgICBpZiAoITAgPT09IGxhLnRlc3QoZCkpIHJldHVybiAxMTUgPT09IChiID0gZC5zdWJzdHJpbmcoZC5pbmRleE9mKCc6JykgKyAxKSkuY2hhckNvZGVBdCgwKSA/IFAoZC5yZXBsYWNlKCdzdHJldGNoJywgJ2ZpbGwtYXZhaWxhYmxlJyksIGMsIGUsIGgpLnJlcGxhY2UoJzpmaWxsLWF2YWlsYWJsZScsICc6c3RyZXRjaCcpIDogYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyBiKSArIGEucmVwbGFjZShiLCAnLW1vei0nICsgYi5yZXBsYWNlKCdmaWxsLScsICcnKSkgKyBhO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5NjI6XG4gICAgICAgIGlmIChhID0gJy13ZWJraXQtJyArIGEgKyAoMTAyID09PSBhLmNoYXJDb2RlQXQoNSkgPyAnLW1zLScgKyBhIDogJycpICsgYSwgMjExID09PSBlICsgaCAmJiAxMDUgPT09IGEuY2hhckNvZGVBdCgxMykgJiYgMCA8IGEuaW5kZXhPZigndHJhbnNmb3JtJywgMTApKSByZXR1cm4gYS5zdWJzdHJpbmcoMCwgYS5pbmRleE9mKCc7JywgMjcpICsgMSkucmVwbGFjZShtYSwgJyQxLXdlYmtpdC0kMicpICsgYTtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEwoZCwgYykge1xuICAgIHZhciBlID0gZC5pbmRleE9mKDEgPT09IGMgPyAnOicgOiAneycpLFxuICAgICAgICBoID0gZC5zdWJzdHJpbmcoMCwgMyAhPT0gYyA/IGUgOiAxMCk7XG4gICAgZSA9IGQuc3Vic3RyaW5nKGUgKyAxLCBkLmxlbmd0aCAtIDEpO1xuICAgIHJldHVybiBSKDIgIT09IGMgPyBoIDogaC5yZXBsYWNlKG5hLCAnJDEnKSwgZSwgYyk7XG4gIH1cblxuICBmdW5jdGlvbiBlYShkLCBjKSB7XG4gICAgdmFyIGUgPSBQKGMsIGMuY2hhckNvZGVBdCgwKSwgYy5jaGFyQ29kZUF0KDEpLCBjLmNoYXJDb2RlQXQoMikpO1xuICAgIHJldHVybiBlICE9PSBjICsgJzsnID8gZS5yZXBsYWNlKG9hLCAnIG9yICgkMSknKS5zdWJzdHJpbmcoNCkgOiAnKCcgKyBjICsgJyknO1xuICB9XG5cbiAgZnVuY3Rpb24gSChkLCBjLCBlLCBoLCBhLCBtLCBiLCB2LCBuLCBxKSB7XG4gICAgZm9yICh2YXIgZyA9IDAsIHggPSBjLCB3OyBnIDwgQTsgKytnKSB7XG4gICAgICBzd2l0Y2ggKHcgPSBTW2ddLmNhbGwoQiwgZCwgeCwgZSwgaCwgYSwgbSwgYiwgdiwgbiwgcSkpIHtcbiAgICAgICAgY2FzZSB2b2lkIDA6XG4gICAgICAgIGNhc2UgITE6XG4gICAgICAgIGNhc2UgITA6XG4gICAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHggPSB3O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh4ICE9PSBjKSByZXR1cm4geDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFQoZCkge1xuICAgIHN3aXRjaCAoZCkge1xuICAgICAgY2FzZSB2b2lkIDA6XG4gICAgICBjYXNlIG51bGw6XG4gICAgICAgIEEgPSBTLmxlbmd0aCA9IDA7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGQpIFNbQSsrXSA9IGQ7ZWxzZSBpZiAoJ29iamVjdCcgPT09IHR5cGVvZiBkKSBmb3IgKHZhciBjID0gMCwgZSA9IGQubGVuZ3RoOyBjIDwgZTsgKytjKSB7XG4gICAgICAgICAgVChkW2NdKTtcbiAgICAgICAgfSBlbHNlIFkgPSAhIWQgfCAwO1xuICAgIH1cblxuICAgIHJldHVybiBUO1xuICB9XG5cbiAgZnVuY3Rpb24gVShkKSB7XG4gICAgZCA9IGQucHJlZml4O1xuICAgIHZvaWQgMCAhPT0gZCAmJiAoUiA9IG51bGwsIGQgPyAnZnVuY3Rpb24nICE9PSB0eXBlb2YgZCA/IHcgPSAxIDogKHcgPSAyLCBSID0gZCkgOiB3ID0gMCk7XG4gICAgcmV0dXJuIFU7XG4gIH1cblxuICBmdW5jdGlvbiBCKGQsIGMpIHtcbiAgICB2YXIgZSA9IGQ7XG4gICAgMzMgPiBlLmNoYXJDb2RlQXQoMCkgJiYgKGUgPSBlLnRyaW0oKSk7XG4gICAgViA9IGU7XG4gICAgZSA9IFtWXTtcblxuICAgIGlmICgwIDwgQSkge1xuICAgICAgdmFyIGggPSBIKC0xLCBjLCBlLCBlLCBELCB6LCAwLCAwLCAwLCAwKTtcbiAgICAgIHZvaWQgMCAhPT0gaCAmJiAnc3RyaW5nJyA9PT0gdHlwZW9mIGggJiYgKGMgPSBoKTtcbiAgICB9XG5cbiAgICB2YXIgYSA9IE0oTywgZSwgYywgMCwgMCk7XG4gICAgMCA8IEEgJiYgKGggPSBIKC0yLCBhLCBlLCBlLCBELCB6LCBhLmxlbmd0aCwgMCwgMCwgMCksIHZvaWQgMCAhPT0gaCAmJiAoYSA9IGgpKTtcbiAgICBWID0gJyc7XG4gICAgRSA9IDA7XG4gICAgeiA9IEQgPSAxO1xuICAgIHJldHVybiBhO1xuICB9XG5cbiAgdmFyIGNhID0gL15cXDArL2csXG4gICAgICBOID0gL1tcXDBcXHJcXGZdL2csXG4gICAgICBhYSA9IC86ICovZyxcbiAgICAgIGthID0gL3pvb3xncmEvLFxuICAgICAgbWEgPSAvKFssOiBdKSh0cmFuc2Zvcm0pL2csXG4gICAgICBpYSA9IC8sXFxyKz8vZyxcbiAgICAgIEYgPSAvKFtcXHRcXHJcXG4gXSkqXFxmPyYvZyxcbiAgICAgIGZhID0gL0Aoa1xcdyspXFxzKihcXFMqKVxccyovLFxuICAgICAgUSA9IC86OihwbGFjZSkvZyxcbiAgICAgIGhhID0gLzoocmVhZC1vbmx5KS9nLFxuICAgICAgRyA9IC9bc3ZoXVxcdystW3RibHJdezJ9LyxcbiAgICAgIGRhID0gL1xcKFxccyooLiopXFxzKlxcKS9nLFxuICAgICAgb2EgPSAvKFtcXHNcXFNdKj8pOy9nLFxuICAgICAgYmEgPSAvLXNlbGZ8ZmxleC0vZyxcbiAgICAgIG5hID0gL1teXSo/KDpbcnBdW2VsXWFbXFx3LV0rKVteXSovLFxuICAgICAgbGEgPSAvc3RyZXRjaHw6XFxzKlxcdytcXC0oPzpjb250ZXxhdmFpbCkvLFxuICAgICAgamEgPSAvKFteLV0pKGltYWdlLXNldFxcKCkvLFxuICAgICAgeiA9IDEsXG4gICAgICBEID0gMSxcbiAgICAgIEUgPSAwLFxuICAgICAgdyA9IDEsXG4gICAgICBPID0gW10sXG4gICAgICBTID0gW10sXG4gICAgICBBID0gMCxcbiAgICAgIFIgPSBudWxsLFxuICAgICAgWSA9IDAsXG4gICAgICBWID0gJyc7XG4gIEIudXNlID0gVDtcbiAgQi5zZXQgPSBVO1xuICB2b2lkIDAgIT09IFcgJiYgVShXKTtcbiAgcmV0dXJuIEI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxpc19taW47XG4iLCJ2YXIgdW5pdGxlc3NLZXlzID0ge1xuICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogMSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IDEsXG4gIGJvcmRlckltYWdlU2xpY2U6IDEsXG4gIGJvcmRlckltYWdlV2lkdGg6IDEsXG4gIGJveEZsZXg6IDEsXG4gIGJveEZsZXhHcm91cDogMSxcbiAgYm94T3JkaW5hbEdyb3VwOiAxLFxuICBjb2x1bW5Db3VudDogMSxcbiAgY29sdW1uczogMSxcbiAgZmxleDogMSxcbiAgZmxleEdyb3c6IDEsXG4gIGZsZXhQb3NpdGl2ZTogMSxcbiAgZmxleFNocmluazogMSxcbiAgZmxleE5lZ2F0aXZlOiAxLFxuICBmbGV4T3JkZXI6IDEsXG4gIGdyaWRSb3c6IDEsXG4gIGdyaWRSb3dFbmQ6IDEsXG4gIGdyaWRSb3dTcGFuOiAxLFxuICBncmlkUm93U3RhcnQ6IDEsXG4gIGdyaWRDb2x1bW46IDEsXG4gIGdyaWRDb2x1bW5FbmQ6IDEsXG4gIGdyaWRDb2x1bW5TcGFuOiAxLFxuICBncmlkQ29sdW1uU3RhcnQ6IDEsXG4gIG1zR3JpZFJvdzogMSxcbiAgbXNHcmlkUm93U3BhbjogMSxcbiAgbXNHcmlkQ29sdW1uOiAxLFxuICBtc0dyaWRDb2x1bW5TcGFuOiAxLFxuICBmb250V2VpZ2h0OiAxLFxuICBsaW5lSGVpZ2h0OiAxLFxuICBvcGFjaXR5OiAxLFxuICBvcmRlcjogMSxcbiAgb3JwaGFuczogMSxcbiAgdGFiU2l6ZTogMSxcbiAgd2lkb3dzOiAxLFxuICB6SW5kZXg6IDEsXG4gIHpvb206IDEsXG4gIFdlYmtpdExpbmVDbGFtcDogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdW5pdGxlc3NLZXlzO1xuIiwiZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgIGlmIChjYWNoZVthcmddID09PSB1bmRlZmluZWQpIGNhY2hlW2FyZ10gPSBmbihhcmcpO1xuICAgIHJldHVybiBjYWNoZVthcmddO1xuICB9O1xufVxuXG5leHBvcnQgeyBtZW1vaXplIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbnZhciByZWFjdFByb3BzUmVnZXggPSAvXigoY2hpbGRyZW58ZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8a2V5fHJlZnxhdXRvRm9jdXN8ZGVmYXVsdFZhbHVlfGRlZmF1bHRDaGVja2VkfGlubmVySFRNTHxzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmd8c3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nfHZhbHVlTGlua3xhYmJyfGFjY2VwdHxhY2NlcHRDaGFyc2V0fGFjY2Vzc0tleXxhY3Rpb258YWxsb3d8YWxsb3dVc2VyTWVkaWF8YWxsb3dQYXltZW50UmVxdWVzdHxhbGxvd0Z1bGxTY3JlZW58YWxsb3dUcmFuc3BhcmVuY3l8YWx0fGFzeW5jfGF1dG9Db21wbGV0ZXxhdXRvUGxheXxjYXB0dXJlfGNlbGxQYWRkaW5nfGNlbGxTcGFjaW5nfGNoYWxsZW5nZXxjaGFyU2V0fGNoZWNrZWR8Y2l0ZXxjbGFzc0lEfGNsYXNzTmFtZXxjb2xzfGNvbFNwYW58Y29udGVudHxjb250ZW50RWRpdGFibGV8Y29udGV4dE1lbnV8Y29udHJvbHN8Y29udHJvbHNMaXN0fGNvb3Jkc3xjcm9zc09yaWdpbnxkYXRhfGRhdGVUaW1lfGRlY29kaW5nfGRlZmF1bHR8ZGVmZXJ8ZGlyfGRpc2FibGVkfGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlfGRpc2FibGVSZW1vdGVQbGF5YmFja3xkb3dubG9hZHxkcmFnZ2FibGV8ZW5jVHlwZXxlbnRlcktleUhpbnR8ZmV0Y2hwcmlvcml0eXxmZXRjaFByaW9yaXR5fGZvcm18Zm9ybUFjdGlvbnxmb3JtRW5jVHlwZXxmb3JtTWV0aG9kfGZvcm1Ob1ZhbGlkYXRlfGZvcm1UYXJnZXR8ZnJhbWVCb3JkZXJ8aGVhZGVyc3xoZWlnaHR8aGlkZGVufGhpZ2h8aHJlZnxocmVmTGFuZ3xodG1sRm9yfGh0dHBFcXVpdnxpZHxpbnB1dE1vZGV8aW50ZWdyaXR5fGlzfGtleVBhcmFtc3xrZXlUeXBlfGtpbmR8bGFiZWx8bGFuZ3xsaXN0fGxvYWRpbmd8bG9vcHxsb3d8bWFyZ2luSGVpZ2h0fG1hcmdpbldpZHRofG1heHxtYXhMZW5ndGh8bWVkaWF8bWVkaWFHcm91cHxtZXRob2R8bWlufG1pbkxlbmd0aHxtdWx0aXBsZXxtdXRlZHxuYW1lfG5vbmNlfG5vVmFsaWRhdGV8b3BlbnxvcHRpbXVtfHBhdHRlcm58cGxhY2Vob2xkZXJ8cGxheXNJbmxpbmV8cG9zdGVyfHByZWxvYWR8cHJvZmlsZXxyYWRpb0dyb3VwfHJlYWRPbmx5fHJlZmVycmVyUG9saWN5fHJlbHxyZXF1aXJlZHxyZXZlcnNlZHxyb2xlfHJvd3N8cm93U3BhbnxzYW5kYm94fHNjb3BlfHNjb3BlZHxzY3JvbGxpbmd8c2VhbWxlc3N8c2VsZWN0ZWR8c2hhcGV8c2l6ZXxzaXplc3xzbG90fHNwYW58c3BlbGxDaGVja3xzcmN8c3JjRG9jfHNyY0xhbmd8c3JjU2V0fHN0YXJ0fHN0ZXB8c3R5bGV8c3VtbWFyeXx0YWJJbmRleHx0YXJnZXR8dGl0bGV8dHJhbnNsYXRlfHR5cGV8dXNlTWFwfHZhbHVlfHdpZHRofHdtb2RlfHdyYXB8YWJvdXR8ZGF0YXR5cGV8aW5saXN0fHByZWZpeHxwcm9wZXJ0eXxyZXNvdXJjZXx0eXBlb2Z8dm9jYWJ8YXV0b0NhcGl0YWxpemV8YXV0b0NvcnJlY3R8YXV0b1NhdmV8Y29sb3J8aW5jcmVtZW50YWx8ZmFsbGJhY2t8aW5lcnR8aXRlbVByb3B8aXRlbVNjb3BlfGl0ZW1UeXBlfGl0ZW1JRHxpdGVtUmVmfG9ufG9wdGlvbnxyZXN1bHRzfHNlY3VyaXR5fHVuc2VsZWN0YWJsZXxhY2NlbnRIZWlnaHR8YWNjdW11bGF0ZXxhZGRpdGl2ZXxhbGlnbm1lbnRCYXNlbGluZXxhbGxvd1Jlb3JkZXJ8YWxwaGFiZXRpY3xhbXBsaXR1ZGV8YXJhYmljRm9ybXxhc2NlbnR8YXR0cmlidXRlTmFtZXxhdHRyaWJ1dGVUeXBlfGF1dG9SZXZlcnNlfGF6aW11dGh8YmFzZUZyZXF1ZW5jeXxiYXNlbGluZVNoaWZ0fGJhc2VQcm9maWxlfGJib3h8YmVnaW58Ymlhc3xieXxjYWxjTW9kZXxjYXBIZWlnaHR8Y2xpcHxjbGlwUGF0aFVuaXRzfGNsaXBQYXRofGNsaXBSdWxlfGNvbG9ySW50ZXJwb2xhdGlvbnxjb2xvckludGVycG9sYXRpb25GaWx0ZXJzfGNvbG9yUHJvZmlsZXxjb2xvclJlbmRlcmluZ3xjb250ZW50U2NyaXB0VHlwZXxjb250ZW50U3R5bGVUeXBlfGN1cnNvcnxjeHxjeXxkfGRlY2VsZXJhdGV8ZGVzY2VudHxkaWZmdXNlQ29uc3RhbnR8ZGlyZWN0aW9ufGRpc3BsYXl8ZGl2aXNvcnxkb21pbmFudEJhc2VsaW5lfGR1cnxkeHxkeXxlZGdlTW9kZXxlbGV2YXRpb258ZW5hYmxlQmFja2dyb3VuZHxlbmR8ZXhwb25lbnR8ZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZHxmaWxsfGZpbGxPcGFjaXR5fGZpbGxSdWxlfGZpbHRlcnxmaWx0ZXJSZXN8ZmlsdGVyVW5pdHN8Zmxvb2RDb2xvcnxmbG9vZE9wYWNpdHl8Zm9jdXNhYmxlfGZvbnRGYW1pbHl8Zm9udFNpemV8Zm9udFNpemVBZGp1c3R8Zm9udFN0cmV0Y2h8Zm9udFN0eWxlfGZvbnRWYXJpYW50fGZvbnRXZWlnaHR8Zm9ybWF0fGZyb218ZnJ8Znh8Znl8ZzF8ZzJ8Z2x5cGhOYW1lfGdseXBoT3JpZW50YXRpb25Ib3Jpem9udGFsfGdseXBoT3JpZW50YXRpb25WZXJ0aWNhbHxnbHlwaFJlZnxncmFkaWVudFRyYW5zZm9ybXxncmFkaWVudFVuaXRzfGhhbmdpbmd8aG9yaXpBZHZYfGhvcml6T3JpZ2luWHxpZGVvZ3JhcGhpY3xpbWFnZVJlbmRlcmluZ3xpbnxpbjJ8aW50ZXJjZXB0fGt8azF8azJ8azN8azR8a2VybmVsTWF0cml4fGtlcm5lbFVuaXRMZW5ndGh8a2VybmluZ3xrZXlQb2ludHN8a2V5U3BsaW5lc3xrZXlUaW1lc3xsZW5ndGhBZGp1c3R8bGV0dGVyU3BhY2luZ3xsaWdodGluZ0NvbG9yfGxpbWl0aW5nQ29uZUFuZ2xlfGxvY2FsfG1hcmtlckVuZHxtYXJrZXJNaWR8bWFya2VyU3RhcnR8bWFya2VySGVpZ2h0fG1hcmtlclVuaXRzfG1hcmtlcldpZHRofG1hc2t8bWFza0NvbnRlbnRVbml0c3xtYXNrVW5pdHN8bWF0aGVtYXRpY2FsfG1vZGV8bnVtT2N0YXZlc3xvZmZzZXR8b3BhY2l0eXxvcGVyYXRvcnxvcmRlcnxvcmllbnR8b3JpZW50YXRpb258b3JpZ2lufG92ZXJmbG93fG92ZXJsaW5lUG9zaXRpb258b3ZlcmxpbmVUaGlja25lc3N8cGFub3NlMXxwYWludE9yZGVyfHBhdGhMZW5ndGh8cGF0dGVybkNvbnRlbnRVbml0c3xwYXR0ZXJuVHJhbnNmb3JtfHBhdHRlcm5Vbml0c3xwb2ludGVyRXZlbnRzfHBvaW50c3xwb2ludHNBdFh8cG9pbnRzQXRZfHBvaW50c0F0WnxwcmVzZXJ2ZUFscGhhfHByZXNlcnZlQXNwZWN0UmF0aW98cHJpbWl0aXZlVW5pdHN8cnxyYWRpdXN8cmVmWHxyZWZZfHJlbmRlcmluZ0ludGVudHxyZXBlYXRDb3VudHxyZXBlYXREdXJ8cmVxdWlyZWRFeHRlbnNpb25zfHJlcXVpcmVkRmVhdHVyZXN8cmVzdGFydHxyZXN1bHR8cm90YXRlfHJ4fHJ5fHNjYWxlfHNlZWR8c2hhcGVSZW5kZXJpbmd8c2xvcGV8c3BhY2luZ3xzcGVjdWxhckNvbnN0YW50fHNwZWN1bGFyRXhwb25lbnR8c3BlZWR8c3ByZWFkTWV0aG9kfHN0YXJ0T2Zmc2V0fHN0ZERldmlhdGlvbnxzdGVtaHxzdGVtdnxzdGl0Y2hUaWxlc3xzdG9wQ29sb3J8c3RvcE9wYWNpdHl8c3RyaWtldGhyb3VnaFBvc2l0aW9ufHN0cmlrZXRocm91Z2hUaGlja25lc3N8c3RyaW5nfHN0cm9rZXxzdHJva2VEYXNoYXJyYXl8c3Ryb2tlRGFzaG9mZnNldHxzdHJva2VMaW5lY2FwfHN0cm9rZUxpbmVqb2lufHN0cm9rZU1pdGVybGltaXR8c3Ryb2tlT3BhY2l0eXxzdHJva2VXaWR0aHxzdXJmYWNlU2NhbGV8c3lzdGVtTGFuZ3VhZ2V8dGFibGVWYWx1ZXN8dGFyZ2V0WHx0YXJnZXRZfHRleHRBbmNob3J8dGV4dERlY29yYXRpb258dGV4dFJlbmRlcmluZ3x0ZXh0TGVuZ3RofHRvfHRyYW5zZm9ybXx1MXx1Mnx1bmRlcmxpbmVQb3NpdGlvbnx1bmRlcmxpbmVUaGlja25lc3N8dW5pY29kZXx1bmljb2RlQmlkaXx1bmljb2RlUmFuZ2V8dW5pdHNQZXJFbXx2QWxwaGFiZXRpY3x2SGFuZ2luZ3x2SWRlb2dyYXBoaWN8dk1hdGhlbWF0aWNhbHx2YWx1ZXN8dmVjdG9yRWZmZWN0fHZlcnNpb258dmVydEFkdll8dmVydE9yaWdpblh8dmVydE9yaWdpbll8dmlld0JveHx2aWV3VGFyZ2V0fHZpc2liaWxpdHl8d2lkdGhzfHdvcmRTcGFjaW5nfHdyaXRpbmdNb2RlfHh8eEhlaWdodHx4MXx4Mnx4Q2hhbm5lbFNlbGVjdG9yfHhsaW5rQWN0dWF0ZXx4bGlua0FyY3JvbGV8eGxpbmtIcmVmfHhsaW5rUm9sZXx4bGlua1Nob3d8eGxpbmtUaXRsZXx4bGlua1R5cGV8eG1sQmFzZXx4bWxuc3x4bWxuc1hsaW5rfHhtbExhbmd8eG1sU3BhY2V8eXx5MXx5Mnx5Q2hhbm5lbFNlbGVjdG9yfHp8em9vbUFuZFBhbnxmb3J8Y2xhc3N8YXV0b2ZvY3VzKXwoKFtEZF1bQWFdW1R0XVtBYV18W0FhXVtScl1bSWldW0FhXXx4KS0uKikpJC87IC8vIGh0dHBzOi8vZXNiZW5jaC5jb20vYmVuY2gvNWJmZWU2OGE0Y2Q3ZTYwMDllZjYxZDIzXG5cbnZhciBpc1Byb3BWYWxpZCA9IC8qICNfX1BVUkVfXyAqL21lbW9pemUoZnVuY3Rpb24gKHByb3ApIHtcbiAgcmV0dXJuIHJlYWN0UHJvcHNSZWdleC50ZXN0KHByb3ApIHx8IHByb3AuY2hhckNvZGVBdCgwKSA9PT0gMTExXG4gIC8qIG8gKi9cbiAgJiYgcHJvcC5jaGFyQ29kZUF0KDEpID09PSAxMTBcbiAgLyogbiAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMikgPCA5MTtcbn1cbi8qIForMSAqL1xuKTtcblxuZXhwb3J0IHsgaXNQcm9wVmFsaWQgYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0e3R5cGVPZiBhcyBlLGlzRWxlbWVudCBhcyB0LGlzVmFsaWRFbGVtZW50VHlwZSBhcyBufWZyb21cInJlYWN0LWlzXCI7aW1wb3J0IHIse3VzZVN0YXRlIGFzIG8sdXNlQ29udGV4dCBhcyBzLHVzZU1lbW8gYXMgaSx1c2VFZmZlY3QgYXMgYSx1c2VSZWYgYXMgYyxjcmVhdGVFbGVtZW50IGFzIHUsdXNlTGF5b3V0RWZmZWN0IGFzIGx9ZnJvbVwicmVhY3RcIjtpbXBvcnQgZCBmcm9tXCJzaGFsbG93ZXF1YWxcIjtpbXBvcnQgaCBmcm9tXCJAZW1vdGlvbi9zdHlsaXNcIjtpbXBvcnQgcCBmcm9tXCJAZW1vdGlvbi91bml0bGVzc1wiO2ltcG9ydCBmIGZyb21cIkBlbW90aW9uL2lzLXByb3AtdmFsaWRcIjtpbXBvcnQgbSBmcm9tXCJob2lzdC1ub24tcmVhY3Qtc3RhdGljc1wiO2Z1bmN0aW9uIHkoKXtyZXR1cm4oeT1PYmplY3QuYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXt2YXIgbj1hcmd1bWVudHNbdF07Zm9yKHZhciByIGluIG4pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4scikmJihlW3JdPW5bcl0pfXJldHVybiBlfSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciB2PWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPVtlWzBdXSxyPTAsbz10Lmxlbmd0aDtyPG87cis9MSluLnB1c2godFtyXSxlW3IrMV0pO3JldHVybiBufSxnPWZ1bmN0aW9uKHQpe3JldHVybiBudWxsIT09dCYmXCJvYmplY3RcIj09dHlwZW9mIHQmJlwiW29iamVjdCBPYmplY3RdXCI9PT0odC50b1N0cmluZz90LnRvU3RyaW5nKCk6T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpKSYmIWUodCl9LFM9T2JqZWN0LmZyZWV6ZShbXSksdz1PYmplY3QuZnJlZXplKHt9KTtmdW5jdGlvbiBFKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGV9ZnVuY3Rpb24gYihlKXtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcInN0cmluZ1wiPT10eXBlb2YgZSYmZXx8ZS5kaXNwbGF5TmFtZXx8ZS5uYW1lfHxcIkNvbXBvbmVudFwifWZ1bmN0aW9uIF8oZSl7cmV0dXJuIGUmJlwic3RyaW5nXCI9PXR5cGVvZiBlLnN0eWxlZENvbXBvbmVudElkfXZhciBOPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBwcm9jZXNzJiZ2b2lkIDAhPT1wcm9jZXNzLmVudiYmKHByb2Nlc3MuZW52LlJFQUNUX0FQUF9TQ19BVFRSfHxwcm9jZXNzLmVudi5TQ19BVFRSKXx8XCJkYXRhLXN0eWxlZFwiLEE9XCI1LjMuMTFcIixDPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJlwiSFRNTEVsZW1lbnRcImluIHdpbmRvdyxJPUJvb2xlYW4oXCJib29sZWFuXCI9PXR5cGVvZiBTQ19ESVNBQkxFX1NQRUVEWT9TQ19ESVNBQkxFX1NQRUVEWTpcInVuZGVmaW5lZFwiIT10eXBlb2YgcHJvY2VzcyYmdm9pZCAwIT09cHJvY2Vzcy5lbnYmJih2b2lkIDAhPT1wcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFkmJlwiXCIhPT1wcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFk/XCJmYWxzZVwiIT09cHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NDX0RJU0FCTEVfU1BFRURZJiZwcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFk6dm9pZCAwIT09cHJvY2Vzcy5lbnYuU0NfRElTQUJMRV9TUEVFRFkmJlwiXCIhPT1wcm9jZXNzLmVudi5TQ19ESVNBQkxFX1NQRUVEWT9cImZhbHNlXCIhPT1wcm9jZXNzLmVudi5TQ19ESVNBQkxFX1NQRUVEWSYmcHJvY2Vzcy5lbnYuU0NfRElTQUJMRV9TUEVFRFk6XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVikpLFA9e30sTz1cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3sxOlwiQ2Fubm90IGNyZWF0ZSBzdHlsZWQtY29tcG9uZW50IGZvciBjb21wb25lbnQ6ICVzLlxcblxcblwiLDI6XCJDYW4ndCBjb2xsZWN0IHN0eWxlcyBvbmNlIHlvdSd2ZSBjb25zdW1lZCBhIGBTZXJ2ZXJTdHlsZVNoZWV0YCdzIHN0eWxlcyEgYFNlcnZlclN0eWxlU2hlZXRgIGlzIGEgb25lIG9mZiBpbnN0YW5jZSBmb3IgZWFjaCBzZXJ2ZXItc2lkZSByZW5kZXIgY3ljbGUuXFxuXFxuLSBBcmUgeW91IHRyeWluZyB0byByZXVzZSBpdCBhY3Jvc3MgcmVuZGVycz9cXG4tIEFyZSB5b3UgYWNjaWRlbnRhbGx5IGNhbGxpbmcgY29sbGVjdFN0eWxlcyB0d2ljZT9cXG5cXG5cIiwzOlwiU3RyZWFtaW5nIFNTUiBpcyBvbmx5IHN1cHBvcnRlZCBpbiBhIE5vZGUuanMgZW52aXJvbm1lbnQ7IFBsZWFzZSBkbyBub3QgdHJ5IHRvIGNhbGwgdGhpcyBtZXRob2QgaW4gdGhlIGJyb3dzZXIuXFxuXFxuXCIsNDpcIlRoZSBgU3R5bGVTaGVldE1hbmFnZXJgIGV4cGVjdHMgYSB2YWxpZCB0YXJnZXQgb3Igc2hlZXQgcHJvcCFcXG5cXG4tIERvZXMgdGhpcyBlcnJvciBvY2N1ciBvbiB0aGUgY2xpZW50IGFuZCBpcyB5b3VyIHRhcmdldCBmYWxzeT9cXG4tIERvZXMgdGhpcyBlcnJvciBvY2N1ciBvbiB0aGUgc2VydmVyIGFuZCBpcyB0aGUgc2hlZXQgZmFsc3k/XFxuXFxuXCIsNTpcIlRoZSBjbG9uZSBtZXRob2QgY2Fubm90IGJlIHVzZWQgb24gdGhlIGNsaWVudCFcXG5cXG4tIEFyZSB5b3UgcnVubmluZyBpbiBhIGNsaWVudC1saWtlIGVudmlyb25tZW50IG9uIHRoZSBzZXJ2ZXI/XFxuLSBBcmUgeW91IHRyeWluZyB0byBydW4gU1NSIG9uIHRoZSBjbGllbnQ/XFxuXFxuXCIsNjpcIlRyeWluZyB0byBpbnNlcnQgYSBuZXcgc3R5bGUgdGFnLCBidXQgdGhlIGdpdmVuIE5vZGUgaXMgdW5tb3VudGVkIVxcblxcbi0gQXJlIHlvdSB1c2luZyBhIGN1c3RvbSB0YXJnZXQgdGhhdCBpc24ndCBtb3VudGVkP1xcbi0gRG9lcyB5b3VyIGRvY3VtZW50IG5vdCBoYXZlIGEgdmFsaWQgaGVhZCBlbGVtZW50P1xcbi0gSGF2ZSB5b3UgYWNjaWRlbnRhbGx5IHJlbW92ZWQgYSBzdHlsZSB0YWcgbWFudWFsbHk/XFxuXFxuXCIsNzonVGhlbWVQcm92aWRlcjogUGxlYXNlIHJldHVybiBhbiBvYmplY3QgZnJvbSB5b3VyIFwidGhlbWVcIiBwcm9wIGZ1bmN0aW9uLCBlLmcuXFxuXFxuYGBganNcXG50aGVtZT17KCkgPT4gKHt9KX1cXG5gYGBcXG5cXG4nLDg6J1RoZW1lUHJvdmlkZXI6IFBsZWFzZSBtYWtlIHlvdXIgXCJ0aGVtZVwiIHByb3AgYW4gb2JqZWN0LlxcblxcbicsOTpcIk1pc3NpbmcgZG9jdW1lbnQgYDxoZWFkPmBcXG5cXG5cIiwxMDpcIkNhbm5vdCBmaW5kIGEgU3R5bGVTaGVldCBpbnN0YW5jZS4gVXN1YWxseSB0aGlzIGhhcHBlbnMgaWYgdGhlcmUgYXJlIG11bHRpcGxlIGNvcGllcyBvZiBzdHlsZWQtY29tcG9uZW50cyBsb2FkZWQgYXQgb25jZS4gQ2hlY2sgb3V0IHRoaXMgaXNzdWUgZm9yIGhvdyB0byB0cm91Ymxlc2hvb3QgYW5kIGZpeCB0aGUgY29tbW9uIGNhc2VzIHdoZXJlIHRoaXMgc2l0dWF0aW9uIGNhbiBoYXBwZW46IGh0dHBzOi8vZ2l0aHViLmNvbS9zdHlsZWQtY29tcG9uZW50cy9zdHlsZWQtY29tcG9uZW50cy9pc3N1ZXMvMTk0MSNpc3N1ZWNvbW1lbnQtNDE3ODYyMDIxXFxuXFxuXCIsMTE6XCJfVGhpcyBlcnJvciB3YXMgcmVwbGFjZWQgd2l0aCBhIGRldi10aW1lIHdhcm5pbmcsIGl0IHdpbGwgYmUgZGVsZXRlZCBmb3IgdjQgZmluYWwuXyBbY3JlYXRlR2xvYmFsU3R5bGVdIHJlY2VpdmVkIGNoaWxkcmVuIHdoaWNoIHdpbGwgbm90IGJlIHJlbmRlcmVkLiBQbGVhc2UgdXNlIHRoZSBjb21wb25lbnQgd2l0aG91dCBwYXNzaW5nIGNoaWxkcmVuIGVsZW1lbnRzLlxcblxcblwiLDEyOlwiSXQgc2VlbXMgeW91IGFyZSBpbnRlcnBvbGF0aW5nIGEga2V5ZnJhbWUgZGVjbGFyYXRpb24gKCVzKSBpbnRvIGFuIHVudGFnZ2VkIHN0cmluZy4gVGhpcyB3YXMgc3VwcG9ydGVkIGluIHN0eWxlZC1jb21wb25lbnRzIHYzLCBidXQgaXMgbm90IGxvbmdlciBzdXBwb3J0ZWQgaW4gdjQgYXMga2V5ZnJhbWVzIGFyZSBub3cgaW5qZWN0ZWQgb24tZGVtYW5kLiBQbGVhc2Ugd3JhcCB5b3VyIHN0cmluZyBpbiB0aGUgY3NzXFxcXGBcXFxcYCBoZWxwZXIgd2hpY2ggZW5zdXJlcyB0aGUgc3R5bGVzIGFyZSBpbmplY3RlZCBjb3JyZWN0bHkuIFNlZSBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9hcGkjY3NzXFxuXFxuXCIsMTM6XCIlcyBpcyBub3QgYSBzdHlsZWQgY29tcG9uZW50IGFuZCBjYW5ub3QgYmUgcmVmZXJyZWQgdG8gdmlhIGNvbXBvbmVudCBzZWxlY3Rvci4gU2VlIGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2FkdmFuY2VkI3JlZmVycmluZy10by1vdGhlci1jb21wb25lbnRzIGZvciBtb3JlIGRldGFpbHMuXFxuXFxuXCIsMTQ6J1RoZW1lUHJvdmlkZXI6IFwidGhlbWVcIiBwcm9wIGlzIHJlcXVpcmVkLlxcblxcbicsMTU6XCJBIHN0eWxpcyBwbHVnaW4gaGFzIGJlZW4gc3VwcGxpZWQgdGhhdCBpcyBub3QgbmFtZWQuIFdlIG5lZWQgYSBuYW1lIGZvciBlYWNoIHBsdWdpbiB0byBiZSBhYmxlIHRvIHByZXZlbnQgc3R5bGluZyBjb2xsaXNpb25zIGJldHdlZW4gZGlmZmVyZW50IHN0eWxpcyBjb25maWd1cmF0aW9ucyB3aXRoaW4gdGhlIHNhbWUgYXBwLiBCZWZvcmUgeW91IHBhc3MgeW91ciBwbHVnaW4gdG8gYDxTdHlsZVNoZWV0TWFuYWdlciBzdHlsaXNQbHVnaW5zPXtbXX0+YCwgcGxlYXNlIG1ha2Ugc3VyZSBlYWNoIHBsdWdpbiBpcyB1bmlxdWVseS1uYW1lZCwgZS5nLlxcblxcbmBgYGpzXFxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGltcG9ydGVkUGx1Z2luLCAnbmFtZScsIHsgdmFsdWU6ICdzb21lLXVuaXF1ZS1uYW1lJyB9KTtcXG5gYGBcXG5cXG5cIiwxNjpcIlJlYWNoZWQgdGhlIGxpbWl0IG9mIGhvdyBtYW55IHN0eWxlZCBjb21wb25lbnRzIG1heSBiZSBjcmVhdGVkIGF0IGdyb3VwICVzLlxcbllvdSBtYXkgb25seSBjcmVhdGUgdXAgdG8gMSwwNzMsNzQxLDgyNCBjb21wb25lbnRzLiBJZiB5b3UncmUgY3JlYXRpbmcgY29tcG9uZW50cyBkeW5hbWljYWxseSxcXG5hcyBmb3IgaW5zdGFuY2UgaW4geW91ciByZW5kZXIgbWV0aG9kIHRoZW4geW91IG1heSBiZSBydW5uaW5nIGludG8gdGhpcyBsaW1pdGF0aW9uLlxcblxcblwiLDE3OlwiQ1NTU3R5bGVTaGVldCBjb3VsZCBub3QgYmUgZm91bmQgb24gSFRNTFN0eWxlRWxlbWVudC5cXG5IYXMgc3R5bGVkLWNvbXBvbmVudHMnIHN0eWxlIHRhZyBiZWVuIHVubW91bnRlZCBvciBhbHRlcmVkIGJ5IGFub3RoZXIgc2NyaXB0P1xcblwifTp7fTtmdW5jdGlvbiBSKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGg8PTA/dm9pZCAwOmFyZ3VtZW50c1swXSx0PVtdLG49MSxyPWFyZ3VtZW50cy5sZW5ndGg7bjxyO24rPTEpdC5wdXNoKG48MHx8YXJndW1lbnRzLmxlbmd0aDw9bj92b2lkIDA6YXJndW1lbnRzW25dKTtyZXR1cm4gdC5mb3JFYWNoKChmdW5jdGlvbih0KXtlPWUucmVwbGFjZSgvJVthLXpdLyx0KX0pKSxlfWZ1bmN0aW9uIEQoZSl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkodD4xP3QtMTowKSxyPTE7cjx0O3IrKyluW3ItMV09YXJndW1lbnRzW3JdO3Rocm93XCJwcm9kdWN0aW9uXCI9PT1wcm9jZXNzLmVudi5OT0RFX0VOVj9uZXcgRXJyb3IoXCJBbiBlcnJvciBvY2N1cnJlZC4gU2VlIGh0dHBzOi8vZ2l0LmlvL0pVSWFFI1wiK2UrXCIgZm9yIG1vcmUgaW5mb3JtYXRpb24uXCIrKG4ubGVuZ3RoPjA/XCIgQXJnczogXCIrbi5qb2luKFwiLCBcIik6XCJcIikpOm5ldyBFcnJvcihSLmFwcGx5KHZvaWQgMCxbT1tlXV0uY29uY2F0KG4pKS50cmltKCkpfXZhciBqPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt0aGlzLmdyb3VwU2l6ZXM9bmV3IFVpbnQzMkFycmF5KDUxMiksdGhpcy5sZW5ndGg9NTEyLHRoaXMudGFnPWV9dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuaW5kZXhPZkdyb3VwPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wLG49MDtuPGU7bisrKXQrPXRoaXMuZ3JvdXBTaXplc1tuXTtyZXR1cm4gdH0sdC5pbnNlcnRSdWxlcz1mdW5jdGlvbihlLHQpe2lmKGU+PXRoaXMuZ3JvdXBTaXplcy5sZW5ndGgpe2Zvcih2YXIgbj10aGlzLmdyb3VwU2l6ZXMscj1uLmxlbmd0aCxvPXI7ZT49bzspKG88PD0xKTwwJiZEKDE2LFwiXCIrZSk7dGhpcy5ncm91cFNpemVzPW5ldyBVaW50MzJBcnJheShvKSx0aGlzLmdyb3VwU2l6ZXMuc2V0KG4pLHRoaXMubGVuZ3RoPW87Zm9yKHZhciBzPXI7czxvO3MrKyl0aGlzLmdyb3VwU2l6ZXNbc109MH1mb3IodmFyIGk9dGhpcy5pbmRleE9mR3JvdXAoZSsxKSxhPTAsYz10Lmxlbmd0aDthPGM7YSsrKXRoaXMudGFnLmluc2VydFJ1bGUoaSx0W2FdKSYmKHRoaXMuZ3JvdXBTaXplc1tlXSsrLGkrKyl9LHQuY2xlYXJHcm91cD1mdW5jdGlvbihlKXtpZihlPHRoaXMubGVuZ3RoKXt2YXIgdD10aGlzLmdyb3VwU2l6ZXNbZV0sbj10aGlzLmluZGV4T2ZHcm91cChlKSxyPW4rdDt0aGlzLmdyb3VwU2l6ZXNbZV09MDtmb3IodmFyIG89bjtvPHI7bysrKXRoaXMudGFnLmRlbGV0ZVJ1bGUobil9fSx0LmdldEdyb3VwPWZ1bmN0aW9uKGUpe3ZhciB0PVwiXCI7aWYoZT49dGhpcy5sZW5ndGh8fDA9PT10aGlzLmdyb3VwU2l6ZXNbZV0pcmV0dXJuIHQ7Zm9yKHZhciBuPXRoaXMuZ3JvdXBTaXplc1tlXSxyPXRoaXMuaW5kZXhPZkdyb3VwKGUpLG89cituLHM9cjtzPG87cysrKXQrPXRoaXMudGFnLmdldFJ1bGUocykrXCIvKiFzYyovXFxuXCI7cmV0dXJuIHR9LGV9KCksVD1uZXcgTWFwLHg9bmV3IE1hcCxrPTEsVj1mdW5jdGlvbihlKXtpZihULmhhcyhlKSlyZXR1cm4gVC5nZXQoZSk7Zm9yKDt4LmhhcyhrKTspaysrO3ZhciB0PWsrKztyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoKDB8dCk8MHx8dD4xPDwzMCkmJkQoMTYsXCJcIit0KSxULnNldChlLHQpLHguc2V0KHQsZSksdH0sQj1mdW5jdGlvbihlKXtyZXR1cm4geC5nZXQoZSl9LHo9ZnVuY3Rpb24oZSx0KXt0Pj1rJiYoaz10KzEpLFQuc2V0KGUsdCkseC5zZXQodCxlKX0sTT1cInN0eWxlW1wiK04rJ11bZGF0YS1zdHlsZWQtdmVyc2lvbj1cIjUuMy4xMVwiXScsRz1uZXcgUmVnRXhwKFwiXlwiK04rJ1xcXFwuZyhcXFxcZCspXFxcXFtpZD1cIihbXFxcXHdcXFxcZC1dKylcIlxcXFxdLio/XCIoW15cIl0qKScpLEw9ZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgcixvPW4uc3BsaXQoXCIsXCIpLHM9MCxpPW8ubGVuZ3RoO3M8aTtzKyspKHI9b1tzXSkmJmUucmVnaXN0ZXJOYW1lKHQscil9LEY9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49KHQudGV4dENvbnRlbnR8fFwiXCIpLnNwbGl0KFwiLyohc2MqL1xcblwiKSxyPVtdLG89MCxzPW4ubGVuZ3RoO288cztvKyspe3ZhciBpPW5bb10udHJpbSgpO2lmKGkpe3ZhciBhPWkubWF0Y2goRyk7aWYoYSl7dmFyIGM9MHxwYXJzZUludChhWzFdLDEwKSx1PWFbMl07MCE9PWMmJih6KHUsYyksTChlLHUsYVszXSksZS5nZXRUYWcoKS5pbnNlcnRSdWxlcyhjLHIpKSxyLmxlbmd0aD0wfWVsc2Ugci5wdXNoKGkpfX19LFk9ZnVuY3Rpb24oKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgX193ZWJwYWNrX25vbmNlX18/X193ZWJwYWNrX25vbmNlX186bnVsbH0scT1mdW5jdGlvbihlKXt2YXIgdD1kb2N1bWVudC5oZWFkLG49ZXx8dCxyPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSxvPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1lLmNoaWxkTm9kZXMsbj10Lmxlbmd0aDtuPj0wO24tLSl7dmFyIHI9dFtuXTtpZihyJiYxPT09ci5ub2RlVHlwZSYmci5oYXNBdHRyaWJ1dGUoTikpcmV0dXJuIHJ9fShuKSxzPXZvaWQgMCE9PW8/by5uZXh0U2libGluZzpudWxsO3Iuc2V0QXR0cmlidXRlKE4sXCJhY3RpdmVcIiksci5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN0eWxlZC12ZXJzaW9uXCIsXCI1LjMuMTFcIik7dmFyIGk9WSgpO3JldHVybiBpJiZyLnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsaSksbi5pbnNlcnRCZWZvcmUocixzKSxyfSxIPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt2YXIgdD10aGlzLmVsZW1lbnQ9cShlKTt0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXCIpKSx0aGlzLnNoZWV0PWZ1bmN0aW9uKGUpe2lmKGUuc2hlZXQpcmV0dXJuIGUuc2hlZXQ7Zm9yKHZhciB0PWRvY3VtZW50LnN0eWxlU2hlZXRzLG49MCxyPXQubGVuZ3RoO248cjtuKyspe3ZhciBvPXRbbl07aWYoby5vd25lck5vZGU9PT1lKXJldHVybiBvfUQoMTcpfSh0KSx0aGlzLmxlbmd0aD0wfXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0Lmluc2VydFJ1bGU9ZnVuY3Rpb24oZSx0KXt0cnl7cmV0dXJuIHRoaXMuc2hlZXQuaW5zZXJ0UnVsZSh0LGUpLHRoaXMubGVuZ3RoKyssITB9Y2F0Y2goZSl7cmV0dXJuITF9fSx0LmRlbGV0ZVJ1bGU9ZnVuY3Rpb24oZSl7dGhpcy5zaGVldC5kZWxldGVSdWxlKGUpLHRoaXMubGVuZ3RoLS19LHQuZ2V0UnVsZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzLnNoZWV0LmNzc1J1bGVzW2VdO3JldHVybiB2b2lkIDAhPT10JiZcInN0cmluZ1wiPT10eXBlb2YgdC5jc3NUZXh0P3QuY3NzVGV4dDpcIlwifSxlfSgpLCQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3ZhciB0PXRoaXMuZWxlbWVudD1xKGUpO3RoaXMubm9kZXM9dC5jaGlsZE5vZGVzLHRoaXMubGVuZ3RoPTB9dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuaW5zZXJ0UnVsZT1mdW5jdGlvbihlLHQpe2lmKGU8PXRoaXMubGVuZ3RoJiZlPj0wKXt2YXIgbj1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0KSxyPXRoaXMubm9kZXNbZV07cmV0dXJuIHRoaXMuZWxlbWVudC5pbnNlcnRCZWZvcmUobixyfHxudWxsKSx0aGlzLmxlbmd0aCsrLCEwfXJldHVybiExfSx0LmRlbGV0ZVJ1bGU9ZnVuY3Rpb24oZSl7dGhpcy5lbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMubm9kZXNbZV0pLHRoaXMubGVuZ3RoLS19LHQuZ2V0UnVsZT1mdW5jdGlvbihlKXtyZXR1cm4gZTx0aGlzLmxlbmd0aD90aGlzLm5vZGVzW2VdLnRleHRDb250ZW50OlwiXCJ9LGV9KCksVz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dGhpcy5ydWxlcz1bXSx0aGlzLmxlbmd0aD0wfXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0Lmluc2VydFJ1bGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZTw9dGhpcy5sZW5ndGgmJih0aGlzLnJ1bGVzLnNwbGljZShlLDAsdCksdGhpcy5sZW5ndGgrKywhMCl9LHQuZGVsZXRlUnVsZT1mdW5jdGlvbihlKXt0aGlzLnJ1bGVzLnNwbGljZShlLDEpLHRoaXMubGVuZ3RoLS19LHQuZ2V0UnVsZT1mdW5jdGlvbihlKXtyZXR1cm4gZTx0aGlzLmxlbmd0aD90aGlzLnJ1bGVzW2VdOlwiXCJ9LGV9KCksVT1DLEo9e2lzU2VydmVyOiFDLHVzZUNTU09NSW5qZWN0aW9uOiFJfSxYPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQsbil7dm9pZCAwPT09ZSYmKGU9dyksdm9pZCAwPT09dCYmKHQ9e30pLHRoaXMub3B0aW9ucz15KHt9LEose30sZSksdGhpcy5ncz10LHRoaXMubmFtZXM9bmV3IE1hcChuKSx0aGlzLnNlcnZlcj0hIWUuaXNTZXJ2ZXIsIXRoaXMuc2VydmVyJiZDJiZVJiYoVT0hMSxmdW5jdGlvbihlKXtmb3IodmFyIHQ9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChNKSxuPTAscj10Lmxlbmd0aDtuPHI7bisrKXt2YXIgbz10W25dO28mJlwiYWN0aXZlXCIhPT1vLmdldEF0dHJpYnV0ZShOKSYmKEYoZSxvKSxvLnBhcmVudE5vZGUmJm8ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvKSl9fSh0aGlzKSl9ZS5yZWdpc3RlcklkPWZ1bmN0aW9uKGUpe3JldHVybiBWKGUpfTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5yZWNvbnN0cnVjdFdpdGhPcHRpb25zPWZ1bmN0aW9uKHQsbil7cmV0dXJuIHZvaWQgMD09PW4mJihuPSEwKSxuZXcgZSh5KHt9LHRoaXMub3B0aW9ucyx7fSx0KSx0aGlzLmdzLG4mJnRoaXMubmFtZXN8fHZvaWQgMCl9LHQuYWxsb2NhdGVHU0luc3RhbmNlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmdzW2VdPSh0aGlzLmdzW2VdfHwwKSsxfSx0LmdldFRhZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRhZ3x8KHRoaXMudGFnPShuPSh0PXRoaXMub3B0aW9ucykuaXNTZXJ2ZXIscj10LnVzZUNTU09NSW5qZWN0aW9uLG89dC50YXJnZXQsZT1uP25ldyBXKG8pOnI/bmV3IEgobyk6bmV3ICQobyksbmV3IGooZSkpKTt2YXIgZSx0LG4scixvfSx0Lmhhc05hbWVGb3JJZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLm5hbWVzLmhhcyhlKSYmdGhpcy5uYW1lcy5nZXQoZSkuaGFzKHQpfSx0LnJlZ2lzdGVyTmFtZT1mdW5jdGlvbihlLHQpe2lmKFYoZSksdGhpcy5uYW1lcy5oYXMoZSkpdGhpcy5uYW1lcy5nZXQoZSkuYWRkKHQpO2Vsc2V7dmFyIG49bmV3IFNldDtuLmFkZCh0KSx0aGlzLm5hbWVzLnNldChlLG4pfX0sdC5pbnNlcnRSdWxlcz1mdW5jdGlvbihlLHQsbil7dGhpcy5yZWdpc3Rlck5hbWUoZSx0KSx0aGlzLmdldFRhZygpLmluc2VydFJ1bGVzKFYoZSksbil9LHQuY2xlYXJOYW1lcz1mdW5jdGlvbihlKXt0aGlzLm5hbWVzLmhhcyhlKSYmdGhpcy5uYW1lcy5nZXQoZSkuY2xlYXIoKX0sdC5jbGVhclJ1bGVzPWZ1bmN0aW9uKGUpe3RoaXMuZ2V0VGFnKCkuY2xlYXJHcm91cChWKGUpKSx0aGlzLmNsZWFyTmFtZXMoZSl9LHQuY2xlYXJUYWc9ZnVuY3Rpb24oKXt0aGlzLnRhZz12b2lkIDB9LHQudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUuZ2V0VGFnKCksbj10Lmxlbmd0aCxyPVwiXCIsbz0wO288bjtvKyspe3ZhciBzPUIobyk7aWYodm9pZCAwIT09cyl7dmFyIGk9ZS5uYW1lcy5nZXQocyksYT10LmdldEdyb3VwKG8pO2lmKGkmJmEmJmkuc2l6ZSl7dmFyIGM9TitcIi5nXCIrbysnW2lkPVwiJytzKydcIl0nLHU9XCJcIjt2b2lkIDAhPT1pJiZpLmZvckVhY2goKGZ1bmN0aW9uKGUpe2UubGVuZ3RoPjAmJih1Kz1lK1wiLFwiKX0pKSxyKz1cIlwiK2ErYysne2NvbnRlbnQ6XCInK3UrJ1wifS8qIXNjKi9cXG4nfX19cmV0dXJuIHJ9KHRoaXMpfSxlfSgpLFo9LyhhKShkKS9naSxLPWZ1bmN0aW9uKGUpe3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGUrKGU+MjU/Mzk6OTcpKX07ZnVuY3Rpb24gUShlKXt2YXIgdCxuPVwiXCI7Zm9yKHQ9TWF0aC5hYnMoZSk7dD41Mjt0PXQvNTJ8MCluPUsodCU1MikrbjtyZXR1cm4oSyh0JTUyKStuKS5yZXBsYWNlKFosXCIkMS0kMlwiKX12YXIgZWU9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49dC5sZW5ndGg7bjspZT0zMyplXnQuY2hhckNvZGVBdCgtLW4pO3JldHVybiBlfSx0ZT1mdW5jdGlvbihlKXtyZXR1cm4gZWUoNTM4MSxlKX07ZnVuY3Rpb24gbmUoZSl7Zm9yKHZhciB0PTA7dDxlLmxlbmd0aDt0Kz0xKXt2YXIgbj1lW3RdO2lmKEUobikmJiFfKG4pKXJldHVybiExfXJldHVybiEwfXZhciByZT10ZShcIjUuMy4xMVwiKSxvZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0LG4pe3RoaXMucnVsZXM9ZSx0aGlzLnN0YXRpY1J1bGVzSWQ9XCJcIix0aGlzLmlzU3RhdGljPVwicHJvZHVjdGlvblwiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJih2b2lkIDA9PT1ufHxuLmlzU3RhdGljKSYmbmUoZSksdGhpcy5jb21wb25lbnRJZD10LHRoaXMuYmFzZUhhc2g9ZWUocmUsdCksdGhpcy5iYXNlU3R5bGU9bixYLnJlZ2lzdGVySWQodCl9cmV0dXJuIGUucHJvdG90eXBlLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10aGlzLmNvbXBvbmVudElkLG89W107aWYodGhpcy5iYXNlU3R5bGUmJm8ucHVzaCh0aGlzLmJhc2VTdHlsZS5nZW5lcmF0ZUFuZEluamVjdFN0eWxlcyhlLHQsbikpLHRoaXMuaXNTdGF0aWMmJiFuLmhhc2gpaWYodGhpcy5zdGF0aWNSdWxlc0lkJiZ0Lmhhc05hbWVGb3JJZChyLHRoaXMuc3RhdGljUnVsZXNJZCkpby5wdXNoKHRoaXMuc3RhdGljUnVsZXNJZCk7ZWxzZXt2YXIgcz1fZSh0aGlzLnJ1bGVzLGUsdCxuKS5qb2luKFwiXCIpLGk9UShlZSh0aGlzLmJhc2VIYXNoLHMpPj4+MCk7aWYoIXQuaGFzTmFtZUZvcklkKHIsaSkpe3ZhciBhPW4ocyxcIi5cIitpLHZvaWQgMCxyKTt0Lmluc2VydFJ1bGVzKHIsaSxhKX1vLnB1c2goaSksdGhpcy5zdGF0aWNSdWxlc0lkPWl9ZWxzZXtmb3IodmFyIGM9dGhpcy5ydWxlcy5sZW5ndGgsdT1lZSh0aGlzLmJhc2VIYXNoLG4uaGFzaCksbD1cIlwiLGQ9MDtkPGM7ZCsrKXt2YXIgaD10aGlzLnJ1bGVzW2RdO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBoKWwrPWgsXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKHU9ZWUodSxoK2QpKTtlbHNlIGlmKGgpe3ZhciBwPV9lKGgsZSx0LG4pLGY9QXJyYXkuaXNBcnJheShwKT9wLmpvaW4oXCJcIik6cDt1PWVlKHUsZitkKSxsKz1mfX1pZihsKXt2YXIgbT1RKHU+Pj4wKTtpZighdC5oYXNOYW1lRm9ySWQocixtKSl7dmFyIHk9bihsLFwiLlwiK20sdm9pZCAwLHIpO3QuaW5zZXJ0UnVsZXMocixtLHkpfW8ucHVzaChtKX19cmV0dXJuIG8uam9pbihcIiBcIil9LGV9KCksc2U9L15cXHMqXFwvXFwvLiokL2dtLGllPVtcIjpcIixcIltcIixcIi5cIixcIiNcIl07ZnVuY3Rpb24gYWUoZSl7dmFyIHQsbixyLG8scz12b2lkIDA9PT1lP3c6ZSxpPXMub3B0aW9ucyxhPXZvaWQgMD09PWk/dzppLGM9cy5wbHVnaW5zLHU9dm9pZCAwPT09Yz9TOmMsbD1uZXcgaChhKSxkPVtdLHA9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXtpZih0KXRyeXtlKHQrXCJ9XCIpfWNhdGNoKGUpe319cmV0dXJuIGZ1bmN0aW9uKG4scixvLHMsaSxhLGMsdSxsLGQpe3N3aXRjaChuKXtjYXNlIDE6aWYoMD09PWwmJjY0PT09ci5jaGFyQ29kZUF0KDApKXJldHVybiBlKHIrXCI7XCIpLFwiXCI7YnJlYWs7Y2FzZSAyOmlmKDA9PT11KXJldHVybiByK1wiLyp8Ki9cIjticmVhaztjYXNlIDM6c3dpdGNoKHUpe2Nhc2UgMTAyOmNhc2UgMTEyOnJldHVybiBlKG9bMF0rciksXCJcIjtkZWZhdWx0OnJldHVybiByKygwPT09ZD9cIi8qfCovXCI6XCJcIil9Y2FzZS0yOnIuc3BsaXQoXCIvKnwqL31cIikuZm9yRWFjaCh0KX19fSgoZnVuY3Rpb24oZSl7ZC5wdXNoKGUpfSkpLGY9ZnVuY3Rpb24oZSxyLHMpe3JldHVybiAwPT09ciYmLTEhPT1pZS5pbmRleE9mKHNbbi5sZW5ndGhdKXx8cy5tYXRjaChvKT9lOlwiLlwiK3R9O2Z1bmN0aW9uIG0oZSxzLGksYSl7dm9pZCAwPT09YSYmKGE9XCImXCIpO3ZhciBjPWUucmVwbGFjZShzZSxcIlwiKSx1PXMmJmk/aStcIiBcIitzK1wiIHsgXCIrYytcIiB9XCI6YztyZXR1cm4gdD1hLG49cyxyPW5ldyBSZWdFeHAoXCJcXFxcXCIrbitcIlxcXFxiXCIsXCJnXCIpLG89bmV3IFJlZ0V4cChcIihcXFxcXCIrbitcIlxcXFxiKXsyLH1cIiksbChpfHwhcz9cIlwiOnMsdSl9cmV0dXJuIGwudXNlKFtdLmNvbmNhdCh1LFtmdW5jdGlvbihlLHQsbyl7Mj09PWUmJm8ubGVuZ3RoJiZvWzBdLmxhc3RJbmRleE9mKG4pPjAmJihvWzBdPW9bMF0ucmVwbGFjZShyLGYpKX0scCxmdW5jdGlvbihlKXtpZigtMj09PWUpe3ZhciB0PWQ7cmV0dXJuIGQ9W10sdH19XSkpLG0uaGFzaD11Lmxlbmd0aD91LnJlZHVjZSgoZnVuY3Rpb24oZSx0KXtyZXR1cm4gdC5uYW1lfHxEKDE1KSxlZShlLHQubmFtZSl9KSw1MzgxKS50b1N0cmluZygpOlwiXCIsbX12YXIgY2U9ci5jcmVhdGVDb250ZXh0KCksdWU9Y2UuQ29uc3VtZXIsbGU9ci5jcmVhdGVDb250ZXh0KCksZGU9KGxlLkNvbnN1bWVyLG5ldyBYKSxoZT1hZSgpO2Z1bmN0aW9uIHBlKCl7cmV0dXJuIHMoY2UpfHxkZX1mdW5jdGlvbiBmZSgpe3JldHVybiBzKGxlKXx8aGV9ZnVuY3Rpb24gbWUoZSl7dmFyIHQ9byhlLnN0eWxpc1BsdWdpbnMpLG49dFswXSxzPXRbMV0sYz1wZSgpLHU9aSgoZnVuY3Rpb24oKXt2YXIgdD1jO3JldHVybiBlLnNoZWV0P3Q9ZS5zaGVldDplLnRhcmdldCYmKHQ9dC5yZWNvbnN0cnVjdFdpdGhPcHRpb25zKHt0YXJnZXQ6ZS50YXJnZXR9LCExKSksZS5kaXNhYmxlQ1NTT01JbmplY3Rpb24mJih0PXQucmVjb25zdHJ1Y3RXaXRoT3B0aW9ucyh7dXNlQ1NTT01JbmplY3Rpb246ITF9KSksdH0pLFtlLmRpc2FibGVDU1NPTUluamVjdGlvbixlLnNoZWV0LGUudGFyZ2V0XSksbD1pKChmdW5jdGlvbigpe3JldHVybiBhZSh7b3B0aW9uczp7cHJlZml4OiFlLmRpc2FibGVWZW5kb3JQcmVmaXhlc30scGx1Z2luczpufSl9KSxbZS5kaXNhYmxlVmVuZG9yUHJlZml4ZXMsbl0pO3JldHVybiBhKChmdW5jdGlvbigpe2QobixlLnN0eWxpc1BsdWdpbnMpfHxzKGUuc3R5bGlzUGx1Z2lucyl9KSxbZS5zdHlsaXNQbHVnaW5zXSksci5jcmVhdGVFbGVtZW50KGNlLlByb3ZpZGVyLHt2YWx1ZTp1fSxyLmNyZWF0ZUVsZW1lbnQobGUuUHJvdmlkZXIse3ZhbHVlOmx9LFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/ci5DaGlsZHJlbi5vbmx5KGUuY2hpbGRyZW4pOmUuY2hpbGRyZW4pKX12YXIgeWU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7dmFyIG49dGhpczt0aGlzLmluamVjdD1mdW5jdGlvbihlLHQpe3ZvaWQgMD09PXQmJih0PWhlKTt2YXIgcj1uLm5hbWUrdC5oYXNoO2UuaGFzTmFtZUZvcklkKG4uaWQscil8fGUuaW5zZXJ0UnVsZXMobi5pZCxyLHQobi5ydWxlcyxyLFwiQGtleWZyYW1lc1wiKSl9LHRoaXMudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gRCgxMixTdHJpbmcobi5uYW1lKSl9LHRoaXMubmFtZT1lLHRoaXMuaWQ9XCJzYy1rZXlmcmFtZXMtXCIrZSx0aGlzLnJ1bGVzPXR9cmV0dXJuIGUucHJvdG90eXBlLmdldE5hbWU9ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPWhlKSx0aGlzLm5hbWUrZS5oYXNofSxlfSgpLHZlPS8oW0EtWl0pLyxnZT0vKFtBLVpdKS9nLFNlPS9ebXMtLyx3ZT1mdW5jdGlvbihlKXtyZXR1cm5cIi1cIitlLnRvTG93ZXJDYXNlKCl9O2Z1bmN0aW9uIEVlKGUpe3JldHVybiB2ZS50ZXN0KGUpP2UucmVwbGFjZShnZSx3ZSkucmVwbGFjZShTZSxcIi1tcy1cIik6ZX12YXIgYmU9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWV8fCExPT09ZXx8XCJcIj09PWV9O2Z1bmN0aW9uIF9lKGUsbixyLG8pe2lmKEFycmF5LmlzQXJyYXkoZSkpe2Zvcih2YXIgcyxpPVtdLGE9MCxjPWUubGVuZ3RoO2E8YzthKz0xKVwiXCIhPT0ocz1fZShlW2FdLG4scixvKSkmJihBcnJheS5pc0FycmF5KHMpP2kucHVzaC5hcHBseShpLHMpOmkucHVzaChzKSk7cmV0dXJuIGl9aWYoYmUoZSkpcmV0dXJuXCJcIjtpZihfKGUpKXJldHVyblwiLlwiK2Uuc3R5bGVkQ29tcG9uZW50SWQ7aWYoRShlKSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YobD1lKXx8bC5wcm90b3R5cGUmJmwucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnR8fCFuKXJldHVybiBlO3ZhciB1PWUobik7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmdCh1KSYmY29uc29sZS53YXJuKGIoZSkrXCIgaXMgbm90IGEgc3R5bGVkIGNvbXBvbmVudCBhbmQgY2Fubm90IGJlIHJlZmVycmVkIHRvIHZpYSBjb21wb25lbnQgc2VsZWN0b3IuIFNlZSBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9hZHZhbmNlZCNyZWZlcnJpbmctdG8tb3RoZXItY29tcG9uZW50cyBmb3IgbW9yZSBkZXRhaWxzLlwiKSxfZSh1LG4scixvKX12YXIgbDtyZXR1cm4gZSBpbnN0YW5jZW9mIHllP3I/KGUuaW5qZWN0KHIsbyksZS5nZXROYW1lKG8pKTplOmcoZSk/ZnVuY3Rpb24gZSh0LG4pe3ZhciByLG8scz1bXTtmb3IodmFyIGkgaW4gdCl0Lmhhc093blByb3BlcnR5KGkpJiYhYmUodFtpXSkmJihBcnJheS5pc0FycmF5KHRbaV0pJiZ0W2ldLmlzQ3NzfHxFKHRbaV0pP3MucHVzaChFZShpKStcIjpcIix0W2ldLFwiO1wiKTpnKHRbaV0pP3MucHVzaC5hcHBseShzLGUodFtpXSxpKSk6cy5wdXNoKEVlKGkpK1wiOiBcIisocj1pLG51bGw9PShvPXRbaV0pfHxcImJvb2xlYW5cIj09dHlwZW9mIG98fFwiXCI9PT1vP1wiXCI6XCJudW1iZXJcIiE9dHlwZW9mIG98fDA9PT1vfHxyIGluIHB8fHIuc3RhcnRzV2l0aChcIi0tXCIpP1N0cmluZyhvKS50cmltKCk6bytcInB4XCIpK1wiO1wiKSk7cmV0dXJuIG4/W24rXCIge1wiXS5jb25jYXQocyxbXCJ9XCJdKTpzfShlKTplLnRvU3RyaW5nKCl9dmFyIE5lPWZ1bmN0aW9uKGUpe3JldHVybiBBcnJheS5pc0FycmF5KGUpJiYoZS5pc0Nzcz0hMCksZX07ZnVuY3Rpb24gQWUoZSl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkodD4xP3QtMTowKSxyPTE7cjx0O3IrKyluW3ItMV09YXJndW1lbnRzW3JdO3JldHVybiBFKGUpfHxnKGUpP05lKF9lKHYoUyxbZV0uY29uY2F0KG4pKSkpOjA9PT1uLmxlbmd0aCYmMT09PWUubGVuZ3RoJiZcInN0cmluZ1wiPT10eXBlb2YgZVswXT9lOk5lKF9lKHYoZSxuKSkpfXZhciBDZT0vaW52YWxpZCBob29rIGNhbGwvaSxJZT1uZXcgU2V0LFBlPWZ1bmN0aW9uKGUsdCl7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7dmFyIG49XCJUaGUgY29tcG9uZW50IFwiK2UrKHQ/JyB3aXRoIHRoZSBpZCBvZiBcIicrdCsnXCInOlwiXCIpK1wiIGhhcyBiZWVuIGNyZWF0ZWQgZHluYW1pY2FsbHkuXFxuWW91IG1heSBzZWUgdGhpcyB3YXJuaW5nIGJlY2F1c2UgeW91J3ZlIGNhbGxlZCBzdHlsZWQgaW5zaWRlIGFub3RoZXIgY29tcG9uZW50LlxcblRvIHJlc29sdmUgdGhpcyBvbmx5IGNyZWF0ZSBuZXcgU3R5bGVkQ29tcG9uZW50cyBvdXRzaWRlIG9mIGFueSByZW5kZXIgbWV0aG9kIGFuZCBmdW5jdGlvbiBjb21wb25lbnQuXCIscj1jb25zb2xlLmVycm9yO3RyeXt2YXIgbz0hMDtjb25zb2xlLmVycm9yPWZ1bmN0aW9uKGUpe2lmKENlLnRlc3QoZSkpbz0hMSxJZS5kZWxldGUobik7ZWxzZXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxzPW5ldyBBcnJheSh0PjE/dC0xOjApLGk9MTtpPHQ7aSsrKXNbaS0xXT1hcmd1bWVudHNbaV07ci5hcHBseSh2b2lkIDAsW2VdLmNvbmNhdChzKSl9fSxjKCksbyYmIUllLmhhcyhuKSYmKGNvbnNvbGUud2FybihuKSxJZS5hZGQobikpfWNhdGNoKGUpe0NlLnRlc3QoZS5tZXNzYWdlKSYmSWUuZGVsZXRlKG4pfWZpbmFsbHl7Y29uc29sZS5lcnJvcj1yfX19LE9lPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdm9pZCAwPT09biYmKG49dyksZS50aGVtZSE9PW4udGhlbWUmJmUudGhlbWV8fHR8fG4udGhlbWV9LFJlPS9bIVwiIyQlJicoKSorLC4vOjs8PT4/QFtcXFxcXFxdXmB7fH1+LV0rL2csRGU9LyheLXwtJCkvZztmdW5jdGlvbiBqZShlKXtyZXR1cm4gZS5yZXBsYWNlKFJlLFwiLVwiKS5yZXBsYWNlKERlLFwiXCIpfXZhciBUZT1mdW5jdGlvbihlKXtyZXR1cm4gUSh0ZShlKT4+PjApfTtmdW5jdGlvbiB4ZShlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZSYmKFwicHJvZHVjdGlvblwiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlZ8fGUuY2hhckF0KDApPT09ZS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSl9dmFyIGtlPWZ1bmN0aW9uKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGV8fFwib2JqZWN0XCI9PXR5cGVvZiBlJiZudWxsIT09ZSYmIUFycmF5LmlzQXJyYXkoZSl9LFZlPWZ1bmN0aW9uKGUpe3JldHVyblwiX19wcm90b19fXCIhPT1lJiZcImNvbnN0cnVjdG9yXCIhPT1lJiZcInByb3RvdHlwZVwiIT09ZX07ZnVuY3Rpb24gQmUoZSx0LG4pe3ZhciByPWVbbl07a2UodCkmJmtlKHIpP3plKHIsdCk6ZVtuXT10fWZ1bmN0aW9uIHplKGUpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KHQ+MT90LTE6MCkscj0xO3I8dDtyKyspbltyLTFdPWFyZ3VtZW50c1tyXTtmb3IodmFyIG89MCxzPW47bzxzLmxlbmd0aDtvKyspe3ZhciBpPXNbb107aWYoa2UoaSkpZm9yKHZhciBhIGluIGkpVmUoYSkmJkJlKGUsaVthXSxhKX1yZXR1cm4gZX12YXIgTWU9ci5jcmVhdGVDb250ZXh0KCksR2U9TWUuQ29uc3VtZXI7ZnVuY3Rpb24gTGUoZSl7dmFyIHQ9cyhNZSksbj1pKChmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlLHQpe2lmKCFlKXJldHVybiBEKDE0KTtpZihFKGUpKXt2YXIgbj1lKHQpO3JldHVyblwicHJvZHVjdGlvblwiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlZ8fG51bGwhPT1uJiYhQXJyYXkuaXNBcnJheShuKSYmXCJvYmplY3RcIj09dHlwZW9mIG4/bjpEKDcpfXJldHVybiBBcnJheS5pc0FycmF5KGUpfHxcIm9iamVjdFwiIT10eXBlb2YgZT9EKDgpOnQ/eSh7fSx0LHt9LGUpOmV9KGUudGhlbWUsdCl9KSxbZS50aGVtZSx0XSk7cmV0dXJuIGUuY2hpbGRyZW4/ci5jcmVhdGVFbGVtZW50KE1lLlByb3ZpZGVyLHt2YWx1ZTpufSxlLmNoaWxkcmVuKTpudWxsfXZhciBGZT17fTtmdW5jdGlvbiBZZShlLHQsbil7dmFyIG89XyhlKSxpPSF4ZShlKSxhPXQuYXR0cnMsYz12b2lkIDA9PT1hP1M6YSxsPXQuY29tcG9uZW50SWQsZD12b2lkIDA9PT1sP2Z1bmN0aW9uKGUsdCl7dmFyIG49XCJzdHJpbmdcIiE9dHlwZW9mIGU/XCJzY1wiOmplKGUpO0ZlW25dPShGZVtuXXx8MCkrMTt2YXIgcj1uK1wiLVwiK1RlKFwiNS4zLjExXCIrbitGZVtuXSk7cmV0dXJuIHQ/dCtcIi1cIityOnJ9KHQuZGlzcGxheU5hbWUsdC5wYXJlbnRDb21wb25lbnRJZCk6bCxoPXQuZGlzcGxheU5hbWUscD12b2lkIDA9PT1oP2Z1bmN0aW9uKGUpe3JldHVybiB4ZShlKT9cInN0eWxlZC5cIitlOlwiU3R5bGVkKFwiK2IoZSkrXCIpXCJ9KGUpOmgsdj10LmRpc3BsYXlOYW1lJiZ0LmNvbXBvbmVudElkP2plKHQuZGlzcGxheU5hbWUpK1wiLVwiK3QuY29tcG9uZW50SWQ6dC5jb21wb25lbnRJZHx8ZCxnPW8mJmUuYXR0cnM/QXJyYXkucHJvdG90eXBlLmNvbmNhdChlLmF0dHJzLGMpLmZpbHRlcihCb29sZWFuKTpjLE49dC5zaG91bGRGb3J3YXJkUHJvcDtvJiZlLnNob3VsZEZvcndhcmRQcm9wJiYoTj10LnNob3VsZEZvcndhcmRQcm9wP2Z1bmN0aW9uKG4scixvKXtyZXR1cm4gZS5zaG91bGRGb3J3YXJkUHJvcChuLHIsbykmJnQuc2hvdWxkRm9yd2FyZFByb3AobixyLG8pfTplLnNob3VsZEZvcndhcmRQcm9wKTt2YXIgQSxDPW5ldyBvZShuLHYsbz9lLmNvbXBvbmVudFN0eWxlOnZvaWQgMCksST1DLmlzU3RhdGljJiYwPT09Yy5sZW5ndGgsUD1mdW5jdGlvbihlLHQpe3JldHVybiBmdW5jdGlvbihlLHQsbixyKXt2YXIgbz1lLmF0dHJzLGk9ZS5jb21wb25lbnRTdHlsZSxhPWUuZGVmYXVsdFByb3BzLGM9ZS5mb2xkZWRDb21wb25lbnRJZHMsbD1lLnNob3VsZEZvcndhcmRQcm9wLGQ9ZS5zdHlsZWRDb21wb25lbnRJZCxoPWUudGFyZ2V0LHA9ZnVuY3Rpb24oZSx0LG4pe3ZvaWQgMD09PWUmJihlPXcpO3ZhciByPXkoe30sdCx7dGhlbWU6ZX0pLG89e307cmV0dXJuIG4uZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIHQsbixzLGk9ZTtmb3IodCBpbiBFKGkpJiYoaT1pKHIpKSxpKXJbdF09b1t0XT1cImNsYXNzTmFtZVwiPT09dD8obj1vW3RdLHM9aVt0XSxuJiZzP24rXCIgXCIrczpufHxzKTppW3RdfSkpLFtyLG9dfShPZSh0LHMoTWUpLGEpfHx3LHQsbyksbT1wWzBdLHY9cFsxXSxnPWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBvPXBlKCkscz1mZSgpLGk9dD9lLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKHcsbyxzKTplLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKG4sbyxzKTtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYhdCYmciYmcihpKSxpfShpLHIsbSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2Uud2FyblRvb01hbnlDbGFzc2VzOnZvaWQgMCksUz1uLGI9di4kYXN8fHQuJGFzfHx2LmFzfHx0LmFzfHxoLF89eGUoYiksTj12IT09dD95KHt9LHQse30sdik6dCxBPXt9O2Zvcih2YXIgQyBpbiBOKVwiJFwiIT09Q1swXSYmXCJhc1wiIT09QyYmKFwiZm9yd2FyZGVkQXNcIj09PUM/QS5hcz1OW0NdOihsP2woQyxmLGIpOiFffHxmKEMpKSYmKEFbQ109TltDXSkpO3JldHVybiB0LnN0eWxlJiZ2LnN0eWxlIT09dC5zdHlsZSYmKEEuc3R5bGU9eSh7fSx0LnN0eWxlLHt9LHYuc3R5bGUpKSxBLmNsYXNzTmFtZT1BcnJheS5wcm90b3R5cGUuY29uY2F0KGMsZCxnIT09ZD9nOm51bGwsdC5jbGFzc05hbWUsdi5jbGFzc05hbWUpLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIFwiKSxBLnJlZj1TLHUoYixBKX0oQSxlLHQsSSl9O3JldHVybiBQLmRpc3BsYXlOYW1lPXAsKEE9ci5mb3J3YXJkUmVmKFApKS5hdHRycz1nLEEuY29tcG9uZW50U3R5bGU9QyxBLmRpc3BsYXlOYW1lPXAsQS5zaG91bGRGb3J3YXJkUHJvcD1OLEEuZm9sZGVkQ29tcG9uZW50SWRzPW8/QXJyYXkucHJvdG90eXBlLmNvbmNhdChlLmZvbGRlZENvbXBvbmVudElkcyxlLnN0eWxlZENvbXBvbmVudElkKTpTLEEuc3R5bGVkQ29tcG9uZW50SWQ9dixBLnRhcmdldD1vP2UudGFyZ2V0OmUsQS53aXRoQ29tcG9uZW50PWZ1bmN0aW9uKGUpe3ZhciByPXQuY29tcG9uZW50SWQsbz1mdW5jdGlvbihlLHQpe2lmKG51bGw9PWUpcmV0dXJue307dmFyIG4scixvPXt9LHM9T2JqZWN0LmtleXMoZSk7Zm9yKHI9MDtyPHMubGVuZ3RoO3IrKyluPXNbcl0sdC5pbmRleE9mKG4pPj0wfHwob1tuXT1lW25dKTtyZXR1cm4gb30odCxbXCJjb21wb25lbnRJZFwiXSkscz1yJiZyK1wiLVwiKyh4ZShlKT9lOmplKGIoZSkpKTtyZXR1cm4gWWUoZSx5KHt9LG8se2F0dHJzOmcsY29tcG9uZW50SWQ6c30pLG4pfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoQSxcImRlZmF1bHRQcm9wc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZm9sZGVkRGVmYXVsdFByb3BzfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5fZm9sZGVkRGVmYXVsdFByb3BzPW8/emUoe30sZS5kZWZhdWx0UHJvcHMsdCk6dH19KSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoUGUocCx2KSxBLndhcm5Ub29NYW55Q2xhc3Nlcz1mdW5jdGlvbihlLHQpe3ZhciBuPXt9LHI9ITE7cmV0dXJuIGZ1bmN0aW9uKG8pe2lmKCFyJiYobltvXT0hMCxPYmplY3Qua2V5cyhuKS5sZW5ndGg+PTIwMCkpe3ZhciBzPXQ/JyB3aXRoIHRoZSBpZCBvZiBcIicrdCsnXCInOlwiXCI7Y29uc29sZS53YXJuKFwiT3ZlciAyMDAgY2xhc3NlcyB3ZXJlIGdlbmVyYXRlZCBmb3IgY29tcG9uZW50IFwiK2UrcytcIi5cXG5Db25zaWRlciB1c2luZyB0aGUgYXR0cnMgbWV0aG9kLCB0b2dldGhlciB3aXRoIGEgc3R5bGUgb2JqZWN0IGZvciBmcmVxdWVudGx5IGNoYW5nZWQgc3R5bGVzLlxcbkV4YW1wbGU6XFxuICBjb25zdCBDb21wb25lbnQgPSBzdHlsZWQuZGl2LmF0dHJzKHByb3BzID0+ICh7XFxuICAgIHN0eWxlOiB7XFxuICAgICAgYmFja2dyb3VuZDogcHJvcHMuYmFja2dyb3VuZCxcXG4gICAgfSxcXG4gIH0pKWB3aWR0aDogMTAwJTtgXFxuXFxuICA8Q29tcG9uZW50IC8+XCIpLHI9ITAsbj17fX19fShwLHYpKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoQSxcInRvU3RyaW5nXCIse3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuXCIuXCIrQS5zdHlsZWRDb21wb25lbnRJZH19KSxpJiZtKEEsZSx7YXR0cnM6ITAsY29tcG9uZW50U3R5bGU6ITAsZGlzcGxheU5hbWU6ITAsZm9sZGVkQ29tcG9uZW50SWRzOiEwLHNob3VsZEZvcndhcmRQcm9wOiEwLHN0eWxlZENvbXBvbmVudElkOiEwLHRhcmdldDohMCx3aXRoQ29tcG9uZW50OiEwfSksQX12YXIgcWU9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uIGUodCxyLG8pe2lmKHZvaWQgMD09PW8mJihvPXcpLCFuKHIpKXJldHVybiBEKDEsU3RyaW5nKHIpKTt2YXIgcz1mdW5jdGlvbigpe3JldHVybiB0KHIsbyxBZS5hcHBseSh2b2lkIDAsYXJndW1lbnRzKSl9O3JldHVybiBzLndpdGhDb25maWc9ZnVuY3Rpb24obil7cmV0dXJuIGUodCxyLHkoe30sbyx7fSxuKSl9LHMuYXR0cnM9ZnVuY3Rpb24obil7cmV0dXJuIGUodCxyLHkoe30sbyx7YXR0cnM6QXJyYXkucHJvdG90eXBlLmNvbmNhdChvLmF0dHJzLG4pLmZpbHRlcihCb29sZWFuKX0pKX0sc30oWWUsZSl9O1tcImFcIixcImFiYnJcIixcImFkZHJlc3NcIixcImFyZWFcIixcImFydGljbGVcIixcImFzaWRlXCIsXCJhdWRpb1wiLFwiYlwiLFwiYmFzZVwiLFwiYmRpXCIsXCJiZG9cIixcImJpZ1wiLFwiYmxvY2txdW90ZVwiLFwiYm9keVwiLFwiYnJcIixcImJ1dHRvblwiLFwiY2FudmFzXCIsXCJjYXB0aW9uXCIsXCJjaXRlXCIsXCJjb2RlXCIsXCJjb2xcIixcImNvbGdyb3VwXCIsXCJkYXRhXCIsXCJkYXRhbGlzdFwiLFwiZGRcIixcImRlbFwiLFwiZGV0YWlsc1wiLFwiZGZuXCIsXCJkaWFsb2dcIixcImRpdlwiLFwiZGxcIixcImR0XCIsXCJlbVwiLFwiZW1iZWRcIixcImZpZWxkc2V0XCIsXCJmaWdjYXB0aW9uXCIsXCJmaWd1cmVcIixcImZvb3RlclwiLFwiZm9ybVwiLFwiaDFcIixcImgyXCIsXCJoM1wiLFwiaDRcIixcImg1XCIsXCJoNlwiLFwiaGVhZFwiLFwiaGVhZGVyXCIsXCJoZ3JvdXBcIixcImhyXCIsXCJodG1sXCIsXCJpXCIsXCJpZnJhbWVcIixcImltZ1wiLFwiaW5wdXRcIixcImluc1wiLFwia2JkXCIsXCJrZXlnZW5cIixcImxhYmVsXCIsXCJsZWdlbmRcIixcImxpXCIsXCJsaW5rXCIsXCJtYWluXCIsXCJtYXBcIixcIm1hcmtcIixcIm1hcnF1ZWVcIixcIm1lbnVcIixcIm1lbnVpdGVtXCIsXCJtZXRhXCIsXCJtZXRlclwiLFwibmF2XCIsXCJub3NjcmlwdFwiLFwib2JqZWN0XCIsXCJvbFwiLFwib3B0Z3JvdXBcIixcIm9wdGlvblwiLFwib3V0cHV0XCIsXCJwXCIsXCJwYXJhbVwiLFwicGljdHVyZVwiLFwicHJlXCIsXCJwcm9ncmVzc1wiLFwicVwiLFwicnBcIixcInJ0XCIsXCJydWJ5XCIsXCJzXCIsXCJzYW1wXCIsXCJzY3JpcHRcIixcInNlY3Rpb25cIixcInNlbGVjdFwiLFwic21hbGxcIixcInNvdXJjZVwiLFwic3BhblwiLFwic3Ryb25nXCIsXCJzdHlsZVwiLFwic3ViXCIsXCJzdW1tYXJ5XCIsXCJzdXBcIixcInRhYmxlXCIsXCJ0Ym9keVwiLFwidGRcIixcInRleHRhcmVhXCIsXCJ0Zm9vdFwiLFwidGhcIixcInRoZWFkXCIsXCJ0aW1lXCIsXCJ0aXRsZVwiLFwidHJcIixcInRyYWNrXCIsXCJ1XCIsXCJ1bFwiLFwidmFyXCIsXCJ2aWRlb1wiLFwid2JyXCIsXCJjaXJjbGVcIixcImNsaXBQYXRoXCIsXCJkZWZzXCIsXCJlbGxpcHNlXCIsXCJmb3JlaWduT2JqZWN0XCIsXCJnXCIsXCJpbWFnZVwiLFwibGluZVwiLFwibGluZWFyR3JhZGllbnRcIixcIm1hcmtlclwiLFwibWFza1wiLFwicGF0aFwiLFwicGF0dGVyblwiLFwicG9seWdvblwiLFwicG9seWxpbmVcIixcInJhZGlhbEdyYWRpZW50XCIsXCJyZWN0XCIsXCJzdG9wXCIsXCJzdmdcIixcInRleHRcIixcInRleHRQYXRoXCIsXCJ0c3BhblwiXS5mb3JFYWNoKChmdW5jdGlvbihlKXtxZVtlXT1xZShlKX0pKTt2YXIgSGU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7dGhpcy5ydWxlcz1lLHRoaXMuY29tcG9uZW50SWQ9dCx0aGlzLmlzU3RhdGljPW5lKGUpLFgucmVnaXN0ZXJJZCh0aGlzLmNvbXBvbmVudElkKzEpfXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmNyZWF0ZVN0eWxlcz1mdW5jdGlvbihlLHQsbixyKXt2YXIgbz1yKF9lKHRoaXMucnVsZXMsdCxuLHIpLmpvaW4oXCJcIiksXCJcIikscz10aGlzLmNvbXBvbmVudElkK2U7bi5pbnNlcnRSdWxlcyhzLHMsbyl9LHQucmVtb3ZlU3R5bGVzPWZ1bmN0aW9uKGUsdCl7dC5jbGVhclJ1bGVzKHRoaXMuY29tcG9uZW50SWQrZSl9LHQucmVuZGVyU3R5bGVzPWZ1bmN0aW9uKGUsdCxuLHIpe2U+MiYmWC5yZWdpc3RlcklkKHRoaXMuY29tcG9uZW50SWQrZSksdGhpcy5yZW1vdmVTdHlsZXMoZSxuKSx0aGlzLmNyZWF0ZVN0eWxlcyhlLHQsbixyKX0sZX0oKTtmdW5jdGlvbiAkZShlKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0PjE/dC0xOjApLG89MTtvPHQ7bysrKW5bby0xXT1hcmd1bWVudHNbb107dmFyIGk9QWUuYXBwbHkodm9pZCAwLFtlXS5jb25jYXQobikpLGE9XCJzYy1nbG9iYWwtXCIrVGUoSlNPTi5zdHJpbmdpZnkoaSkpLHU9bmV3IEhlKGksYSk7ZnVuY3Rpb24gZChlKXt2YXIgdD1wZSgpLG49ZmUoKSxvPXMoTWUpLGQ9Yyh0LmFsbG9jYXRlR1NJbnN0YW5jZShhKSkuY3VycmVudDtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZyLkNoaWxkcmVuLmNvdW50KGUuY2hpbGRyZW4pJiZjb25zb2xlLndhcm4oXCJUaGUgZ2xvYmFsIHN0eWxlIGNvbXBvbmVudCBcIithK1wiIHdhcyBnaXZlbiBjaGlsZCBKU1guIGNyZWF0ZUdsb2JhbFN0eWxlIGRvZXMgbm90IHJlbmRlciBjaGlsZHJlbi5cIiksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmaS5zb21lKChmdW5jdGlvbihlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZSYmLTEhPT1lLmluZGV4T2YoXCJAaW1wb3J0XCIpfSkpJiZjb25zb2xlLndhcm4oXCJQbGVhc2UgZG8gbm90IHVzZSBAaW1wb3J0IENTUyBzeW50YXggaW4gY3JlYXRlR2xvYmFsU3R5bGUgYXQgdGhpcyB0aW1lLCBhcyB0aGUgQ1NTT00gQVBJcyB3ZSB1c2UgaW4gcHJvZHVjdGlvbiBkbyBub3QgaGFuZGxlIGl0IHdlbGwuIEluc3RlYWQsIHdlIHJlY29tbWVuZCB1c2luZyBhIGxpYnJhcnkgc3VjaCBhcyByZWFjdC1oZWxtZXQgdG8gaW5qZWN0IGEgdHlwaWNhbCA8bGluaz4gbWV0YSB0YWcgdG8gdGhlIHN0eWxlc2hlZXQsIG9yIHNpbXBseSBlbWJlZGRpbmcgaXQgbWFudWFsbHkgaW4geW91ciBpbmRleC5odG1sIDxoZWFkPiBzZWN0aW9uIGZvciBhIHNpbXBsZXIgYXBwLlwiKSx0LnNlcnZlciYmaChkLGUsdCxvLG4pLGwoKGZ1bmN0aW9uKCl7aWYoIXQuc2VydmVyKXJldHVybiBoKGQsZSx0LG8sbiksZnVuY3Rpb24oKXtyZXR1cm4gdS5yZW1vdmVTdHlsZXMoZCx0KX19KSxbZCxlLHQsbyxuXSksbnVsbH1mdW5jdGlvbiBoKGUsdCxuLHIsbyl7aWYodS5pc1N0YXRpYyl1LnJlbmRlclN0eWxlcyhlLFAsbixvKTtlbHNle3ZhciBzPXkoe30sdCx7dGhlbWU6T2UodCxyLGQuZGVmYXVsdFByb3BzKX0pO3UucmVuZGVyU3R5bGVzKGUscyxuLG8pfX1yZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZQZShhKSxyLm1lbW8oZCl9ZnVuY3Rpb24gV2UoZSl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG5hdmlnYXRvciYmXCJSZWFjdE5hdGl2ZVwiPT09bmF2aWdhdG9yLnByb2R1Y3QmJmNvbnNvbGUud2FybihcImBrZXlmcmFtZXNgIGNhbm5vdCBiZSB1c2VkIG9uIFJlYWN0TmF0aXZlLCBvbmx5IG9uIHRoZSB3ZWIuIFRvIGRvIGFuaW1hdGlvbiBpbiBSZWFjdE5hdGl2ZSBwbGVhc2UgdXNlIEFuaW1hdGVkLlwiKTtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0PjE/dC0xOjApLHI9MTtyPHQ7cisrKW5bci0xXT1hcmd1bWVudHNbcl07dmFyIG89QWUuYXBwbHkodm9pZCAwLFtlXS5jb25jYXQobikpLmpvaW4oXCJcIikscz1UZShvKTtyZXR1cm4gbmV3IHllKHMsbyl9dmFyIFVlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe3ZhciBlPXRoaXM7dGhpcy5fZW1pdFNoZWV0Q1NTPWZ1bmN0aW9uKCl7dmFyIHQ9ZS5pbnN0YW5jZS50b1N0cmluZygpO2lmKCF0KXJldHVyblwiXCI7dmFyIG49WSgpO3JldHVyblwiPHN0eWxlIFwiK1tuJiYnbm9uY2U9XCInK24rJ1wiJyxOKyc9XCJ0cnVlXCInLCdkYXRhLXN0eWxlZC12ZXJzaW9uPVwiNS4zLjExXCInXS5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIikrXCI+XCIrdCtcIjwvc3R5bGU+XCJ9LHRoaXMuZ2V0U3R5bGVUYWdzPWZ1bmN0aW9uKCl7cmV0dXJuIGUuc2VhbGVkP0QoMik6ZS5fZW1pdFNoZWV0Q1NTKCl9LHRoaXMuZ2V0U3R5bGVFbGVtZW50PWZ1bmN0aW9uKCl7dmFyIHQ7aWYoZS5zZWFsZWQpcmV0dXJuIEQoMik7dmFyIG49KCh0PXt9KVtOXT1cIlwiLHRbXCJkYXRhLXN0eWxlZC12ZXJzaW9uXCJdPVwiNS4zLjExXCIsdC5kYW5nZXJvdXNseVNldElubmVySFRNTD17X19odG1sOmUuaW5zdGFuY2UudG9TdHJpbmcoKX0sdCksbz1ZKCk7cmV0dXJuIG8mJihuLm5vbmNlPW8pLFtyLmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiLHkoe30sbix7a2V5Olwic2MtMC0wXCJ9KSldfSx0aGlzLnNlYWw9ZnVuY3Rpb24oKXtlLnNlYWxlZD0hMH0sdGhpcy5pbnN0YW5jZT1uZXcgWCh7aXNTZXJ2ZXI6ITB9KSx0aGlzLnNlYWxlZD0hMX12YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5jb2xsZWN0U3R5bGVzPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnNlYWxlZD9EKDIpOnIuY3JlYXRlRWxlbWVudChtZSx7c2hlZXQ6dGhpcy5pbnN0YW5jZX0sZSl9LHQuaW50ZXJsZWF2ZVdpdGhOb2RlU3RyZWFtPWZ1bmN0aW9uKGUpe3JldHVybiBEKDMpfSxlfSgpLEplPWZ1bmN0aW9uKGUpe3ZhciB0PXIuZm9yd2FyZFJlZigoZnVuY3Rpb24odCxuKXt2YXIgbz1zKE1lKSxpPWUuZGVmYXVsdFByb3BzLGE9T2UodCxvLGkpO3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJnZvaWQgMD09PWEmJmNvbnNvbGUud2FybignW3dpdGhUaGVtZV0gWW91IGFyZSBub3QgdXNpbmcgYSBUaGVtZVByb3ZpZGVyIG5vciBwYXNzaW5nIGEgdGhlbWUgcHJvcCBvciBhIHRoZW1lIGluIGRlZmF1bHRQcm9wcyBpbiBjb21wb25lbnQgY2xhc3MgXCInK2IoZSkrJ1wiJyksci5jcmVhdGVFbGVtZW50KGUseSh7fSx0LHt0aGVtZTphLHJlZjpufSkpfSkpO3JldHVybiBtKHQsZSksdC5kaXNwbGF5TmFtZT1cIldpdGhUaGVtZShcIitiKGUpK1wiKVwiLHR9LFhlPWZ1bmN0aW9uKCl7cmV0dXJuIHMoTWUpfSxaZT17U3R5bGVTaGVldDpYLG1hc3RlclNoZWV0OmRlfTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbmF2aWdhdG9yJiZcIlJlYWN0TmF0aXZlXCI9PT1uYXZpZ2F0b3IucHJvZHVjdCYmY29uc29sZS53YXJuKFwiSXQgbG9va3MgbGlrZSB5b3UndmUgaW1wb3J0ZWQgJ3N0eWxlZC1jb21wb25lbnRzJyBvbiBSZWFjdCBOYXRpdmUuXFxuUGVyaGFwcyB5b3UncmUgbG9va2luZyB0byBpbXBvcnQgJ3N0eWxlZC1jb21wb25lbnRzL25hdGl2ZSc/XFxuUmVhZCBtb3JlIGFib3V0IHRoaXMgYXQgaHR0cHM6Ly93d3cuc3R5bGVkLWNvbXBvbmVudHMuY29tL2RvY3MvYmFzaWNzI3JlYWN0LW5hdGl2ZVwiKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcInRlc3RcIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiYod2luZG93W1wiX19zdHlsZWQtY29tcG9uZW50cy1pbml0X19cIl09d2luZG93W1wiX19zdHlsZWQtY29tcG9uZW50cy1pbml0X19cIl18fDAsMT09PXdpbmRvd1tcIl9fc3R5bGVkLWNvbXBvbmVudHMtaW5pdF9fXCJdJiZjb25zb2xlLndhcm4oXCJJdCBsb29rcyBsaWtlIHRoZXJlIGFyZSBzZXZlcmFsIGluc3RhbmNlcyBvZiAnc3R5bGVkLWNvbXBvbmVudHMnIGluaXRpYWxpemVkIGluIHRoaXMgYXBwbGljYXRpb24uIFRoaXMgbWF5IGNhdXNlIGR5bmFtaWMgc3R5bGVzIHRvIG5vdCByZW5kZXIgcHJvcGVybHksIGVycm9ycyBkdXJpbmcgdGhlIHJlaHlkcmF0aW9uIHByb2Nlc3MsIGEgbWlzc2luZyB0aGVtZSBwcm9wLCBhbmQgbWFrZXMgeW91ciBhcHBsaWNhdGlvbiBiaWdnZXIgd2l0aG91dCBnb29kIHJlYXNvbi5cXG5cXG5TZWUgaHR0cHM6Ly9zLWMuc2gvMkJBWHplZCBmb3IgbW9yZSBpbmZvLlwiKSx3aW5kb3dbXCJfX3N0eWxlZC1jb21wb25lbnRzLWluaXRfX1wiXSs9MSk7ZXhwb3J0IGRlZmF1bHQgcWU7ZXhwb3J0e1VlIGFzIFNlcnZlclN0eWxlU2hlZXQsdWUgYXMgU3R5bGVTaGVldENvbnN1bWVyLGNlIGFzIFN0eWxlU2hlZXRDb250ZXh0LG1lIGFzIFN0eWxlU2hlZXRNYW5hZ2VyLEdlIGFzIFRoZW1lQ29uc3VtZXIsTWUgYXMgVGhlbWVDb250ZXh0LExlIGFzIFRoZW1lUHJvdmlkZXIsWmUgYXMgX19QUklWQVRFX18sJGUgYXMgY3JlYXRlR2xvYmFsU3R5bGUsQWUgYXMgY3NzLF8gYXMgaXNTdHlsZWRDb21wb25lbnQsV2UgYXMga2V5ZnJhbWVzLFhlIGFzIHVzZVRoZW1lLEEgYXMgdmVyc2lvbixKZSBhcyB3aXRoVGhlbWV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGVkLWNvbXBvbmVudHMuYnJvd3Nlci5lc20uanMubWFwXG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFN0eWxlQXBwV3JhcHBlciA9IHN0eWxlZC5kaXZgXHJcbiAgbWF4LXdpZHRoOiAyMjVyZW07XHJcbiAgbWFyZ2luOiAwIGF1dG87XHJcbmA7XHJcbiIsImltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XG5cbmV4cG9ydCBjb25zdCBTdHlsZVdvcmtvdXRTY2hlZHVsZVdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiA2MHB4O1xuYDtcbiIsImltcG9ydCBzdHlsZWQsIHsgY3NzIH0gZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRXZWVrRGF5V3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIG1pbi1oZWlnaHQ6IGNhbGMoMTAwdmggLSAxMjBweCk7XG4gIG1pbi13aWR0aDogMTAwcHg7XG4gIG1heC13aWR0aDogNTAwcHg7XG5cbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgZ2FwOiA5cHg7XG5cbiAgZmxleDogMTtcbmA7XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRXZWVrRGF5SGVhZGVyID0gc3R5bGVkLnBgXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGZvbnQtc2l6ZTogMXJlbTtcbiAgY29sb3I6IHZhcigtLXRleHQtc2Vjb25kYXJ5KTtcbmA7XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRXZWVrRGF5Q29udGVudCA9IHN0eWxlZC5kaXZgXG4gIGJhY2tncm91bmQ6IHZhcigtLWJnLXNlY29uZGFyeSk7XG4gIHBhZGRpbmc6IDVweDtcbiAgaGVpZ2h0OiAxMDAlO1xuICBib3JkZXItcmFkaXVzOiA2cHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGdhcDogNXB4O1xuICAvLyBvcGFjaXR5OiAwLjgwMTc7XG5gO1xuXG5leHBvcnQgY29uc3QgU3R5bGVkV2Vla0RheVRpdGxlID0gc3R5bGVkLmgzPHsgJGlzQWN0aXZlOiBib29sZWFuIH0+KFxuICAoeyAkaXNBY3RpdmUgfSkgPT4ge1xuICAgIHJldHVybiBjc3NgXG4gICAgICBmb250LXdlaWdodDogNjAwO1xuICAgICAgZm9udC1zaXplOiAxLjFyZW07XG4gICAgICBjb2xvcjogdmFyKC0tdGV4dC10ZXJ0aWFyeSk7XG5cbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuXG4gICAgICAkeyRpc0FjdGl2ZSAmJlxuICAgICAgY3NzYFxuICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1oaWdodGxpZ2h0KTtcbiAgICAgICAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgICAgIGB9XG4gICAgYDtcbiAgfSxcbik7XG4iLCJpbXBvcnQgdHlwZSB7IERheSB9IGZyb20gXCIuLi9kYXRhL2RhdGFcIjtcblxuZXhwb3J0IGNvbnN0IGdldEN1cnJlbnRXZWVrID0gKCk6IERhdGVbXSA9PiB7XG4gIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gIGNvbnN0IGRheU9mV2VlayA9IG5vdy5nZXREYXkoKTtcbiAgY29uc3QgZGF5T2ZNb250aCA9IG5vdy5nZXREYXRlKCk7XG4gIGNvbnN0IHN0YXJ0T2ZXZWVrID0gbmV3IERhdGUobm93KTtcblxuICBzdGFydE9mV2Vlay5zZXREYXRlKGRheU9mTW9udGggLSAoZGF5T2ZXZWVrID09PSAwID8gNiA6IGRheU9mV2VlayAtIDEpKTtcblxuICBjb25zdCB3ZWVrOiBEYXRlW10gPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICBjb25zdCBkYXkgPSBuZXcgRGF0ZShzdGFydE9mV2Vlayk7XG4gICAgZGF5LnNldERhdGUoc3RhcnRPZldlZWsuZ2V0RGF0ZSgpICsgaSk7XG4gICAgd2Vlay5wdXNoKGRheSk7XG4gIH1cblxuICByZXR1cm4gd2Vlaztcbn07XG5cbmV4cG9ydCB0eXBlIERhdGVEYXRhID0ge1xuICBtb250aERheTogc3RyaW5nO1xuICB3ZWVrRGF5OiBEYXk7XG4gIGlzVG9kYXk6IGJvb2xlYW47XG59O1xuZXhwb3J0IGNvbnN0IGdldERhdGVEYXRhID0gKGRhdGU6IERhdGUpOiBEYXRlRGF0YSA9PiB7XG4gIHJldHVybiB7XG4gICAgbW9udGhEYXk6IGRhdGUuZ2V0RGF0ZSgpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgXCIwXCIpLFxuICAgIHdlZWtEYXk6IGRhdGVcbiAgICAgIC50b0xvY2FsZURhdGVTdHJpbmcodW5kZWZpbmVkLCB7IHdlZWtkYXk6IFwic2hvcnRcIiB9KVxuICAgICAgLnRvTG93ZXJDYXNlKCkgYXMgRGF5LFxuICAgIGlzVG9kYXk6IGRhdGUudG9EYXRlU3RyaW5nKCkgPT09IG5ldyBEYXRlKCkudG9EYXRlU3RyaW5nKCksXG4gIH07XG59O1xuIiwiaW1wb3J0IHN0eWxlZCwgeyBjc3MgfSBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcbmltcG9ydCB0eXBlIHsgSWNvbkJ1dHRvblZhcmlhbnQgfSBmcm9tIFwiLi9JY29uQnV0dG9uXCI7XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRJY29uQnV0dG9uID0gc3R5bGVkLmJ1dHRvbjx7ICR2YXJpYW50OiBJY29uQnV0dG9uVmFyaWFudCB9PihcbiAgKHsgJHZhcmlhbnQgfSkgPT4ge1xuICAgIHJldHVybiBjc3NgXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcblxuICAgICAgYm9yZGVyOiBub25lO1xuXG4gICAgICB3aWR0aDogMTJweDtcbiAgICAgIGhlaWdodDogMTJweDtcbiAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG5cbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgICAgICR7JHZhcmlhbnQgPT09IFwiY29udGFpbmVkXCIgJiZcbiAgICAgIGNzc2BcbiAgICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWludGVyYWN0aXZlKTtcbiAgICAgICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAwLjNzO1xuXG4gICAgICAgICY6aG92ZXIge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWFjdGl2ZSk7XG4gICAgICAgIH1cbiAgICAgIGB9XG5cbiAgICAgICR7JHZhcmlhbnQgPT09IFwiaWNvblwiICYmXG4gICAgICBjc3NgXG4gICAgICAgIGNvbG9yOiAjYzRjNGM0O1xuICAgICAgICB0cmFuc2l0aW9uOiBjb2xvciAwLjNzO1xuXG4gICAgICAgICY6aG92ZXIge1xuICAgICAgICAgIGNvbG9yOiB2YXIoLS1hY3RpdmUpO1xuICAgICAgICB9XG4gICAgICBgfVxuICAgIGA7XG4gIH0sXG4pO1xuIiwiaW1wb3J0IHsgU3R5bGVkSWNvbkJ1dHRvbiB9IGZyb20gXCIuL0J1dHRvbi5zdHlsZWRcIjtcblxuZXhwb3J0IHR5cGUgSWNvbkJ1dHRvblZhcmlhbnQgPSBcImNvbnRhaW5lZFwiIHwgXCJpY29uXCI7XG5cbnR5cGUgQnV0dG9uUHJvcHMgPSB7XG4gIG9uQ2xpY2s/OiAoKSA9PiB2b2lkO1xuICBpY29uOiBzdHJpbmc7XG4gIHZhcmlhbnQ/OiBJY29uQnV0dG9uVmFyaWFudDtcbn07XG5cbmNvbnN0IEljb25CdXR0b246IFJlYWN0LkZDPEJ1dHRvblByb3BzPiA9ICh7XG4gIG9uQ2xpY2ssXG4gIGljb24sXG4gIHZhcmlhbnQgPSBcImljb25cIixcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkSWNvbkJ1dHRvbiAkdmFyaWFudD17dmFyaWFudH0gb25DbGljaz17b25DbGlja30+XG4gICAgICB7aWNvbn1cbiAgICA8L1N0eWxlZEljb25CdXR0b24+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBJY29uQnV0dG9uO1xuIiwiaW1wb3J0IHN0eWxlZCBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcblxuZXhwb3J0IGNvbnN0IFN0eWxlV29ya291dFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iZy1wcmltYXJ5KTtcbiAgYm9yZGVyOiAxcHggc29saWQgIzIyMjQyNjI2O1xuICBwYWRkaW5nOiA1cHg7XG4gIGJvcmRlci1yYWRpdXM6IDZweDtcblxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBnYXA6IDVweDtcblxuICBjdXJzb3I6IGdyYWI7XG5gO1xuXG5leHBvcnQgY29uc3QgU3R5bGVXb3Jrb3V0SGVhZGVyID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBjb2xvcjogdmFyKC0tdGV4dC1wcmltYXJ5KTtcbiAgZ2FwOiA3cHg7XG5gO1xuXG5leHBvcnQgY29uc3QgU3R5bGVXb3Jrb3V0Q29udGVudCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGdhcDogNXB4O1xuYDtcblxuZXhwb3J0IGNvbnN0IFN0eWxlV29ya291dEZvb3RlciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG5gO1xuIiwiaW1wb3J0IHN0eWxlZCwgeyBjc3MgfSBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcblxuY29uc3QgZWxsaXBzaXNPdmVyZmxvdyA9IGNzc2BcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG5gO1xuXG5leHBvcnQgY29uc3QgU3R5bGVkSDVUeXBvZ3JhcGh5ID0gc3R5bGVkLmg1YFxuICBmb250LXNpemU6IDFyZW07XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGZvbnQtd2VpZ2h0OiA3MDA7XG5cbiAgJHtlbGxpcHNpc092ZXJmbG93fTtcbmA7XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRINlR5cG9ncmFwaHkgPSBzdHlsZWQuaDZgXG4gIGZvbnQtc2l6ZTogMS4zcmVtO1xuICBmb250LXdlaWdodDogNjAwO1xuICAke2VsbGlwc2lzT3ZlcmZsb3d9O1xuYDtcblxuZXhwb3J0IGNvbnN0IFN0eWxlZEJvZHkxVHlwb2dyYXBoeSA9IHN0eWxlZC5wYFxuICBmb250LXdlaWdodDogNzAwO1xuICBjb2xvcjogIzkxOWNhZDtcbmA7XG5leHBvcnQgY29uc3QgU3R5bGVkQm9keTJUeXBvZ3JhcGh5ID0gc3R5bGVkLnBgXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIGNvbG9yOiAjOTVhNmI3O1xuXG4gICR7ZWxsaXBzaXNPdmVyZmxvd307XG5gO1xuIiwiaW1wb3J0IHtcbiAgU3R5bGVkSDVUeXBvZ3JhcGh5LFxuICBTdHlsZWRINlR5cG9ncmFwaHksXG4gIFN0eWxlZEJvZHkxVHlwb2dyYXBoeSxcbiAgU3R5bGVkQm9keTJUeXBvZ3JhcGh5LFxufSBmcm9tIFwiLi9UeXBvZ3JhcGh5LnN0eWxlZFwiO1xuXG50eXBlIFR5cG9ncmFwaHlQcm9wcyA9IHtcbiAgdmFyaWFudD86IFwiaDVcIiB8IFwiaDZcIiB8IFwiYm9keTFcIiB8IFwiYm9keTJcIjtcbn0gJiBQYXJlbnRQcm9wcztcblxuY29uc3QgVHlwb2dyYXBoeTogUmVhY3QuRkM8VHlwb2dyYXBoeVByb3BzPiA9ICh7XG4gIGNoaWxkcmVuLFxuICB2YXJpYW50ID0gXCJib2R5MVwiLFxufSkgPT4ge1xuICBjb25zdCB2YXJpYW50TWFwcGluZyA9IHtcbiAgICBoNTogU3R5bGVkSDVUeXBvZ3JhcGh5LFxuICAgIGg2OiBTdHlsZWRINlR5cG9ncmFwaHksXG4gICAgYm9keTE6IFN0eWxlZEJvZHkxVHlwb2dyYXBoeSxcbiAgICBib2R5MjogU3R5bGVkQm9keTJUeXBvZ3JhcGh5LFxuICB9O1xuXG4gIGNvbnN0IFZhcmlhbnRDb21wb25lbnQgPSB2YXJpYW50TWFwcGluZ1t2YXJpYW50XTtcblxuICByZXR1cm4gPFZhcmlhbnRDb21wb25lbnQgdGl0bGU9e2NoaWxkcmVufT57Y2hpbGRyZW59PC9WYXJpYW50Q29tcG9uZW50Pjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFR5cG9ncmFwaHk7XG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuXG5leHBvcnQgY29uc3QgU3R5bGVkRXhlcmNpc2VXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgYm9yZGVyOiAxcHggc29saWQgI2RmZGZkZjtcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xuICBwYWRkaW5nOiA1cHg7XG4gIGJveC1zaGFkb3c6IHJnYmEoMCwgMCwgMCwgMC4wNSkgMCAwIDAgMXB4OyAvLyBpdCBsb29rcyBiZXR0ZXIgd2l0aCBib3gtc2hhZG93XG5gO1xuXG5leHBvcnQgY29uc3QgU3R5bGVkRXhlcmNpc2VIZWFkZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuYDtcblxuZXhwb3J0IGNvbnN0IFN0eWxlZEV4ZXJjaXNlRGV0YWlsID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBnYXA6IDIwcHg7XG5gO1xuIiwiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG4vLyBzdXBwcmVzcyB0aGUgdXNlTGF5b3V0RWZmZWN0IHdhcm5pbmcgb24gc2VydmVyIHNpZGUuXG5leHBvcnQgY29uc3QgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gdXNlTGF5b3V0RWZmZWN0IDogdXNlRWZmZWN0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LmpzLm1hcCIsImltcG9ydCB7IHVzZU1vbml0b3JPdXRwdXQgfSBmcm9tICcuL3VzZU1vbml0b3JPdXRwdXQuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUNvbGxlY3RlZFByb3BzKGNvbGxlY3RvciwgbW9uaXRvciwgY29ubmVjdG9yKSB7XG4gICAgcmV0dXJuIHVzZU1vbml0b3JPdXRwdXQobW9uaXRvciwgY29sbGVjdG9yIHx8ICgoKT0+KHt9KVxuICAgICksICgpPT5jb25uZWN0b3IucmVjb25uZWN0KClcbiAgICApO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VDb2xsZWN0ZWRQcm9wcy5qcy5tYXAiLCJpbXBvcnQgeyB1c2VDb2xsZWN0b3IgfSBmcm9tICcuL3VzZUNvbGxlY3Rvci5qcyc7XG5pbXBvcnQgeyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSAnLi91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LmpzJztcbmV4cG9ydCBmdW5jdGlvbiB1c2VNb25pdG9yT3V0cHV0KG1vbml0b3IsIGNvbGxlY3QsIG9uQ29sbGVjdCkge1xuICAgIGNvbnN0IFtjb2xsZWN0ZWQsIHVwZGF0ZUNvbGxlY3RlZF0gPSB1c2VDb2xsZWN0b3IobW9uaXRvciwgY29sbGVjdCwgb25Db2xsZWN0KTtcbiAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uIHN1YnNjcmliZVRvTW9uaXRvclN0YXRlQ2hhbmdlKCkge1xuICAgICAgICBjb25zdCBoYW5kbGVySWQgPSBtb25pdG9yLmdldEhhbmRsZXJJZCgpO1xuICAgICAgICBpZiAoaGFuZGxlcklkID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbW9uaXRvci5zdWJzY3JpYmVUb1N0YXRlQ2hhbmdlKHVwZGF0ZUNvbGxlY3RlZCwge1xuICAgICAgICAgICAgaGFuZGxlcklkczogW1xuICAgICAgICAgICAgICAgIGhhbmRsZXJJZFxuICAgICAgICAgICAgXVxuICAgICAgICB9KTtcbiAgICB9LCBbXG4gICAgICAgIG1vbml0b3IsXG4gICAgICAgIHVwZGF0ZUNvbGxlY3RlZFxuICAgIF0pO1xuICAgIHJldHVybiBjb2xsZWN0ZWQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZU1vbml0b3JPdXRwdXQuanMubWFwIiwiaW1wb3J0IGVxdWFsIGZyb20gJ2Zhc3QtZGVlcC1lcXVhbCc7XG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSAnLi91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LmpzJztcbi8qKlxuICpcbiAqIEBwYXJhbSBtb25pdG9yIFRoZSBtb25pdG9yIHRvIGNvbGxlY3Qgc3RhdGUgZnJvbVxuICogQHBhcmFtIGNvbGxlY3QgVGhlIGNvbGxlY3RpbmcgZnVuY3Rpb25cbiAqIEBwYXJhbSBvblVwZGF0ZSBBIG1ldGhvZCB0byBpbnZva2Ugd2hlbiB1cGRhdGVzIG9jY3VyXG4gKi8gZXhwb3J0IGZ1bmN0aW9uIHVzZUNvbGxlY3Rvcihtb25pdG9yLCBjb2xsZWN0LCBvblVwZGF0ZSkge1xuICAgIGNvbnN0IFtjb2xsZWN0ZWQsIHNldENvbGxlY3RlZF0gPSB1c2VTdGF0ZSgoKT0+Y29sbGVjdChtb25pdG9yKVxuICAgICk7XG4gICAgY29uc3QgdXBkYXRlQ29sbGVjdGVkID0gdXNlQ2FsbGJhY2soKCk9PntcbiAgICAgICAgY29uc3QgbmV4dFZhbHVlID0gY29sbGVjdChtb25pdG9yKTtcbiAgICAgICAgLy8gVGhpcyBuZWVkcyB0byBiZSBhIGRlZXAtZXF1YWxpdHkgY2hlY2sgYmVjYXVzZSBzb21lIG1vbml0b3ItY29sbGVjdGVkIHZhbHVlc1xuICAgICAgICAvLyBpbmNsdWRlIFhZQ29vcmQgb2JqZWN0cyB0aGF0IG1heSBiZSBlcXVpdmFsZW50LCBidXQgZG8gbm90IGhhdmUgaW5zdGFuY2UgZXF1YWxpdHkuXG4gICAgICAgIGlmICghZXF1YWwoY29sbGVjdGVkLCBuZXh0VmFsdWUpKSB7XG4gICAgICAgICAgICBzZXRDb2xsZWN0ZWQobmV4dFZhbHVlKTtcbiAgICAgICAgICAgIGlmIChvblVwZGF0ZSkge1xuICAgICAgICAgICAgICAgIG9uVXBkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBbXG4gICAgICAgIGNvbGxlY3RlZCxcbiAgICAgICAgbW9uaXRvcixcbiAgICAgICAgb25VcGRhdGVcbiAgICBdKTtcbiAgICAvLyB1cGRhdGUgdGhlIGNvbGxlY3RlZCBwcm9wZXJ0aWVzIGFmdGVyIHJlYWN0IHJlbmRlcnMuXG4gICAgLy8gTm90ZSB0aGF0IHRoZSBcIkR1c3RiaW4gU3RyZXNzIFRlc3RcIiBmYWlscyBpZiB0aGlzIGlzIG5vdFxuICAgIC8vIGRvbmUgd2hlbiB0aGUgY29tcG9uZW50IHVwZGF0ZXNcbiAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KHVwZGF0ZUNvbGxlY3RlZCk7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgY29sbGVjdGVkLFxuICAgICAgICB1cGRhdGVDb2xsZWN0ZWRcbiAgICBdO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VDb2xsZWN0b3IuanMubWFwIiwiaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBmdW5jdGlvbiB1c2VPcHRpb25hbEZhY3RvcnkoYXJnLCBkZXBzKSB7XG4gICAgY29uc3QgbWVtb0RlcHMgPSBbXG4gICAgICAgIC4uLmRlcHMgfHwgW11cbiAgICBdO1xuICAgIGlmIChkZXBzID09IG51bGwgJiYgdHlwZW9mIGFyZyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBtZW1vRGVwcy5wdXNoKGFyZyk7XG4gICAgfVxuICAgIHJldHVybiB1c2VNZW1vKCgpPT57XG4gICAgICAgIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nID8gYXJnKCkgOiBhcmc7XG4gICAgfSwgbWVtb0RlcHMpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VPcHRpb25hbEZhY3RvcnkuanMubWFwIiwiaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBmdW5jdGlvbiB1c2VDb25uZWN0RHJvcFRhcmdldChjb25uZWN0b3IpIHtcbiAgICByZXR1cm4gdXNlTWVtbygoKT0+Y29ubmVjdG9yLmhvb2tzLmRyb3BUYXJnZXQoKVxuICAgICwgW1xuICAgICAgICBjb25uZWN0b3JcbiAgICBdKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29ubmVjdG9ycy5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIsIGNvbXBhcmUsIGNvbXBhcmVDb250ZXh0KSB7XG4gICAgbGV0IGNvbXBhcmVSZXN1bHQgPSBjb21wYXJlID8gY29tcGFyZS5jYWxsKGNvbXBhcmVDb250ZXh0LCBvYmpBLCBvYmpCKSA6IHZvaWQgMDtcbiAgICBpZiAoY29tcGFyZVJlc3VsdCAhPT0gdm9pZCAwKSB7XG4gICAgICAgIHJldHVybiAhIWNvbXBhcmVSZXN1bHQ7XG4gICAgfVxuICAgIGlmIChvYmpBID09PSBvYmpCKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8ICFvYmpBIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCAhb2JqQikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gICAgY29uc3Qga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcbiAgICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBiSGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmJpbmQob2JqQik7XG4gICAgLy8gVGVzdCBmb3IgQSdzIGtleXMgZGlmZmVyZW50IGZyb20gQi5cbiAgICBmb3IobGV0IGlkeCA9IDA7IGlkeCA8IGtleXNBLmxlbmd0aDsgaWR4Kyspe1xuICAgICAgICBjb25zdCBrZXkgPSBrZXlzQVtpZHhdO1xuICAgICAgICBpZiAoIWJIYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWVBID0gb2JqQVtrZXldO1xuICAgICAgICBjb25zdCB2YWx1ZUIgPSBvYmpCW2tleV07XG4gICAgICAgIGNvbXBhcmVSZXN1bHQgPSBjb21wYXJlID8gY29tcGFyZS5jYWxsKGNvbXBhcmVDb250ZXh0LCB2YWx1ZUEsIHZhbHVlQiwga2V5KSA6IHZvaWQgMDtcbiAgICAgICAgaWYgKGNvbXBhcmVSZXN1bHQgPT09IGZhbHNlIHx8IGNvbXBhcmVSZXN1bHQgPT09IHZvaWQgMCAmJiB2YWx1ZUEgIT09IHZhbHVlQikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gaXNSZWYob2JqKSB7XG4gICAgcmV0dXJuKC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgJ2N1cnJlbnQnKSk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzUmVmLmpzLm1hcCIsIi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovIGV4cG9ydCBmdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpIHtcbiAgICBpZiAoaXNQcm9kdWN0aW9uKCkpIHtcbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgICAgbGV0IGVycm9yO1xuICAgICAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGVycm9yID0gbmV3IEVycm9yKCdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICsgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgYXJnSW5kZXggPSAwO1xuICAgICAgICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICAgICAgfVxuICAgICAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDEgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICAgICAgO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG59XG5mdW5jdGlvbiBpc1Byb2R1Y3Rpb24oKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLmVudlsnTk9ERV9FTlYnXSA9PT0gJ3Byb2R1Y3Rpb24nO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJpbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tICdAcmVhY3QtZG5kL2ludmFyaWFudCc7XG5pbXBvcnQgeyBjbG9uZUVsZW1lbnQsIGlzVmFsaWRFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuZnVuY3Rpb24gdGhyb3dJZkNvbXBvc2l0ZUNvbXBvbmVudEVsZW1lbnQoZWxlbWVudCkge1xuICAgIC8vIEN1c3RvbSBjb21wb25lbnRzIGNhbiBubyBsb25nZXIgYmUgd3JhcHBlZCBkaXJlY3RseSBpbiBSZWFjdCBEbkQgMi4wXG4gICAgLy8gc28gdGhhdCB3ZSBkb24ndCBuZWVkIHRvIGRlcGVuZCBvbiBmaW5kRE9NTm9kZSgpIGZyb20gcmVhY3QtZG9tLlxuICAgIGlmICh0eXBlb2YgZWxlbWVudC50eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGRpc3BsYXlOYW1lID0gZWxlbWVudC50eXBlLmRpc3BsYXlOYW1lIHx8IGVsZW1lbnQudHlwZS5uYW1lIHx8ICd0aGUgY29tcG9uZW50JztcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ09ubHkgbmF0aXZlIGVsZW1lbnQgbm9kZXMgY2FuIG5vdyBiZSBwYXNzZWQgdG8gUmVhY3QgRG5EIGNvbm5lY3RvcnMuJyArIGBZb3UgY2FuIGVpdGhlciB3cmFwICR7ZGlzcGxheU5hbWV9IGludG8gYSA8ZGl2Piwgb3IgdHVybiBpdCBpbnRvIGEgYCArICdkcmFnIHNvdXJjZSBvciBhIGRyb3AgdGFyZ2V0IGl0c2VsZi4nKTtcbn1cbmZ1bmN0aW9uIHdyYXBIb29rVG9SZWNvZ25pemVFbGVtZW50KGhvb2spIHtcbiAgICByZXR1cm4gKGVsZW1lbnRPck5vZGUgPSBudWxsLCBvcHRpb25zID0gbnVsbCk9PntcbiAgICAgICAgLy8gV2hlbiBwYXNzZWQgYSBub2RlLCBjYWxsIHRoZSBob29rIHN0cmFpZ2h0IGF3YXkuXG4gICAgICAgIGlmICghaXNWYWxpZEVsZW1lbnQoZWxlbWVudE9yTm9kZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBlbGVtZW50T3JOb2RlO1xuICAgICAgICAgICAgaG9vayhub2RlLCBvcHRpb25zKTtcbiAgICAgICAgICAgIC8vIHJldHVybiB0aGUgbm9kZSBzbyBpdCBjYW4gYmUgY2hhaW5lZCAoZS5nLiB3aGVuIHdpdGhpbiBjYWxsYmFjayByZWZzXG4gICAgICAgICAgICAvLyA8ZGl2IHJlZj17bm9kZSA9PiBjb25uZWN0RHJhZ1NvdXJjZShjb25uZWN0RHJvcFRhcmdldChub2RlKSl9Lz5cbiAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHBhc3NlZCBhIFJlYWN0RWxlbWVudCwgY2xvbmUgaXQgYW5kIGF0dGFjaCB0aGlzIGZ1bmN0aW9uIGFzIGEgcmVmLlxuICAgICAgICAvLyBUaGlzIGhlbHBzIHVzIGFjaGlldmUgYSBuZWF0IEFQSSB3aGVyZSB1c2VyIGRvZXNuJ3QgZXZlbiBrbm93IHRoYXQgcmVmc1xuICAgICAgICAvLyBhcmUgYmVpbmcgdXNlZCB1bmRlciB0aGUgaG9vZC5cbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGVsZW1lbnRPck5vZGU7XG4gICAgICAgIHRocm93SWZDb21wb3NpdGVDb21wb25lbnRFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICAvLyBXaGVuIG5vIG9wdGlvbnMgYXJlIHBhc3NlZCwgdXNlIHRoZSBob29rIGRpcmVjdGx5XG4gICAgICAgIGNvbnN0IHJlZiA9IG9wdGlvbnMgPyAobm9kZSk9Pmhvb2sobm9kZSwgb3B0aW9ucylcbiAgICAgICAgIDogaG9vaztcbiAgICAgICAgcmV0dXJuIGNsb25lV2l0aFJlZihlbGVtZW50LCByZWYpO1xuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gd3JhcENvbm5lY3Rvckhvb2tzKGhvb2tzKSB7XG4gICAgY29uc3Qgd3JhcHBlZEhvb2tzID0ge307XG4gICAgT2JqZWN0LmtleXMoaG9va3MpLmZvckVhY2goKGtleSk9PntcbiAgICAgICAgY29uc3QgaG9vayA9IGhvb2tzW2tleV07XG4gICAgICAgIC8vIHJlZiBvYmplY3RzIHNob3VsZCBiZSBwYXNzZWQgc3RyYWlnaHQgdGhyb3VnaCB3aXRob3V0IHdyYXBwaW5nXG4gICAgICAgIGlmIChrZXkuZW5kc1dpdGgoJ1JlZicpKSB7XG4gICAgICAgICAgICB3cmFwcGVkSG9va3Nba2V5XSA9IGhvb2tzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB3cmFwcGVkSG9vayA9IHdyYXBIb29rVG9SZWNvZ25pemVFbGVtZW50KGhvb2spO1xuICAgICAgICAgICAgd3JhcHBlZEhvb2tzW2tleV0gPSAoKT0+d3JhcHBlZEhvb2tcbiAgICAgICAgICAgIDtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB3cmFwcGVkSG9va3M7XG59XG5mdW5jdGlvbiBzZXRSZWYocmVmLCBub2RlKSB7XG4gICAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmVmKG5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJlZi5jdXJyZW50ID0gbm9kZTtcbiAgICB9XG59XG5mdW5jdGlvbiBjbG9uZVdpdGhSZWYoZWxlbWVudCwgbmV3UmVmKSB7XG4gICAgY29uc3QgcHJldmlvdXNSZWYgPSBlbGVtZW50LnJlZjtcbiAgICBpbnZhcmlhbnQodHlwZW9mIHByZXZpb3VzUmVmICE9PSAnc3RyaW5nJywgJ0Nhbm5vdCBjb25uZWN0IFJlYWN0IERuRCB0byBhbiBlbGVtZW50IHdpdGggYW4gZXhpc3Rpbmcgc3RyaW5nIHJlZi4gJyArICdQbGVhc2UgY29udmVydCBpdCB0byB1c2UgYSBjYWxsYmFjayByZWYgaW5zdGVhZCwgb3Igd3JhcCBpdCBpbnRvIGEgPHNwYW4+IG9yIDxkaXY+LiAnICsgJ1JlYWQgbW9yZTogaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlZnMtYW5kLXRoZS1kb20uaHRtbCNjYWxsYmFjay1yZWZzJyk7XG4gICAgaWYgKCFwcmV2aW91c1JlZikge1xuICAgICAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHJlZiBvbiB0aGUgZWxlbWVudCwgdXNlIHRoZSBuZXcgcmVmIGRpcmVjdGx5XG4gICAgICAgIHJldHVybiBjbG9uZUVsZW1lbnQoZWxlbWVudCwge1xuICAgICAgICAgICAgcmVmOiBuZXdSZWZcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNsb25lRWxlbWVudChlbGVtZW50LCB7XG4gICAgICAgICAgICByZWY6IChub2RlKT0+e1xuICAgICAgICAgICAgICAgIHNldFJlZihwcmV2aW91c1JlZiwgbm9kZSk7XG4gICAgICAgICAgICAgICAgc2V0UmVmKG5ld1JlZiwgbm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcENvbm5lY3Rvckhvb2tzLmpzLm1hcCIsImltcG9ydCB7IHNoYWxsb3dFcXVhbCB9IGZyb20gJ0ByZWFjdC1kbmQvc2hhbGxvd2VxdWFsJztcbmltcG9ydCB7IGlzUmVmIH0gZnJvbSAnLi9pc1JlZi5qcyc7XG5pbXBvcnQgeyB3cmFwQ29ubmVjdG9ySG9va3MgfSBmcm9tICcuL3dyYXBDb25uZWN0b3JIb29rcy5qcyc7XG5leHBvcnQgY2xhc3MgVGFyZ2V0Q29ubmVjdG9yIHtcbiAgICBnZXQgY29ubmVjdFRhcmdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZHJvcFRhcmdldDtcbiAgICB9XG4gICAgcmVjb25uZWN0KCkge1xuICAgICAgICAvLyBpZiBub3RoaW5nIGhhcyBjaGFuZ2VkIHRoZW4gZG9uJ3QgcmVzdWJzY3JpYmVcbiAgICAgICAgY29uc3QgZGlkQ2hhbmdlID0gdGhpcy5kaWRIYW5kbGVySWRDaGFuZ2UoKSB8fCB0aGlzLmRpZERyb3BUYXJnZXRDaGFuZ2UoKSB8fCB0aGlzLmRpZE9wdGlvbnNDaGFuZ2UoKTtcbiAgICAgICAgaWYgKGRpZENoYW5nZSkge1xuICAgICAgICAgICAgdGhpcy5kaXNjb25uZWN0RHJvcFRhcmdldCgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRyb3BUYXJnZXQgPSB0aGlzLmRyb3BUYXJnZXQ7XG4gICAgICAgIGlmICghdGhpcy5oYW5kbGVySWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRyb3BUYXJnZXQpIHtcbiAgICAgICAgICAgIHRoaXMubGFzdENvbm5lY3RlZERyb3BUYXJnZXQgPSBkcm9wVGFyZ2V0O1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaWRDaGFuZ2UpIHtcbiAgICAgICAgICAgIHRoaXMubGFzdENvbm5lY3RlZEhhbmRsZXJJZCA9IHRoaXMuaGFuZGxlcklkO1xuICAgICAgICAgICAgdGhpcy5sYXN0Q29ubmVjdGVkRHJvcFRhcmdldCA9IGRyb3BUYXJnZXQ7XG4gICAgICAgICAgICB0aGlzLmxhc3RDb25uZWN0ZWREcm9wVGFyZ2V0T3B0aW9ucyA9IHRoaXMuZHJvcFRhcmdldE9wdGlvbnM7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlRHJvcFRhcmdldCA9IHRoaXMuYmFja2VuZC5jb25uZWN0RHJvcFRhcmdldCh0aGlzLmhhbmRsZXJJZCwgZHJvcFRhcmdldCwgdGhpcy5kcm9wVGFyZ2V0T3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVjZWl2ZUhhbmRsZXJJZChuZXdIYW5kbGVySWQpIHtcbiAgICAgICAgaWYgKG5ld0hhbmRsZXJJZCA9PT0gdGhpcy5oYW5kbGVySWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhhbmRsZXJJZCA9IG5ld0hhbmRsZXJJZDtcbiAgICAgICAgdGhpcy5yZWNvbm5lY3QoKTtcbiAgICB9XG4gICAgZ2V0IGRyb3BUYXJnZXRPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kcm9wVGFyZ2V0T3B0aW9uc0ludGVybmFsO1xuICAgIH1cbiAgICBzZXQgZHJvcFRhcmdldE9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICB0aGlzLmRyb3BUYXJnZXRPcHRpb25zSW50ZXJuYWwgPSBvcHRpb25zO1xuICAgIH1cbiAgICBkaWRIYW5kbGVySWRDaGFuZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxhc3RDb25uZWN0ZWRIYW5kbGVySWQgIT09IHRoaXMuaGFuZGxlcklkO1xuICAgIH1cbiAgICBkaWREcm9wVGFyZ2V0Q2hhbmdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sYXN0Q29ubmVjdGVkRHJvcFRhcmdldCAhPT0gdGhpcy5kcm9wVGFyZ2V0O1xuICAgIH1cbiAgICBkaWRPcHRpb25zQ2hhbmdlKCkge1xuICAgICAgICByZXR1cm4gIXNoYWxsb3dFcXVhbCh0aGlzLmxhc3RDb25uZWN0ZWREcm9wVGFyZ2V0T3B0aW9ucywgdGhpcy5kcm9wVGFyZ2V0T3B0aW9ucyk7XG4gICAgfVxuICAgIGRpc2Nvbm5lY3REcm9wVGFyZ2V0KCkge1xuICAgICAgICBpZiAodGhpcy51bnN1YnNjcmliZURyb3BUYXJnZXQpIHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmVEcm9wVGFyZ2V0KCk7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlRHJvcFRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgZHJvcFRhcmdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZHJvcFRhcmdldE5vZGUgfHwgdGhpcy5kcm9wVGFyZ2V0UmVmICYmIHRoaXMuZHJvcFRhcmdldFJlZi5jdXJyZW50O1xuICAgIH1cbiAgICBjbGVhckRyb3BUYXJnZXQoKSB7XG4gICAgICAgIHRoaXMuZHJvcFRhcmdldFJlZiA9IG51bGw7XG4gICAgICAgIHRoaXMuZHJvcFRhcmdldE5vZGUgPSBudWxsO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihiYWNrZW5kKXtcbiAgICAgICAgdGhpcy5ob29rcyA9IHdyYXBDb25uZWN0b3JIb29rcyh7XG4gICAgICAgICAgICBkcm9wVGFyZ2V0OiAobm9kZSwgb3B0aW9ucyk9PntcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyRHJvcFRhcmdldCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuZHJvcFRhcmdldE9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICAgICAgICAgIGlmIChpc1JlZihub2RlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyb3BUYXJnZXRSZWYgPSBub2RlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJvcFRhcmdldE5vZGUgPSBub2RlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnJlY29ubmVjdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5oYW5kbGVySWQgPSBudWxsO1xuICAgICAgICAvLyBUaGUgZHJvcCB0YXJnZXQgbWF5IGVpdGhlciBiZSBhdHRhY2hlZCB2aWEgcmVmIG9yIGNvbm5lY3QgZnVuY3Rpb25cbiAgICAgICAgdGhpcy5kcm9wVGFyZ2V0UmVmID0gbnVsbDtcbiAgICAgICAgdGhpcy5kcm9wVGFyZ2V0T3B0aW9uc0ludGVybmFsID0gbnVsbDtcbiAgICAgICAgdGhpcy5sYXN0Q29ubmVjdGVkSGFuZGxlcklkID0gbnVsbDtcbiAgICAgICAgdGhpcy5sYXN0Q29ubmVjdGVkRHJvcFRhcmdldCA9IG51bGw7XG4gICAgICAgIHRoaXMubGFzdENvbm5lY3RlZERyb3BUYXJnZXRPcHRpb25zID0gbnVsbDtcbiAgICAgICAgdGhpcy5iYWNrZW5kID0gYmFja2VuZDtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRhcmdldENvbm5lY3Rvci5qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBDcmVhdGUgdGhlIFJlYWN0IENvbnRleHRcbiAqLyBleHBvcnQgY29uc3QgRG5kQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoe1xuICAgIGRyYWdEcm9wTWFuYWdlcjogdW5kZWZpbmVkXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RG5kQ29udGV4dC5qcy5tYXAiLCJpbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tICdAcmVhY3QtZG5kL2ludmFyaWFudCc7XG5pbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRG5kQ29udGV4dCB9IGZyb20gJy4uL2NvcmUvaW5kZXguanMnO1xuLyoqXG4gKiBBIGhvb2sgdG8gcmV0cmlldmUgdGhlIERyYWdEcm9wTWFuYWdlciBmcm9tIENvbnRleHRcbiAqLyBleHBvcnQgZnVuY3Rpb24gdXNlRHJhZ0Ryb3BNYW5hZ2VyKCkge1xuICAgIGNvbnN0IHsgZHJhZ0Ryb3BNYW5hZ2VyICB9ID0gdXNlQ29udGV4dChEbmRDb250ZXh0KTtcbiAgICBpbnZhcmlhbnQoZHJhZ0Ryb3BNYW5hZ2VyICE9IG51bGwsICdFeHBlY3RlZCBkcmFnIGRyb3AgY29udGV4dCcpO1xuICAgIHJldHVybiBkcmFnRHJvcE1hbmFnZXI7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZURyYWdEcm9wTWFuYWdlci5qcy5tYXAiLCJpbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tICdAcmVhY3QtZG5kL2ludmFyaWFudCc7XG5sZXQgaXNDYWxsaW5nQ2FuRHJvcCA9IGZhbHNlO1xuZXhwb3J0IGNsYXNzIERyb3BUYXJnZXRNb25pdG9ySW1wbCB7XG4gICAgcmVjZWl2ZUhhbmRsZXJJZCh0YXJnZXRJZCkge1xuICAgICAgICB0aGlzLnRhcmdldElkID0gdGFyZ2V0SWQ7XG4gICAgfVxuICAgIGdldEhhbmRsZXJJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0SWQ7XG4gICAgfVxuICAgIHN1YnNjcmliZVRvU3RhdGVDaGFuZ2UobGlzdGVuZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxNb25pdG9yLnN1YnNjcmliZVRvU3RhdGVDaGFuZ2UobGlzdGVuZXIsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBjYW5Ecm9wKCkge1xuICAgICAgICAvLyBDdXQgb3V0IGVhcmx5IGlmIHRoZSB0YXJnZXQgaWQgaGFzIG5vdCBiZWVuIHNldC4gVGhpcyBzaG91bGQgcHJldmVudCBlcnJvcnNcbiAgICAgICAgLy8gd2hlcmUgdGhlIHVzZXIgaGFzIGFuIG9sZGVyIHZlcnNpb24gb2YgZG5kLWNvcmUgbGlrZSBpblxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtZG5kL3JlYWN0LWRuZC9pc3N1ZXMvMTMxMFxuICAgICAgICBpZiAoIXRoaXMudGFyZ2V0SWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpbnZhcmlhbnQoIWlzQ2FsbGluZ0NhbkRyb3AsICdZb3UgbWF5IG5vdCBjYWxsIG1vbml0b3IuY2FuRHJvcCgpIGluc2lkZSB5b3VyIGNhbkRyb3AoKSBpbXBsZW1lbnRhdGlvbi4gJyArICdSZWFkIG1vcmU6IGh0dHA6Ly9yZWFjdC1kbmQuZ2l0aHViLmlvL3JlYWN0LWRuZC9kb2NzL2FwaS9kcm9wLXRhcmdldC1tb25pdG9yJyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpc0NhbGxpbmdDYW5Ecm9wID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmludGVybmFsTW9uaXRvci5jYW5Ecm9wT25UYXJnZXQodGhpcy50YXJnZXRJZCk7XG4gICAgICAgIH0gZmluYWxseXtcbiAgICAgICAgICAgIGlzQ2FsbGluZ0NhbkRyb3AgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpc092ZXIob3B0aW9ucykge1xuICAgICAgICBpZiAoIXRoaXMudGFyZ2V0SWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbE1vbml0b3IuaXNPdmVyVGFyZ2V0KHRoaXMudGFyZ2V0SWQsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBnZXRJdGVtVHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxNb25pdG9yLmdldEl0ZW1UeXBlKCk7XG4gICAgfVxuICAgIGdldEl0ZW0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsTW9uaXRvci5nZXRJdGVtKCk7XG4gICAgfVxuICAgIGdldERyb3BSZXN1bHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsTW9uaXRvci5nZXREcm9wUmVzdWx0KCk7XG4gICAgfVxuICAgIGRpZERyb3AoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsTW9uaXRvci5kaWREcm9wKCk7XG4gICAgfVxuICAgIGdldEluaXRpYWxDbGllbnRPZmZzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsTW9uaXRvci5nZXRJbml0aWFsQ2xpZW50T2Zmc2V0KCk7XG4gICAgfVxuICAgIGdldEluaXRpYWxTb3VyY2VDbGllbnRPZmZzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsTW9uaXRvci5nZXRJbml0aWFsU291cmNlQ2xpZW50T2Zmc2V0KCk7XG4gICAgfVxuICAgIGdldFNvdXJjZUNsaWVudE9mZnNldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxNb25pdG9yLmdldFNvdXJjZUNsaWVudE9mZnNldCgpO1xuICAgIH1cbiAgICBnZXRDbGllbnRPZmZzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsTW9uaXRvci5nZXRDbGllbnRPZmZzZXQoKTtcbiAgICB9XG4gICAgZ2V0RGlmZmVyZW5jZUZyb21Jbml0aWFsT2Zmc2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbE1vbml0b3IuZ2V0RGlmZmVyZW5jZUZyb21Jbml0aWFsT2Zmc2V0KCk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKG1hbmFnZXIpe1xuICAgICAgICB0aGlzLnRhcmdldElkID0gbnVsbDtcbiAgICAgICAgdGhpcy5pbnRlcm5hbE1vbml0b3IgPSBtYW5hZ2VyLmdldE1vbml0b3IoKTtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURyb3BUYXJnZXRNb25pdG9ySW1wbC5qcy5tYXAiLCJleHBvcnQgY2xhc3MgRHJvcFRhcmdldEltcGwge1xuICAgIGNhbkRyb3AoKSB7XG4gICAgICAgIGNvbnN0IHNwZWMgPSB0aGlzLnNwZWM7XG4gICAgICAgIGNvbnN0IG1vbml0b3IgPSB0aGlzLm1vbml0b3I7XG4gICAgICAgIHJldHVybiBzcGVjLmNhbkRyb3AgPyBzcGVjLmNhbkRyb3AobW9uaXRvci5nZXRJdGVtKCksIG1vbml0b3IpIDogdHJ1ZTtcbiAgICB9XG4gICAgaG92ZXIoKSB7XG4gICAgICAgIGNvbnN0IHNwZWMgPSB0aGlzLnNwZWM7XG4gICAgICAgIGNvbnN0IG1vbml0b3IgPSB0aGlzLm1vbml0b3I7XG4gICAgICAgIGlmIChzcGVjLmhvdmVyKSB7XG4gICAgICAgICAgICBzcGVjLmhvdmVyKG1vbml0b3IuZ2V0SXRlbSgpLCBtb25pdG9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkcm9wKCkge1xuICAgICAgICBjb25zdCBzcGVjID0gdGhpcy5zcGVjO1xuICAgICAgICBjb25zdCBtb25pdG9yID0gdGhpcy5tb25pdG9yO1xuICAgICAgICBpZiAoc3BlYy5kcm9wKSB7XG4gICAgICAgICAgICByZXR1cm4gc3BlYy5kcm9wKG1vbml0b3IuZ2V0SXRlbSgpLCBtb25pdG9yKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHNwZWMsIG1vbml0b3Ipe1xuICAgICAgICB0aGlzLnNwZWMgPSBzcGVjO1xuICAgICAgICB0aGlzLm1vbml0b3IgPSBtb25pdG9yO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RHJvcFRhcmdldEltcGwuanMubWFwIiwiaW1wb3J0IHsgdXNlQ29sbGVjdGVkUHJvcHMgfSBmcm9tICcuLi91c2VDb2xsZWN0ZWRQcm9wcy5qcyc7XG5pbXBvcnQgeyB1c2VPcHRpb25hbEZhY3RvcnkgfSBmcm9tICcuLi91c2VPcHRpb25hbEZhY3RvcnkuanMnO1xuaW1wb3J0IHsgdXNlQ29ubmVjdERyb3BUYXJnZXQgfSBmcm9tICcuL2Nvbm5lY3RvcnMuanMnO1xuaW1wb3J0IHsgdXNlRHJvcFRhcmdldENvbm5lY3RvciB9IGZyb20gJy4vdXNlRHJvcFRhcmdldENvbm5lY3Rvci5qcyc7XG5pbXBvcnQgeyB1c2VEcm9wVGFyZ2V0TW9uaXRvciB9IGZyb20gJy4vdXNlRHJvcFRhcmdldE1vbml0b3IuanMnO1xuaW1wb3J0IHsgdXNlUmVnaXN0ZXJlZERyb3BUYXJnZXQgfSBmcm9tICcuL3VzZVJlZ2lzdGVyZWREcm9wVGFyZ2V0LmpzJztcbi8qKlxuICogdXNlRHJvcFRhcmdldCBIb29rXG4gKiBAcGFyYW0gc3BlYyBUaGUgZHJvcCB0YXJnZXQgc3BlY2lmaWNhdGlvbiAob2JqZWN0IG9yIGZ1bmN0aW9uLCBmdW5jdGlvbiBwcmVmZXJyZWQpXG4gKiBAcGFyYW0gZGVwcyBUaGUgbWVtb2l6YXRpb24gZGVwcyBhcnJheSB0byB1c2Ugd2hlbiBldmFsdWF0aW5nIHNwZWMgY2hhbmdlc1xuICovIGV4cG9ydCBmdW5jdGlvbiB1c2VEcm9wKHNwZWNBcmcsIGRlcHMpIHtcbiAgICBjb25zdCBzcGVjID0gdXNlT3B0aW9uYWxGYWN0b3J5KHNwZWNBcmcsIGRlcHMpO1xuICAgIGNvbnN0IG1vbml0b3IgPSB1c2VEcm9wVGFyZ2V0TW9uaXRvcigpO1xuICAgIGNvbnN0IGNvbm5lY3RvciA9IHVzZURyb3BUYXJnZXRDb25uZWN0b3Ioc3BlYy5vcHRpb25zKTtcbiAgICB1c2VSZWdpc3RlcmVkRHJvcFRhcmdldChzcGVjLCBtb25pdG9yLCBjb25uZWN0b3IpO1xuICAgIHJldHVybiBbXG4gICAgICAgIHVzZUNvbGxlY3RlZFByb3BzKHNwZWMuY29sbGVjdCwgbW9uaXRvciwgY29ubmVjdG9yKSxcbiAgICAgICAgdXNlQ29ubmVjdERyb3BUYXJnZXQoY29ubmVjdG9yKSwgXG4gICAgXTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlRHJvcC5qcy5tYXAiLCJpbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRHJvcFRhcmdldE1vbml0b3JJbXBsIH0gZnJvbSAnLi4vLi4vaW50ZXJuYWxzL2luZGV4LmpzJztcbmltcG9ydCB7IHVzZURyYWdEcm9wTWFuYWdlciB9IGZyb20gJy4uL3VzZURyYWdEcm9wTWFuYWdlci5qcyc7XG5leHBvcnQgZnVuY3Rpb24gdXNlRHJvcFRhcmdldE1vbml0b3IoKSB7XG4gICAgY29uc3QgbWFuYWdlciA9IHVzZURyYWdEcm9wTWFuYWdlcigpO1xuICAgIHJldHVybiB1c2VNZW1vKCgpPT5uZXcgRHJvcFRhcmdldE1vbml0b3JJbXBsKG1hbmFnZXIpXG4gICAgLCBbXG4gICAgICAgIG1hbmFnZXJcbiAgICBdKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlRHJvcFRhcmdldE1vbml0b3IuanMubWFwIiwiaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFRhcmdldENvbm5lY3RvciB9IGZyb20gJy4uLy4uL2ludGVybmFscy9pbmRleC5qcyc7XG5pbXBvcnQgeyB1c2VEcmFnRHJvcE1hbmFnZXIgfSBmcm9tICcuLi91c2VEcmFnRHJvcE1hbmFnZXIuanMnO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZURyb3BUYXJnZXRDb25uZWN0b3Iob3B0aW9ucykge1xuICAgIGNvbnN0IG1hbmFnZXIgPSB1c2VEcmFnRHJvcE1hbmFnZXIoKTtcbiAgICBjb25zdCBjb25uZWN0b3IgPSB1c2VNZW1vKCgpPT5uZXcgVGFyZ2V0Q29ubmVjdG9yKG1hbmFnZXIuZ2V0QmFja2VuZCgpKVxuICAgICwgW1xuICAgICAgICBtYW5hZ2VyXG4gICAgXSk7XG4gICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKT0+e1xuICAgICAgICBjb25uZWN0b3IuZHJvcFRhcmdldE9wdGlvbnMgPSBvcHRpb25zIHx8IG51bGw7XG4gICAgICAgIGNvbm5lY3Rvci5yZWNvbm5lY3QoKTtcbiAgICAgICAgcmV0dXJuICgpPT5jb25uZWN0b3IuZGlzY29ubmVjdERyb3BUYXJnZXQoKVxuICAgICAgICA7XG4gICAgfSwgW1xuICAgICAgICBvcHRpb25zXG4gICAgXSk7XG4gICAgcmV0dXJuIGNvbm5lY3Rvcjtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlRHJvcFRhcmdldENvbm5lY3Rvci5qcy5tYXAiLCJpbXBvcnQgeyByZWdpc3RlclRhcmdldCB9IGZyb20gJy4uLy4uL2ludGVybmFscy9pbmRleC5qcyc7XG5pbXBvcnQgeyB1c2VEcmFnRHJvcE1hbmFnZXIgfSBmcm9tICcuLi91c2VEcmFnRHJvcE1hbmFnZXIuanMnO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QuanMnO1xuaW1wb3J0IHsgdXNlQWNjZXB0IH0gZnJvbSAnLi91c2VBY2NlcHQuanMnO1xuaW1wb3J0IHsgdXNlRHJvcFRhcmdldCB9IGZyb20gJy4vdXNlRHJvcFRhcmdldC5qcyc7XG5leHBvcnQgZnVuY3Rpb24gdXNlUmVnaXN0ZXJlZERyb3BUYXJnZXQoc3BlYywgbW9uaXRvciwgY29ubmVjdG9yKSB7XG4gICAgY29uc3QgbWFuYWdlciA9IHVzZURyYWdEcm9wTWFuYWdlcigpO1xuICAgIGNvbnN0IGRyb3BUYXJnZXQgPSB1c2VEcm9wVGFyZ2V0KHNwZWMsIG1vbml0b3IpO1xuICAgIGNvbnN0IGFjY2VwdCA9IHVzZUFjY2VwdChzcGVjKTtcbiAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uIHJlZ2lzdGVyRHJvcFRhcmdldCgpIHtcbiAgICAgICAgY29uc3QgW2hhbmRsZXJJZCwgdW5yZWdpc3Rlcl0gPSByZWdpc3RlclRhcmdldChhY2NlcHQsIGRyb3BUYXJnZXQsIG1hbmFnZXIpO1xuICAgICAgICBtb25pdG9yLnJlY2VpdmVIYW5kbGVySWQoaGFuZGxlcklkKTtcbiAgICAgICAgY29ubmVjdG9yLnJlY2VpdmVIYW5kbGVySWQoaGFuZGxlcklkKTtcbiAgICAgICAgcmV0dXJuIHVucmVnaXN0ZXI7XG4gICAgfSwgW1xuICAgICAgICBtYW5hZ2VyLFxuICAgICAgICBtb25pdG9yLFxuICAgICAgICBkcm9wVGFyZ2V0LFxuICAgICAgICBjb25uZWN0b3IsXG4gICAgICAgIGFjY2VwdC5tYXAoKGEpPT5hLnRvU3RyaW5nKClcbiAgICAgICAgKS5qb2luKCd8JyksIFxuICAgIF0pO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VSZWdpc3RlcmVkRHJvcFRhcmdldC5qcy5tYXAiLCJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBEcm9wVGFyZ2V0SW1wbCB9IGZyb20gJy4vRHJvcFRhcmdldEltcGwuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZURyb3BUYXJnZXQoc3BlYywgbW9uaXRvcikge1xuICAgIGNvbnN0IGRyb3BUYXJnZXQgPSB1c2VNZW1vKCgpPT5uZXcgRHJvcFRhcmdldEltcGwoc3BlYywgbW9uaXRvcilcbiAgICAsIFtcbiAgICAgICAgbW9uaXRvclxuICAgIF0pO1xuICAgIHVzZUVmZmVjdCgoKT0+e1xuICAgICAgICBkcm9wVGFyZ2V0LnNwZWMgPSBzcGVjO1xuICAgIH0sIFtcbiAgICAgICAgc3BlY1xuICAgIF0pO1xuICAgIHJldHVybiBkcm9wVGFyZ2V0O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VEcm9wVGFyZ2V0LmpzLm1hcCIsImltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJ0ByZWFjdC1kbmQvaW52YXJpYW50JztcbmltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEludGVybmFsIHV0aWxpdHkgaG9vayB0byBnZXQgYW4gYXJyYXktdmVyc2lvbiBvZiBzcGVjLmFjY2VwdC5cbiAqIFRoZSBtYWluIHV0aWxpdHkgaGVyZSBpcyB0aGF0IHdlIGFyZW4ndCBjcmVhdGluZyBhIG5ldyBhcnJheSBvbiBldmVyeSByZW5kZXIgaWYgYSBub24tYXJyYXkgc3BlYy5hY2NlcHQgaXMgcGFzc2VkIGluLlxuICogQHBhcmFtIHNwZWNcbiAqLyBleHBvcnQgZnVuY3Rpb24gdXNlQWNjZXB0KHNwZWMpIHtcbiAgICBjb25zdCB7IGFjY2VwdCAgfSA9IHNwZWM7XG4gICAgcmV0dXJuIHVzZU1lbW8oKCk9PntcbiAgICAgICAgaW52YXJpYW50KHNwZWMuYWNjZXB0ICE9IG51bGwsICdhY2NlcHQgbXVzdCBiZSBkZWZpbmVkJyk7XG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KGFjY2VwdCkgPyBhY2NlcHQgOiBbXG4gICAgICAgICAgICBhY2NlcHRcbiAgICAgICAgXTtcbiAgICB9LCBbXG4gICAgICAgIGFjY2VwdFxuICAgIF0pO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VBY2NlcHQuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyVGFyZ2V0KHR5cGUsIHRhcmdldCwgbWFuYWdlcikge1xuICAgIGNvbnN0IHJlZ2lzdHJ5ID0gbWFuYWdlci5nZXRSZWdpc3RyeSgpO1xuICAgIGNvbnN0IHRhcmdldElkID0gcmVnaXN0cnkuYWRkVGFyZ2V0KHR5cGUsIHRhcmdldCk7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgdGFyZ2V0SWQsXG4gICAgICAgICgpPT5yZWdpc3RyeS5yZW1vdmVUYXJnZXQodGFyZ2V0SWQpXG4gICAgXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlclNvdXJjZSh0eXBlLCBzb3VyY2UsIG1hbmFnZXIpIHtcbiAgICBjb25zdCByZWdpc3RyeSA9IG1hbmFnZXIuZ2V0UmVnaXN0cnkoKTtcbiAgICBjb25zdCBzb3VyY2VJZCA9IHJlZ2lzdHJ5LmFkZFNvdXJjZSh0eXBlLCBzb3VyY2UpO1xuICAgIHJldHVybiBbXG4gICAgICAgIHNvdXJjZUlkLFxuICAgICAgICAoKT0+cmVnaXN0cnkucmVtb3ZlU291cmNlKHNvdXJjZUlkKVxuICAgIF07XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZ2lzdHJhdGlvbi5qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0LCB1c2VSZWR1Y2VyIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgdHlwZSB7IERheSwgSVdlZWtEYXkgfSBmcm9tIFwiLi9kYXRhXCI7XG5pbXBvcnQgeyBMT0FEX0RBVEEsIE1PVkVfRVhFUkNJU0UsIE1PVkVfV09SS09VVCB9IGZyb20gXCIuL2FjdGlvblR5cGVzXCI7XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIHdlZWtEYXRhOiBJV2Vla0RheVtdO1xufVxuXG5leHBvcnQgdHlwZSBBY3Rpb24gPVxuICB8IHsgdHlwZTogXCJMT0FEX0RBVEFcIjsgcGF5bG9hZDogSVdlZWtEYXlbXSB9XG4gIHwge1xuICAgICAgdHlwZTogXCJNT1ZFX1dPUktPVVRcIjtcbiAgICAgIHBheWxvYWQ6IHsgZnJvbURheTogRGF5OyB0b0RheTogRGF5OyB3b3Jrb3V0SWQ6IG51bWJlciB9O1xuICAgIH1cbiAgfCB7XG4gICAgICB0eXBlOiBcIk1PVkVfRVhFUkNJU0VcIjtcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgZnJvbVdvcmtvdXRJZDogbnVtYmVyO1xuICAgICAgICB0b1dvcmtvdXRJZDogbnVtYmVyO1xuICAgICAgICBleGVyY2lzZUlkOiBudW1iZXI7XG4gICAgICB9O1xuICAgIH07XG5cbmNvbnN0IGluaXRpYWxTdGF0ZTogU3RhdGUgPSB7XG4gIHdlZWtEYXRhOiBbXSxcbn07XG5cbmNvbnN0IERhdGFSZWR1Y2VyID0gKHN0YXRlOiBTdGF0ZSwgYWN0aW9uOiBBY3Rpb24pOiBTdGF0ZSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIExPQURfREFUQTpcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCB3ZWVrRGF0YTogYWN0aW9uLnBheWxvYWQgfTtcblxuICAgIGNhc2UgTU9WRV9XT1JLT1VUOiB7XG4gICAgICBjb25zdCB7IGZyb21EYXksIHRvRGF5LCB3b3Jrb3V0SWQgfSA9IGFjdGlvbi5wYXlsb2FkO1xuXG4gICAgICBpZiAoZnJvbURheSA9PT0gdG9EYXkpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBmcm9tRGF5RGF0YSA9IHN0YXRlLndlZWtEYXRhLmZpbmQoKGRheSkgPT4gZGF5LmRheSA9PT0gZnJvbURheSk7XG4gICAgICBjb25zdCB0b0RheURhdGEgPSBzdGF0ZS53ZWVrRGF0YS5maW5kKChkYXkpID0+IGRheS5kYXkgPT09IHRvRGF5KTtcblxuICAgICAgaWYgKGZyb21EYXlEYXRhICYmIHRvRGF5RGF0YSkge1xuICAgICAgICBjb25zdCBmcm9tRGF5V29ya291dHMgPSBmcm9tRGF5RGF0YS53b3Jrb3V0cy5maWx0ZXIoXG4gICAgICAgICAgKHcpID0+IHcuaWQgIT09IHdvcmtvdXRJZCxcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3Qgd29ya291dCA9IGZyb21EYXlEYXRhLndvcmtvdXRzLmZpbmQoKHcpID0+IHcuaWQgPT09IHdvcmtvdXRJZCk7XG5cbiAgICAgICAgaWYgKHdvcmtvdXQpIHtcbiAgICAgICAgICBjb25zdCB0b2RheVdvcmtvdXRzID0gWy4uLnRvRGF5RGF0YS53b3Jrb3V0cywgd29ya291dF07XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICB3ZWVrRGF0YTogc3RhdGUud2Vla0RhdGEubWFwKChkYXkpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGRheS5kYXkgPT09IGZyb21EYXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyAuLi5kYXksIHdvcmtvdXRzOiBmcm9tRGF5V29ya291dHMgfTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChkYXkuZGF5ID09PSB0b0RheSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IC4uLmRheSwgd29ya291dHM6IHRvZGF5V29ya291dHMgfTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBkYXk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICBjYXNlIE1PVkVfRVhFUkNJU0U6IHtcbiAgICAgIGNvbnN0IHsgZnJvbVdvcmtvdXRJZCwgdG9Xb3Jrb3V0SWQsIGV4ZXJjaXNlSWQgfSA9IGFjdGlvbi5wYXlsb2FkO1xuXG4gICAgICBpZiAoZnJvbVdvcmtvdXRJZCA9PT0gdG9Xb3Jrb3V0SWQpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBmcm9tV29ya291dERhdGEgPSBzdGF0ZS53ZWVrRGF0YVxuICAgICAgICAubWFwKChkYXkpID0+IGRheS53b3Jrb3V0cylcbiAgICAgICAgLmZsYXQoKVxuICAgICAgICAuZmluZCgod29ya291dCkgPT4gd29ya291dC5pZCA9PT0gZnJvbVdvcmtvdXRJZCk7XG4gICAgICBjb25zdCB0b1dvcmtvdXREYXRhID0gc3RhdGUud2Vla0RhdGFcbiAgICAgICAgLm1hcCgoZGF5KSA9PiBkYXkud29ya291dHMpXG4gICAgICAgIC5mbGF0KClcbiAgICAgICAgLmZpbmQoKHdvcmtvdXQpID0+IHdvcmtvdXQuaWQgPT09IHRvV29ya291dElkKTtcblxuICAgICAgaWYgKGZyb21Xb3Jrb3V0RGF0YSAmJiB0b1dvcmtvdXREYXRhKSB7XG4gICAgICAgIGNvbnN0IGZyb21Xb3Jrb3V0RXhlcmNpc2VzID0gZnJvbVdvcmtvdXREYXRhLmV4ZXJjaXNlcy5maWx0ZXIoXG4gICAgICAgICAgKGUpID0+IGUuaWQgIT09IGV4ZXJjaXNlSWQsXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGV4ZXJjaXNlID0gZnJvbVdvcmtvdXREYXRhLmV4ZXJjaXNlcy5maW5kKFxuICAgICAgICAgIChlKSA9PiBlLmlkID09PSBleGVyY2lzZUlkLFxuICAgICAgICApO1xuXG4gICAgICAgIGlmIChleGVyY2lzZSkge1xuICAgICAgICAgIGNvbnN0IHRvV29ya291dEV4ZXJjaXNlcyA9IFsuLi50b1dvcmtvdXREYXRhLmV4ZXJjaXNlcywgZXhlcmNpc2VdO1xuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgd2Vla0RhdGE6IHN0YXRlLndlZWtEYXRhLm1hcCgoZGF5KSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uZGF5LFxuICAgICAgICAgICAgICAgIHdvcmtvdXRzOiBkYXkud29ya291dHMubWFwKCh3b3Jrb3V0KSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAod29ya291dC5pZCA9PT0gZnJvbVdvcmtvdXRJZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyAuLi53b3Jrb3V0LCBleGVyY2lzZXM6IGZyb21Xb3Jrb3V0RXhlcmNpc2VzIH07XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGlmICh3b3Jrb3V0LmlkID09PSB0b1dvcmtvdXRJZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyAuLi53b3Jrb3V0LCBleGVyY2lzZXM6IHRvV29ya291dEV4ZXJjaXNlcyB9O1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICByZXR1cm4gd29ya291dDtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn07XG5cbmNvbnN0IERhdGFDb250ZXh0ID0gY3JlYXRlQ29udGV4dDx7XG4gIHN0YXRlOiBTdGF0ZTtcbiAgZGlzcGF0Y2g6IFJlYWN0LkRpc3BhdGNoPEFjdGlvbj47XG59Pih7IHN0YXRlOiBpbml0aWFsU3RhdGUsIGRpc3BhdGNoOiAoKSA9PiBudWxsIH0pO1xuXG5jb25zdCBEYXRhUHJvdmlkZXI6IFJlYWN0LkZDPFBhcmVudFByb3BzPiA9ICh7IGNoaWxkcmVuIH0pID0+IHtcbiAgY29uc3QgW3N0YXRlLCBkaXNwYXRjaF0gPSB1c2VSZWR1Y2VyKERhdGFSZWR1Y2VyLCBpbml0aWFsU3RhdGUpO1xuXG4gIHJldHVybiAoXG4gICAgPERhdGFDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7IHN0YXRlLCBkaXNwYXRjaCB9fT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L0RhdGFDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufTtcblxuZXhwb3J0IHsgRGF0YUNvbnRleHQsIERhdGFQcm92aWRlciB9O1xuIiwiZXhwb3J0IGNvbnN0IExPQURfREFUQSA9IFwiTE9BRF9EQVRBXCI7XG5leHBvcnQgY29uc3QgTU9WRV9XT1JLT1VUID0gXCJNT1ZFX1dPUktPVVRcIjtcbmV4cG9ydCBjb25zdCBNT1ZFX0VYRVJDSVNFID0gXCJNT1ZFX0VYRVJDSVNFXCI7XG4iLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBEYXRhQ29udGV4dCB9IGZyb20gXCIuLi9kYXRhL0RhdGFSZWR1Y2VyXCI7XG5cbmNvbnN0IHVzZURhdGEgPSAoKSA9PiB7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0KERhdGFDb250ZXh0KTtcblxuICBpZiAoY29udGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwidXNlRGF0YSBtdXN0IGJlIHVzZWQgd2l0aGluIGEgRGF0YVByb3ZpZGVyXCIpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2VEYXRhO1xuIiwiaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBmdW5jdGlvbiB1c2VDb25uZWN0RHJhZ1NvdXJjZShjb25uZWN0b3IpIHtcbiAgICByZXR1cm4gdXNlTWVtbygoKT0+Y29ubmVjdG9yLmhvb2tzLmRyYWdTb3VyY2UoKVxuICAgICwgW1xuICAgICAgICBjb25uZWN0b3JcbiAgICBdKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1c2VDb25uZWN0RHJhZ1ByZXZpZXcoY29ubmVjdG9yKSB7XG4gICAgcmV0dXJuIHVzZU1lbW8oKCk9PmNvbm5lY3Rvci5ob29rcy5kcmFnUHJldmlldygpXG4gICAgLCBbXG4gICAgICAgIGNvbm5lY3RvclxuICAgIF0pO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25uZWN0b3JzLmpzLm1hcCIsImltcG9ydCB7IHNoYWxsb3dFcXVhbCB9IGZyb20gJ0ByZWFjdC1kbmQvc2hhbGxvd2VxdWFsJztcbmltcG9ydCB7IGlzUmVmIH0gZnJvbSAnLi9pc1JlZi5qcyc7XG5pbXBvcnQgeyB3cmFwQ29ubmVjdG9ySG9va3MgfSBmcm9tICcuL3dyYXBDb25uZWN0b3JIb29rcy5qcyc7XG5leHBvcnQgY2xhc3MgU291cmNlQ29ubmVjdG9yIHtcbiAgICByZWNlaXZlSGFuZGxlcklkKG5ld0hhbmRsZXJJZCkge1xuICAgICAgICBpZiAodGhpcy5oYW5kbGVySWQgPT09IG5ld0hhbmRsZXJJZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGFuZGxlcklkID0gbmV3SGFuZGxlcklkO1xuICAgICAgICB0aGlzLnJlY29ubmVjdCgpO1xuICAgIH1cbiAgICBnZXQgY29ubmVjdFRhcmdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZHJhZ1NvdXJjZTtcbiAgICB9XG4gICAgZ2V0IGRyYWdTb3VyY2VPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kcmFnU291cmNlT3B0aW9uc0ludGVybmFsO1xuICAgIH1cbiAgICBzZXQgZHJhZ1NvdXJjZU9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICB0aGlzLmRyYWdTb3VyY2VPcHRpb25zSW50ZXJuYWwgPSBvcHRpb25zO1xuICAgIH1cbiAgICBnZXQgZHJhZ1ByZXZpZXdPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kcmFnUHJldmlld09wdGlvbnNJbnRlcm5hbDtcbiAgICB9XG4gICAgc2V0IGRyYWdQcmV2aWV3T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuZHJhZ1ByZXZpZXdPcHRpb25zSW50ZXJuYWwgPSBvcHRpb25zO1xuICAgIH1cbiAgICByZWNvbm5lY3QoKSB7XG4gICAgICAgIGNvbnN0IGRpZENoYW5nZSA9IHRoaXMucmVjb25uZWN0RHJhZ1NvdXJjZSgpO1xuICAgICAgICB0aGlzLnJlY29ubmVjdERyYWdQcmV2aWV3KGRpZENoYW5nZSk7XG4gICAgfVxuICAgIHJlY29ubmVjdERyYWdTb3VyY2UoKSB7XG4gICAgICAgIGNvbnN0IGRyYWdTb3VyY2UgPSB0aGlzLmRyYWdTb3VyY2U7XG4gICAgICAgIC8vIGlmIG5vdGhpbmcgaGFzIGNoYW5nZWQgdGhlbiBkb24ndCByZXN1YnNjcmliZVxuICAgICAgICBjb25zdCBkaWRDaGFuZ2UgPSB0aGlzLmRpZEhhbmRsZXJJZENoYW5nZSgpIHx8IHRoaXMuZGlkQ29ubmVjdGVkRHJhZ1NvdXJjZUNoYW5nZSgpIHx8IHRoaXMuZGlkRHJhZ1NvdXJjZU9wdGlvbnNDaGFuZ2UoKTtcbiAgICAgICAgaWYgKGRpZENoYW5nZSkge1xuICAgICAgICAgICAgdGhpcy5kaXNjb25uZWN0RHJhZ1NvdXJjZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5oYW5kbGVySWQpIHtcbiAgICAgICAgICAgIHJldHVybiBkaWRDaGFuZ2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkcmFnU291cmNlKSB7XG4gICAgICAgICAgICB0aGlzLmxhc3RDb25uZWN0ZWREcmFnU291cmNlID0gZHJhZ1NvdXJjZTtcbiAgICAgICAgICAgIHJldHVybiBkaWRDaGFuZ2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpZENoYW5nZSkge1xuICAgICAgICAgICAgdGhpcy5sYXN0Q29ubmVjdGVkSGFuZGxlcklkID0gdGhpcy5oYW5kbGVySWQ7XG4gICAgICAgICAgICB0aGlzLmxhc3RDb25uZWN0ZWREcmFnU291cmNlID0gZHJhZ1NvdXJjZTtcbiAgICAgICAgICAgIHRoaXMubGFzdENvbm5lY3RlZERyYWdTb3VyY2VPcHRpb25zID0gdGhpcy5kcmFnU291cmNlT3B0aW9ucztcbiAgICAgICAgICAgIHRoaXMuZHJhZ1NvdXJjZVVuc3Vic2NyaWJlID0gdGhpcy5iYWNrZW5kLmNvbm5lY3REcmFnU291cmNlKHRoaXMuaGFuZGxlcklkLCBkcmFnU291cmNlLCB0aGlzLmRyYWdTb3VyY2VPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGlkQ2hhbmdlO1xuICAgIH1cbiAgICByZWNvbm5lY3REcmFnUHJldmlldyhmb3JjZURpZENoYW5nZSA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IGRyYWdQcmV2aWV3ID0gdGhpcy5kcmFnUHJldmlldztcbiAgICAgICAgLy8gaWYgbm90aGluZyBoYXMgY2hhbmdlZCB0aGVuIGRvbid0IHJlc3Vic2NyaWJlXG4gICAgICAgIGNvbnN0IGRpZENoYW5nZSA9IGZvcmNlRGlkQ2hhbmdlIHx8IHRoaXMuZGlkSGFuZGxlcklkQ2hhbmdlKCkgfHwgdGhpcy5kaWRDb25uZWN0ZWREcmFnUHJldmlld0NoYW5nZSgpIHx8IHRoaXMuZGlkRHJhZ1ByZXZpZXdPcHRpb25zQ2hhbmdlKCk7XG4gICAgICAgIGlmIChkaWRDaGFuZ2UpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzY29ubmVjdERyYWdQcmV2aWV3KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmhhbmRsZXJJZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZHJhZ1ByZXZpZXcpIHtcbiAgICAgICAgICAgIHRoaXMubGFzdENvbm5lY3RlZERyYWdQcmV2aWV3ID0gZHJhZ1ByZXZpZXc7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpZENoYW5nZSkge1xuICAgICAgICAgICAgdGhpcy5sYXN0Q29ubmVjdGVkSGFuZGxlcklkID0gdGhpcy5oYW5kbGVySWQ7XG4gICAgICAgICAgICB0aGlzLmxhc3RDb25uZWN0ZWREcmFnUHJldmlldyA9IGRyYWdQcmV2aWV3O1xuICAgICAgICAgICAgdGhpcy5sYXN0Q29ubmVjdGVkRHJhZ1ByZXZpZXdPcHRpb25zID0gdGhpcy5kcmFnUHJldmlld09wdGlvbnM7XG4gICAgICAgICAgICB0aGlzLmRyYWdQcmV2aWV3VW5zdWJzY3JpYmUgPSB0aGlzLmJhY2tlbmQuY29ubmVjdERyYWdQcmV2aWV3KHRoaXMuaGFuZGxlcklkLCBkcmFnUHJldmlldywgdGhpcy5kcmFnUHJldmlld09wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRpZEhhbmRsZXJJZENoYW5nZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGFzdENvbm5lY3RlZEhhbmRsZXJJZCAhPT0gdGhpcy5oYW5kbGVySWQ7XG4gICAgfVxuICAgIGRpZENvbm5lY3RlZERyYWdTb3VyY2VDaGFuZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxhc3RDb25uZWN0ZWREcmFnU291cmNlICE9PSB0aGlzLmRyYWdTb3VyY2U7XG4gICAgfVxuICAgIGRpZENvbm5lY3RlZERyYWdQcmV2aWV3Q2hhbmdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sYXN0Q29ubmVjdGVkRHJhZ1ByZXZpZXcgIT09IHRoaXMuZHJhZ1ByZXZpZXc7XG4gICAgfVxuICAgIGRpZERyYWdTb3VyY2VPcHRpb25zQ2hhbmdlKCkge1xuICAgICAgICByZXR1cm4gIXNoYWxsb3dFcXVhbCh0aGlzLmxhc3RDb25uZWN0ZWREcmFnU291cmNlT3B0aW9ucywgdGhpcy5kcmFnU291cmNlT3B0aW9ucyk7XG4gICAgfVxuICAgIGRpZERyYWdQcmV2aWV3T3B0aW9uc0NoYW5nZSgpIHtcbiAgICAgICAgcmV0dXJuICFzaGFsbG93RXF1YWwodGhpcy5sYXN0Q29ubmVjdGVkRHJhZ1ByZXZpZXdPcHRpb25zLCB0aGlzLmRyYWdQcmV2aWV3T3B0aW9ucyk7XG4gICAgfVxuICAgIGRpc2Nvbm5lY3REcmFnU291cmNlKCkge1xuICAgICAgICBpZiAodGhpcy5kcmFnU291cmNlVW5zdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhZ1NvdXJjZVVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB0aGlzLmRyYWdTb3VyY2VVbnN1YnNjcmliZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkaXNjb25uZWN0RHJhZ1ByZXZpZXcoKSB7XG4gICAgICAgIGlmICh0aGlzLmRyYWdQcmV2aWV3VW5zdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhZ1ByZXZpZXdVbnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy5kcmFnUHJldmlld1Vuc3Vic2NyaWJlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5kcmFnUHJldmlld05vZGUgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5kcmFnUHJldmlld1JlZiA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGRyYWdTb3VyY2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRyYWdTb3VyY2VOb2RlIHx8IHRoaXMuZHJhZ1NvdXJjZVJlZiAmJiB0aGlzLmRyYWdTb3VyY2VSZWYuY3VycmVudDtcbiAgICB9XG4gICAgZ2V0IGRyYWdQcmV2aWV3KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kcmFnUHJldmlld05vZGUgfHwgdGhpcy5kcmFnUHJldmlld1JlZiAmJiB0aGlzLmRyYWdQcmV2aWV3UmVmLmN1cnJlbnQ7XG4gICAgfVxuICAgIGNsZWFyRHJhZ1NvdXJjZSgpIHtcbiAgICAgICAgdGhpcy5kcmFnU291cmNlTm9kZSA9IG51bGw7XG4gICAgICAgIHRoaXMuZHJhZ1NvdXJjZVJlZiA9IG51bGw7XG4gICAgfVxuICAgIGNsZWFyRHJhZ1ByZXZpZXcoKSB7XG4gICAgICAgIHRoaXMuZHJhZ1ByZXZpZXdOb2RlID0gbnVsbDtcbiAgICAgICAgdGhpcy5kcmFnUHJldmlld1JlZiA9IG51bGw7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGJhY2tlbmQpe1xuICAgICAgICB0aGlzLmhvb2tzID0gd3JhcENvbm5lY3Rvckhvb2tzKHtcbiAgICAgICAgICAgIGRyYWdTb3VyY2U6IChub2RlLCBvcHRpb25zKT0+e1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJEcmFnU291cmNlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5kcmFnU291cmNlT3B0aW9ucyA9IG9wdGlvbnMgfHwgbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoaXNSZWYobm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmFnU291cmNlUmVmID0gbm9kZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYWdTb3VyY2VOb2RlID0gbm9kZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3REcmFnU291cmNlKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZHJhZ1ByZXZpZXc6IChub2RlLCBvcHRpb25zKT0+e1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJEcmFnUHJldmlldygpO1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhZ1ByZXZpZXdPcHRpb25zID0gb3B0aW9ucyB8fCBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChpc1JlZihub2RlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYWdQcmV2aWV3UmVmID0gbm9kZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYWdQcmV2aWV3Tm9kZSA9IG5vZGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucmVjb25uZWN0RHJhZ1ByZXZpZXcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaGFuZGxlcklkID0gbnVsbDtcbiAgICAgICAgLy8gVGhlIGRyb3AgdGFyZ2V0IG1heSBlaXRoZXIgYmUgYXR0YWNoZWQgdmlhIHJlZiBvciBjb25uZWN0IGZ1bmN0aW9uXG4gICAgICAgIHRoaXMuZHJhZ1NvdXJjZVJlZiA9IG51bGw7XG4gICAgICAgIHRoaXMuZHJhZ1NvdXJjZU9wdGlvbnNJbnRlcm5hbCA9IG51bGw7XG4gICAgICAgIC8vIFRoZSBkcmFnIHByZXZpZXcgbWF5IGVpdGhlciBiZSBhdHRhY2hlZCB2aWEgcmVmIG9yIGNvbm5lY3QgZnVuY3Rpb25cbiAgICAgICAgdGhpcy5kcmFnUHJldmlld1JlZiA9IG51bGw7XG4gICAgICAgIHRoaXMuZHJhZ1ByZXZpZXdPcHRpb25zSW50ZXJuYWwgPSBudWxsO1xuICAgICAgICB0aGlzLmxhc3RDb25uZWN0ZWRIYW5kbGVySWQgPSBudWxsO1xuICAgICAgICB0aGlzLmxhc3RDb25uZWN0ZWREcmFnU291cmNlID0gbnVsbDtcbiAgICAgICAgdGhpcy5sYXN0Q29ubmVjdGVkRHJhZ1NvdXJjZU9wdGlvbnMgPSBudWxsO1xuICAgICAgICB0aGlzLmxhc3RDb25uZWN0ZWREcmFnUHJldmlldyA9IG51bGw7XG4gICAgICAgIHRoaXMubGFzdENvbm5lY3RlZERyYWdQcmV2aWV3T3B0aW9ucyA9IG51bGw7XG4gICAgICAgIHRoaXMuYmFja2VuZCA9IGJhY2tlbmQ7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1Tb3VyY2VDb25uZWN0b3IuanMubWFwIiwiaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnQHJlYWN0LWRuZC9pbnZhcmlhbnQnO1xubGV0IGlzQ2FsbGluZ0NhbkRyYWcgPSBmYWxzZTtcbmxldCBpc0NhbGxpbmdJc0RyYWdnaW5nID0gZmFsc2U7XG5leHBvcnQgY2xhc3MgRHJhZ1NvdXJjZU1vbml0b3JJbXBsIHtcbiAgICByZWNlaXZlSGFuZGxlcklkKHNvdXJjZUlkKSB7XG4gICAgICAgIHRoaXMuc291cmNlSWQgPSBzb3VyY2VJZDtcbiAgICB9XG4gICAgZ2V0SGFuZGxlcklkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VJZDtcbiAgICB9XG4gICAgY2FuRHJhZygpIHtcbiAgICAgICAgaW52YXJpYW50KCFpc0NhbGxpbmdDYW5EcmFnLCAnWW91IG1heSBub3QgY2FsbCBtb25pdG9yLmNhbkRyYWcoKSBpbnNpZGUgeW91ciBjYW5EcmFnKCkgaW1wbGVtZW50YXRpb24uICcgKyAnUmVhZCBtb3JlOiBodHRwOi8vcmVhY3QtZG5kLmdpdGh1Yi5pby9yZWFjdC1kbmQvZG9jcy9hcGkvZHJhZy1zb3VyY2UtbW9uaXRvcicpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaXNDYWxsaW5nQ2FuRHJhZyA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbE1vbml0b3IuY2FuRHJhZ1NvdXJjZSh0aGlzLnNvdXJjZUlkKTtcbiAgICAgICAgfSBmaW5hbGx5e1xuICAgICAgICAgICAgaXNDYWxsaW5nQ2FuRHJhZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlzRHJhZ2dpbmcoKSB7XG4gICAgICAgIGlmICghdGhpcy5zb3VyY2VJZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGludmFyaWFudCghaXNDYWxsaW5nSXNEcmFnZ2luZywgJ1lvdSBtYXkgbm90IGNhbGwgbW9uaXRvci5pc0RyYWdnaW5nKCkgaW5zaWRlIHlvdXIgaXNEcmFnZ2luZygpIGltcGxlbWVudGF0aW9uLiAnICsgJ1JlYWQgbW9yZTogaHR0cDovL3JlYWN0LWRuZC5naXRodWIuaW8vcmVhY3QtZG5kL2RvY3MvYXBpL2RyYWctc291cmNlLW1vbml0b3InKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlzQ2FsbGluZ0lzRHJhZ2dpbmcgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxNb25pdG9yLmlzRHJhZ2dpbmdTb3VyY2UodGhpcy5zb3VyY2VJZCk7XG4gICAgICAgIH0gZmluYWxseXtcbiAgICAgICAgICAgIGlzQ2FsbGluZ0lzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdWJzY3JpYmVUb1N0YXRlQ2hhbmdlKGxpc3RlbmVyLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsTW9uaXRvci5zdWJzY3JpYmVUb1N0YXRlQ2hhbmdlKGxpc3RlbmVyLCBvcHRpb25zKTtcbiAgICB9XG4gICAgaXNEcmFnZ2luZ1NvdXJjZShzb3VyY2VJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbE1vbml0b3IuaXNEcmFnZ2luZ1NvdXJjZShzb3VyY2VJZCk7XG4gICAgfVxuICAgIGlzT3ZlclRhcmdldCh0YXJnZXRJZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbE1vbml0b3IuaXNPdmVyVGFyZ2V0KHRhcmdldElkLCBvcHRpb25zKTtcbiAgICB9XG4gICAgZ2V0VGFyZ2V0SWRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbE1vbml0b3IuZ2V0VGFyZ2V0SWRzKCk7XG4gICAgfVxuICAgIGlzU291cmNlUHVibGljKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbE1vbml0b3IuaXNTb3VyY2VQdWJsaWMoKTtcbiAgICB9XG4gICAgZ2V0U291cmNlSWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsTW9uaXRvci5nZXRTb3VyY2VJZCgpO1xuICAgIH1cbiAgICBzdWJzY3JpYmVUb09mZnNldENoYW5nZShsaXN0ZW5lcikge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbE1vbml0b3Iuc3Vic2NyaWJlVG9PZmZzZXRDaGFuZ2UobGlzdGVuZXIpO1xuICAgIH1cbiAgICBjYW5EcmFnU291cmNlKHNvdXJjZUlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsTW9uaXRvci5jYW5EcmFnU291cmNlKHNvdXJjZUlkKTtcbiAgICB9XG4gICAgY2FuRHJvcE9uVGFyZ2V0KHRhcmdldElkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsTW9uaXRvci5jYW5Ecm9wT25UYXJnZXQodGFyZ2V0SWQpO1xuICAgIH1cbiAgICBnZXRJdGVtVHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxNb25pdG9yLmdldEl0ZW1UeXBlKCk7XG4gICAgfVxuICAgIGdldEl0ZW0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsTW9uaXRvci5nZXRJdGVtKCk7XG4gICAgfVxuICAgIGdldERyb3BSZXN1bHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsTW9uaXRvci5nZXREcm9wUmVzdWx0KCk7XG4gICAgfVxuICAgIGRpZERyb3AoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsTW9uaXRvci5kaWREcm9wKCk7XG4gICAgfVxuICAgIGdldEluaXRpYWxDbGllbnRPZmZzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsTW9uaXRvci5nZXRJbml0aWFsQ2xpZW50T2Zmc2V0KCk7XG4gICAgfVxuICAgIGdldEluaXRpYWxTb3VyY2VDbGllbnRPZmZzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsTW9uaXRvci5nZXRJbml0aWFsU291cmNlQ2xpZW50T2Zmc2V0KCk7XG4gICAgfVxuICAgIGdldFNvdXJjZUNsaWVudE9mZnNldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxNb25pdG9yLmdldFNvdXJjZUNsaWVudE9mZnNldCgpO1xuICAgIH1cbiAgICBnZXRDbGllbnRPZmZzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsTW9uaXRvci5nZXRDbGllbnRPZmZzZXQoKTtcbiAgICB9XG4gICAgZ2V0RGlmZmVyZW5jZUZyb21Jbml0aWFsT2Zmc2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbE1vbml0b3IuZ2V0RGlmZmVyZW5jZUZyb21Jbml0aWFsT2Zmc2V0KCk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKG1hbmFnZXIpe1xuICAgICAgICB0aGlzLnNvdXJjZUlkID0gbnVsbDtcbiAgICAgICAgdGhpcy5pbnRlcm5hbE1vbml0b3IgPSBtYW5hZ2VyLmdldE1vbml0b3IoKTtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURyYWdTb3VyY2VNb25pdG9ySW1wbC5qcy5tYXAiLCJleHBvcnQgY2xhc3MgRHJhZ1NvdXJjZUltcGwge1xuICAgIGJlZ2luRHJhZygpIHtcbiAgICAgICAgY29uc3Qgc3BlYyA9IHRoaXMuc3BlYztcbiAgICAgICAgY29uc3QgbW9uaXRvciA9IHRoaXMubW9uaXRvcjtcbiAgICAgICAgbGV0IHJlc3VsdCA9IG51bGw7XG4gICAgICAgIGlmICh0eXBlb2Ygc3BlYy5pdGVtID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgcmVzdWx0ID0gc3BlYy5pdGVtO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzcGVjLml0ZW0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHNwZWMuaXRlbShtb25pdG9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQgIT09IG51bGwgJiYgcmVzdWx0ICE9PSB2b2lkIDAgPyByZXN1bHQgOiBudWxsO1xuICAgIH1cbiAgICBjYW5EcmFnKCkge1xuICAgICAgICBjb25zdCBzcGVjID0gdGhpcy5zcGVjO1xuICAgICAgICBjb25zdCBtb25pdG9yID0gdGhpcy5tb25pdG9yO1xuICAgICAgICBpZiAodHlwZW9mIHNwZWMuY2FuRHJhZyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3BlYy5jYW5EcmFnO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzcGVjLmNhbkRyYWcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBzcGVjLmNhbkRyYWcobW9uaXRvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpc0RyYWdnaW5nKGdsb2JhbE1vbml0b3IsIHRhcmdldCkge1xuICAgICAgICBjb25zdCBzcGVjID0gdGhpcy5zcGVjO1xuICAgICAgICBjb25zdCBtb25pdG9yID0gdGhpcy5tb25pdG9yO1xuICAgICAgICBjb25zdCB7IGlzRHJhZ2dpbmcgIH0gPSBzcGVjO1xuICAgICAgICByZXR1cm4gaXNEcmFnZ2luZyA/IGlzRHJhZ2dpbmcobW9uaXRvcikgOiB0YXJnZXQgPT09IGdsb2JhbE1vbml0b3IuZ2V0U291cmNlSWQoKTtcbiAgICB9XG4gICAgZW5kRHJhZygpIHtcbiAgICAgICAgY29uc3Qgc3BlYyA9IHRoaXMuc3BlYztcbiAgICAgICAgY29uc3QgbW9uaXRvciA9IHRoaXMubW9uaXRvcjtcbiAgICAgICAgY29uc3QgY29ubmVjdG9yID0gdGhpcy5jb25uZWN0b3I7XG4gICAgICAgIGNvbnN0IHsgZW5kICB9ID0gc3BlYztcbiAgICAgICAgaWYgKGVuZCkge1xuICAgICAgICAgICAgZW5kKG1vbml0b3IuZ2V0SXRlbSgpLCBtb25pdG9yKTtcbiAgICAgICAgfVxuICAgICAgICBjb25uZWN0b3IucmVjb25uZWN0KCk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHNwZWMsIG1vbml0b3IsIGNvbm5lY3Rvcil7XG4gICAgICAgIHRoaXMuc3BlYyA9IHNwZWM7XG4gICAgICAgIHRoaXMubW9uaXRvciA9IG1vbml0b3I7XG4gICAgICAgIHRoaXMuY29ubmVjdG9yID0gY29ubmVjdG9yO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RHJhZ1NvdXJjZUltcGwuanMubWFwIiwiaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnQHJlYWN0LWRuZC9pbnZhcmlhbnQnO1xuaW1wb3J0IHsgdXNlQ29sbGVjdGVkUHJvcHMgfSBmcm9tICcuLi91c2VDb2xsZWN0ZWRQcm9wcy5qcyc7XG5pbXBvcnQgeyB1c2VPcHRpb25hbEZhY3RvcnkgfSBmcm9tICcuLi91c2VPcHRpb25hbEZhY3RvcnkuanMnO1xuaW1wb3J0IHsgdXNlQ29ubmVjdERyYWdQcmV2aWV3LCB1c2VDb25uZWN0RHJhZ1NvdXJjZSB9IGZyb20gJy4vY29ubmVjdG9ycy5qcyc7XG5pbXBvcnQgeyB1c2VEcmFnU291cmNlQ29ubmVjdG9yIH0gZnJvbSAnLi91c2VEcmFnU291cmNlQ29ubmVjdG9yLmpzJztcbmltcG9ydCB7IHVzZURyYWdTb3VyY2VNb25pdG9yIH0gZnJvbSAnLi91c2VEcmFnU291cmNlTW9uaXRvci5qcyc7XG5pbXBvcnQgeyB1c2VSZWdpc3RlcmVkRHJhZ1NvdXJjZSB9IGZyb20gJy4vdXNlUmVnaXN0ZXJlZERyYWdTb3VyY2UuanMnO1xuLyoqXG4gKiB1c2VEcmFnU291cmNlIGhvb2tcbiAqIEBwYXJhbSBzb3VyY2VTcGVjIFRoZSBkcmFnIHNvdXJjZSBzcGVjaWZpY2F0aW9uIChvYmplY3Qgb3IgZnVuY3Rpb24sIGZ1bmN0aW9uIHByZWZlcnJlZClcbiAqIEBwYXJhbSBkZXBzIFRoZSBtZW1vaXphdGlvbiBkZXBzIGFycmF5IHRvIHVzZSB3aGVuIGV2YWx1YXRpbmcgc3BlYyBjaGFuZ2VzXG4gKi8gZXhwb3J0IGZ1bmN0aW9uIHVzZURyYWcoc3BlY0FyZywgZGVwcykge1xuICAgIGNvbnN0IHNwZWMgPSB1c2VPcHRpb25hbEZhY3Rvcnkoc3BlY0FyZywgZGVwcyk7XG4gICAgaW52YXJpYW50KCFzcGVjLmJlZ2luLCBgdXNlRHJhZzo6c3BlYy5iZWdpbiB3YXMgZGVwcmVjYXRlZCBpbiB2MTQuIFJlcGxhY2Ugc3BlYy5iZWdpbigpIHdpdGggc3BlYy5pdGVtKCkuIChzZWUgbW9yZSBoZXJlIC0gaHR0cHM6Ly9yZWFjdC1kbmQuZ2l0aHViLmlvL3JlYWN0LWRuZC9kb2NzL2FwaS91c2UtZHJhZylgKTtcbiAgICBjb25zdCBtb25pdG9yID0gdXNlRHJhZ1NvdXJjZU1vbml0b3IoKTtcbiAgICBjb25zdCBjb25uZWN0b3IgPSB1c2VEcmFnU291cmNlQ29ubmVjdG9yKHNwZWMub3B0aW9ucywgc3BlYy5wcmV2aWV3T3B0aW9ucyk7XG4gICAgdXNlUmVnaXN0ZXJlZERyYWdTb3VyY2Uoc3BlYywgbW9uaXRvciwgY29ubmVjdG9yKTtcbiAgICByZXR1cm4gW1xuICAgICAgICB1c2VDb2xsZWN0ZWRQcm9wcyhzcGVjLmNvbGxlY3QsIG1vbml0b3IsIGNvbm5lY3RvciksXG4gICAgICAgIHVzZUNvbm5lY3REcmFnU291cmNlKGNvbm5lY3RvciksXG4gICAgICAgIHVzZUNvbm5lY3REcmFnUHJldmlldyhjb25uZWN0b3IpLCBcbiAgICBdO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VEcmFnLmpzLm1hcCIsImltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBEcmFnU291cmNlTW9uaXRvckltcGwgfSBmcm9tICcuLi8uLi9pbnRlcm5hbHMvaW5kZXguanMnO1xuaW1wb3J0IHsgdXNlRHJhZ0Ryb3BNYW5hZ2VyIH0gZnJvbSAnLi4vdXNlRHJhZ0Ryb3BNYW5hZ2VyLmpzJztcbmV4cG9ydCBmdW5jdGlvbiB1c2VEcmFnU291cmNlTW9uaXRvcigpIHtcbiAgICBjb25zdCBtYW5hZ2VyID0gdXNlRHJhZ0Ryb3BNYW5hZ2VyKCk7XG4gICAgcmV0dXJuIHVzZU1lbW8oKCk9Pm5ldyBEcmFnU291cmNlTW9uaXRvckltcGwobWFuYWdlcilcbiAgICAsIFtcbiAgICAgICAgbWFuYWdlclxuICAgIF0pO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VEcmFnU291cmNlTW9uaXRvci5qcy5tYXAiLCJpbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU291cmNlQ29ubmVjdG9yIH0gZnJvbSAnLi4vLi4vaW50ZXJuYWxzL2luZGV4LmpzJztcbmltcG9ydCB7IHVzZURyYWdEcm9wTWFuYWdlciB9IGZyb20gJy4uL3VzZURyYWdEcm9wTWFuYWdlci5qcyc7XG5pbXBvcnQgeyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSAnLi4vdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC5qcyc7XG5leHBvcnQgZnVuY3Rpb24gdXNlRHJhZ1NvdXJjZUNvbm5lY3RvcihkcmFnU291cmNlT3B0aW9ucywgZHJhZ1ByZXZpZXdPcHRpb25zKSB7XG4gICAgY29uc3QgbWFuYWdlciA9IHVzZURyYWdEcm9wTWFuYWdlcigpO1xuICAgIGNvbnN0IGNvbm5lY3RvciA9IHVzZU1lbW8oKCk9Pm5ldyBTb3VyY2VDb25uZWN0b3IobWFuYWdlci5nZXRCYWNrZW5kKCkpXG4gICAgLCBbXG4gICAgICAgIG1hbmFnZXJcbiAgICBdKTtcbiAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpPT57XG4gICAgICAgIGNvbm5lY3Rvci5kcmFnU291cmNlT3B0aW9ucyA9IGRyYWdTb3VyY2VPcHRpb25zIHx8IG51bGw7XG4gICAgICAgIGNvbm5lY3Rvci5yZWNvbm5lY3QoKTtcbiAgICAgICAgcmV0dXJuICgpPT5jb25uZWN0b3IuZGlzY29ubmVjdERyYWdTb3VyY2UoKVxuICAgICAgICA7XG4gICAgfSwgW1xuICAgICAgICBjb25uZWN0b3IsXG4gICAgICAgIGRyYWdTb3VyY2VPcHRpb25zXG4gICAgXSk7XG4gICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKT0+e1xuICAgICAgICBjb25uZWN0b3IuZHJhZ1ByZXZpZXdPcHRpb25zID0gZHJhZ1ByZXZpZXdPcHRpb25zIHx8IG51bGw7XG4gICAgICAgIGNvbm5lY3Rvci5yZWNvbm5lY3QoKTtcbiAgICAgICAgcmV0dXJuICgpPT5jb25uZWN0b3IuZGlzY29ubmVjdERyYWdQcmV2aWV3KClcbiAgICAgICAgO1xuICAgIH0sIFtcbiAgICAgICAgY29ubmVjdG9yLFxuICAgICAgICBkcmFnUHJldmlld09wdGlvbnNcbiAgICBdKTtcbiAgICByZXR1cm4gY29ubmVjdG9yO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VEcmFnU291cmNlQ29ubmVjdG9yLmpzLm1hcCIsImltcG9ydCB7IHJlZ2lzdGVyU291cmNlIH0gZnJvbSAnLi4vLi4vaW50ZXJuYWxzL2luZGV4LmpzJztcbmltcG9ydCB7IHVzZURyYWdEcm9wTWFuYWdlciB9IGZyb20gJy4uL3VzZURyYWdEcm9wTWFuYWdlci5qcyc7XG5pbXBvcnQgeyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSAnLi4vdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC5qcyc7XG5pbXBvcnQgeyB1c2VEcmFnU291cmNlIH0gZnJvbSAnLi91c2VEcmFnU291cmNlLmpzJztcbmltcG9ydCB7IHVzZURyYWdUeXBlIH0gZnJvbSAnLi91c2VEcmFnVHlwZS5qcyc7XG5leHBvcnQgZnVuY3Rpb24gdXNlUmVnaXN0ZXJlZERyYWdTb3VyY2Uoc3BlYywgbW9uaXRvciwgY29ubmVjdG9yKSB7XG4gICAgY29uc3QgbWFuYWdlciA9IHVzZURyYWdEcm9wTWFuYWdlcigpO1xuICAgIGNvbnN0IGhhbmRsZXIgPSB1c2VEcmFnU291cmNlKHNwZWMsIG1vbml0b3IsIGNvbm5lY3Rvcik7XG4gICAgY29uc3QgaXRlbVR5cGUgPSB1c2VEcmFnVHlwZShzcGVjKTtcbiAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uIHJlZ2lzdGVyRHJhZ1NvdXJjZSgpIHtcbiAgICAgICAgaWYgKGl0ZW1UeXBlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IFtoYW5kbGVySWQsIHVucmVnaXN0ZXJdID0gcmVnaXN0ZXJTb3VyY2UoaXRlbVR5cGUsIGhhbmRsZXIsIG1hbmFnZXIpO1xuICAgICAgICAgICAgbW9uaXRvci5yZWNlaXZlSGFuZGxlcklkKGhhbmRsZXJJZCk7XG4gICAgICAgICAgICBjb25uZWN0b3IucmVjZWl2ZUhhbmRsZXJJZChoYW5kbGVySWQpO1xuICAgICAgICAgICAgcmV0dXJuIHVucmVnaXN0ZXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH0sIFtcbiAgICAgICAgbWFuYWdlcixcbiAgICAgICAgbW9uaXRvcixcbiAgICAgICAgY29ubmVjdG9yLFxuICAgICAgICBoYW5kbGVyLFxuICAgICAgICBpdGVtVHlwZVxuICAgIF0pO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VSZWdpc3RlcmVkRHJhZ1NvdXJjZS5qcy5tYXAiLCJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBEcmFnU291cmNlSW1wbCB9IGZyb20gJy4vRHJhZ1NvdXJjZUltcGwuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZURyYWdTb3VyY2Uoc3BlYywgbW9uaXRvciwgY29ubmVjdG9yKSB7XG4gICAgY29uc3QgaGFuZGxlciA9IHVzZU1lbW8oKCk9Pm5ldyBEcmFnU291cmNlSW1wbChzcGVjLCBtb25pdG9yLCBjb25uZWN0b3IpXG4gICAgLCBbXG4gICAgICAgIG1vbml0b3IsXG4gICAgICAgIGNvbm5lY3RvclxuICAgIF0pO1xuICAgIHVzZUVmZmVjdCgoKT0+e1xuICAgICAgICBoYW5kbGVyLnNwZWMgPSBzcGVjO1xuICAgIH0sIFtcbiAgICAgICAgc3BlY1xuICAgIF0pO1xuICAgIHJldHVybiBoYW5kbGVyO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VEcmFnU291cmNlLmpzLm1hcCIsImltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJ0ByZWFjdC1kbmQvaW52YXJpYW50JztcbmltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5leHBvcnQgZnVuY3Rpb24gdXNlRHJhZ1R5cGUoc3BlYykge1xuICAgIHJldHVybiB1c2VNZW1vKCgpPT57XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHNwZWMudHlwZTtcbiAgICAgICAgaW52YXJpYW50KHJlc3VsdCAhPSBudWxsLCAnc3BlYy50eXBlIG11c3QgYmUgZGVmaW5lZCcpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sIFtcbiAgICAgICAgc3BlY1xuICAgIF0pO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VEcmFnVHlwZS5qcy5tYXAiLCJpbXBvcnQge1xuICBTdHlsZWRFeGVyY2lzZURldGFpbCxcbiAgU3R5bGVkRXhlcmNpc2VIZWFkZXIsXG4gIFN0eWxlZEV4ZXJjaXNlV3JhcHBlcixcbn0gZnJvbSBcIi4vRXhlcmNpc2Uuc3R5bGVkXCI7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vY29tcG9uZW50cy9UeXBvZ3JhcGh5L1R5cG9ncmFwaHlcIjtcbmltcG9ydCB0eXBlIHsgSUV4ZXJjaXNlIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2RhdGEvZGF0YVwiO1xuaW1wb3J0IHsgdXNlRXhlcmNpc2VEcmFnIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2hvb2tzL3VzZUV4ZXJjaXNlRHJvcEFuZERyYWdcIjtcblxudHlwZSBFeGVyY2lzZVByb3BzID0ge1xuICBleGVyY2lzZTogSUV4ZXJjaXNlO1xuICB3b3Jrb3V0SWQ6IG51bWJlcjtcbn07XG5cbmNvbnN0IEV4ZXJjaXNlOiBSZWFjdC5GQzxFeGVyY2lzZVByb3BzPiA9ICh7IGV4ZXJjaXNlLCB3b3Jrb3V0SWQgfSkgPT4ge1xuICBjb25zdCBbeyBpc0V4ZXJjaXNlRHJhZ2dpbmc6IGlzRXhlcmNpc2VEcmFnZ2luZyB9LCBleGVyY2lzZVJlZl0gPVxuICAgIHVzZUV4ZXJjaXNlRHJhZyhleGVyY2lzZT8uaWQsIHdvcmtvdXRJZCk7XG5cbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkRXhlcmNpc2VXcmFwcGVyXG4gICAgICByZWY9e2V4ZXJjaXNlUmVmfVxuICAgICAgc3R5bGU9e3sgb3BhY2l0eTogaXNFeGVyY2lzZURyYWdnaW5nID8gMC41IDogdW5kZWZpbmVkIH19XG4gICAgPlxuICAgICAgPFN0eWxlZEV4ZXJjaXNlSGVhZGVyPlxuICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiaDZcIj57ZXhlcmNpc2UubmFtZX08L1R5cG9ncmFwaHk+XG4gICAgICA8L1N0eWxlZEV4ZXJjaXNlSGVhZGVyPlxuICAgICAgPFN0eWxlZEV4ZXJjaXNlRGV0YWlsPlxuICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiYm9keTFcIj57ZXhlcmNpc2Uuc2V0c314PC9UeXBvZ3JhcGh5PlxuICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiYm9keTJcIj57ZXhlcmNpc2UuZGV0YWlsc308L1R5cG9ncmFwaHk+XG4gICAgICA8L1N0eWxlZEV4ZXJjaXNlRGV0YWlsPlxuICAgIDwvU3R5bGVkRXhlcmNpc2VXcmFwcGVyPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRXhlcmNpc2U7XG4iLCIvLyBzcmMvaG9va3MvdXNlRXhlcmNpc2VEcm9wLnRzXG5pbXBvcnQgeyB1c2VEcm9wIH0gZnJvbSBcInJlYWN0LWRuZFwiO1xuaW1wb3J0IHVzZURhdGEgZnJvbSBcIi4vdXNlRGF0YVwiO1xuXG5pbXBvcnQgeyB1c2VEcmFnIH0gZnJvbSBcInJlYWN0LWRuZFwiO1xuXG5leHBvcnQgdHlwZSBFeGVyY2lzZURyYWdJdGVtID0ge1xuICBpZDogbnVtYmVyO1xuICB3b3Jrb3V0SWQ6IG51bWJlcjtcbn07XG5cbmV4cG9ydCBjb25zdCB1c2VFeGVyY2lzZURyYWcgPSAoZXhlcmNpc2VJZDogbnVtYmVyLCB3b3Jrb3V0SWQ6IG51bWJlcikgPT4ge1xuICByZXR1cm4gdXNlRHJhZzxFeGVyY2lzZURyYWdJdGVtLCB1bmtub3duLCB7IGlzRXhlcmNpc2VEcmFnZ2luZzogYm9vbGVhbiB9Pih7XG4gICAgdHlwZTogXCJleGVyY2lzZVwiLFxuICAgIGl0ZW06IHsgaWQ6IGV4ZXJjaXNlSWQsIHdvcmtvdXRJZCB9LFxuICAgIGNvbGxlY3Q6IChtb25pdG9yKSA9PiAoe1xuICAgICAgaXNFeGVyY2lzZURyYWdnaW5nOiBtb25pdG9yLmlzRHJhZ2dpbmcoKSxcbiAgICB9KSxcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgdXNlRXhlcmNpc2VEcm9wID0gKHdvcmtvdXRJZDogbnVtYmVyKSA9PiB7XG4gIGNvbnN0IHsgZGlzcGF0Y2ggfSA9IHVzZURhdGEoKTtcblxuICByZXR1cm4gdXNlRHJvcDxFeGVyY2lzZURyYWdJdGVtLCB2b2lkLCB7IGlzRXhlcmNpc2VEcm9wT3ZlcjogYm9vbGVhbiB9Pih7XG4gICAgYWNjZXB0OiBcImV4ZXJjaXNlXCIsXG4gICAgZHJvcDogKGl0ZW0pID0+IHtcbiAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogXCJNT1ZFX0VYRVJDSVNFXCIsXG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICBleGVyY2lzZUlkOiBpdGVtLmlkLFxuICAgICAgICAgIGZyb21Xb3Jrb3V0SWQ6IGl0ZW0ud29ya291dElkLFxuICAgICAgICAgIHRvV29ya291dElkOiB3b3Jrb3V0SWQsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGNvbGxlY3Q6IChtb25pdG9yKSA9PiAoe1xuICAgICAgaXNFeGVyY2lzZURyb3BPdmVyOiBtb25pdG9yLmlzT3ZlcigpLFxuICAgIH0pLFxuICB9KTtcbn07XG4iLCJpbXBvcnQge1xuICBTdHlsZVdvcmtvdXRDb250ZW50LFxuICBTdHlsZVdvcmtvdXRGb290ZXIsXG4gIFN0eWxlV29ya291dEhlYWRlcixcbiAgU3R5bGVXb3Jrb3V0V3JhcHBlcixcbn0gZnJvbSBcIi4vV29ya291dC5zdHlsZWRcIjtcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gXCIuLi8uLi8uLi8uLi9jb21wb25lbnRzL1R5cG9ncmFwaHkvVHlwb2dyYXBoeVwiO1xuaW1wb3J0IEljb25CdXR0b24gZnJvbSBcIi4uLy4uLy4uLy4uL2NvbXBvbmVudHMvQnV0dG9uL0ljb25CdXR0b25cIjtcbmltcG9ydCBFeGVyY2lzZSBmcm9tIFwiLi9FeGVyY2lzZS9FeGVyY2lzZVwiO1xuaW1wb3J0IHR5cGUgeyBEYXksIElXb3Jrb3V0IH0gZnJvbSBcIi4uLy4uLy4uLy4uL2RhdGEvZGF0YVwiO1xuaW1wb3J0IHsgdXNlRXhlcmNpc2VEcm9wIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2hvb2tzL3VzZUV4ZXJjaXNlRHJvcEFuZERyYWdcIjtcbmltcG9ydCB7IHVzZVdvcmtvdXREcmFnIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2hvb2tzL3VzZVdvcmtvdXREcm9nQW5kRHJhZ1wiO1xuXG50eXBlIFdvcmtvdXRQcm9wcyA9IHtcbiAgd29ya291dDogSVdvcmtvdXQ7XG4gIGRheTogRGF5O1xufTtcblxuY29uc3QgV29ya291dDogUmVhY3QuRkM8V29ya291dFByb3BzPiA9ICh7IHdvcmtvdXQsIGRheSB9KSA9PiB7XG4gIGNvbnN0IFt7IGlzV29ya291dERyYWdnaW5nIH0sIHdvcmtvdXREcmFnUmVmXSA9IHVzZVdvcmtvdXREcmFnKFxuICAgIHdvcmtvdXQuaWQsXG4gICAgZGF5LFxuICApO1xuICBjb25zdCBbeyBpc0V4ZXJjaXNlRHJvcE92ZXIgfSwgd29ya291dERyb3BSZWZdID0gdXNlRXhlcmNpc2VEcm9wKHdvcmtvdXQuaWQpO1xuXG4gIGNvbnN0IGFkZEV4ZXJjaXNlSGFuZGxlciA9ICgpID0+IHtcbiAgICBhbGVydChcIm5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgfTtcblxuICBjb25zdCBvcGVuTWVudUhhbmRsZXIgPSAoKSA9PiB7XG4gICAgYWxlcnQoXCJub3QgaW1wbGVtZW50ZWRcIik7XG4gIH07XG5cbiAgY29uc3Qgd29ya291dFdyYXBwZXJIYW5kbGVyID0gKGVsZW1lbnQ6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgd29ya291dERyYWdSZWYoZWxlbWVudCk7XG4gICAgd29ya291dERyb3BSZWYoZWxlbWVudCk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8U3R5bGVXb3Jrb3V0V3JhcHBlclxuICAgICAgcmVmPXt3b3Jrb3V0V3JhcHBlckhhbmRsZXJ9XG4gICAgICBzdHlsZT17e1xuICAgICAgICBvcGFjaXR5OiBpc1dvcmtvdXREcmFnZ2luZyA/IDAuNSA6IHVuZGVmaW5lZCxcbiAgICAgICAgYm9yZGVyV2lkdGg6IGlzRXhlcmNpc2VEcm9wT3ZlclxuICAgICAgICAgID8gXCIycHggc29saWQgdmFyKC0taGlnaHRsaWdodClcIlxuICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgfX1cbiAgICA+XG4gICAgICA8U3R5bGVXb3Jrb3V0SGVhZGVyPlxuICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiaDVcIj57d29ya291dC5uYW1lfTwvVHlwb2dyYXBoeT5cbiAgICAgICAgPEljb25CdXR0b24gdmFyaWFudD1cImljb25cIiBpY29uPVwiLi4uXCIgb25DbGljaz17b3Blbk1lbnVIYW5kbGVyfSAvPlxuICAgICAgPC9TdHlsZVdvcmtvdXRIZWFkZXI+XG4gICAgICA8U3R5bGVXb3Jrb3V0Q29udGVudD5cbiAgICAgICAge3dvcmtvdXQuZXhlcmNpc2VzLm1hcCgoZXhlcmNpc2UpID0+IChcbiAgICAgICAgICA8RXhlcmNpc2VcbiAgICAgICAgICAgIHdvcmtvdXRJZD17d29ya291dC5pZH1cbiAgICAgICAgICAgIGtleT17ZXhlcmNpc2UuaWR9XG4gICAgICAgICAgICBleGVyY2lzZT17ZXhlcmNpc2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgKSl9XG4gICAgICA8L1N0eWxlV29ya291dENvbnRlbnQ+XG4gICAgICA8U3R5bGVXb3Jrb3V0Rm9vdGVyPlxuICAgICAgICA8SWNvbkJ1dHRvbiB2YXJpYW50PVwiY29udGFpbmVkXCIgaWNvbj1cIitcIiBvbkNsaWNrPXthZGRFeGVyY2lzZUhhbmRsZXJ9IC8+XG4gICAgICA8L1N0eWxlV29ya291dEZvb3Rlcj5cbiAgICA8L1N0eWxlV29ya291dFdyYXBwZXI+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBXb3Jrb3V0O1xuIiwiaW1wb3J0IHsgdXNlRHJhZywgdXNlRHJvcCB9IGZyb20gXCJyZWFjdC1kbmRcIjtcbmltcG9ydCB0eXBlIHsgRGF5IH0gZnJvbSBcIi4uL2RhdGEvZGF0YVwiO1xuaW1wb3J0IHVzZURhdGEgZnJvbSBcIi4vdXNlRGF0YVwiO1xuXG5leHBvcnQgdHlwZSBXb3Jrb3V0RHJhZ0l0ZW0gPSB7XG4gIGlkOiBudW1iZXI7XG4gIGRheTogRGF5O1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZVdvcmtvdXREcmFnID0gKHdvcmtvdXRJZDogbnVtYmVyLCBkYXk6IERheSkgPT4ge1xuICByZXR1cm4gdXNlRHJhZzxXb3Jrb3V0RHJhZ0l0ZW0sIHVua25vd24sIHsgaXNXb3Jrb3V0RHJhZ2dpbmc6IGJvb2xlYW4gfT4oe1xuICAgIHR5cGU6IFwid29ya291dFwiLFxuICAgIGl0ZW06IHsgaWQ6IHdvcmtvdXRJZCwgZGF5IH0sXG4gICAgY29sbGVjdDogKG1vbml0b3IpID0+ICh7XG4gICAgICBpc1dvcmtvdXREcmFnZ2luZzogbW9uaXRvci5pc0RyYWdnaW5nKCksXG4gICAgfSksXG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZVdvcmtvdXREcm9wID0gKHRvRGF5OiBEYXkpID0+IHtcbiAgY29uc3QgeyBkaXNwYXRjaCB9ID0gdXNlRGF0YSgpO1xuXG4gIHJldHVybiB1c2VEcm9wPFdvcmtvdXREcmFnSXRlbSwgdm9pZCwgeyBpc1dvcmtvdXREcm9wT3ZlcjogYm9vbGVhbiB9Pih7XG4gICAgYWNjZXB0OiBcIndvcmtvdXRcIixcbiAgICBkcm9wOiAoaXRlbSkgPT4ge1xuICAgICAgZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBcIk1PVkVfV09SS09VVFwiLFxuICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgd29ya291dElkOiBpdGVtLmlkLFxuICAgICAgICAgIGZyb21EYXk6IGl0ZW0uZGF5LFxuICAgICAgICAgIHRvRGF5OiB0b0RheSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgY29sbGVjdDogKG1vbml0b3IpID0+ICh7XG4gICAgICBpc1dvcmtvdXREcm9wT3ZlcjogbW9uaXRvci5pc092ZXIoKSxcbiAgICB9KSxcbiAgfSk7XG59O1xuIiwiaW1wb3J0IHtcbiAgU3R5bGVkV2Vla0RheUNvbnRlbnQsXG4gIFN0eWxlZFdlZWtEYXlIZWFkZXIsXG4gIFN0eWxlZFdlZWtEYXlUaXRsZSxcbiAgU3R5bGVkV2Vla0RheVdyYXBwZXIsXG59IGZyb20gXCIuL1dlZWtEYXkuc3R5bGVkXCI7XG5pbXBvcnQgeyBnZXREYXRlRGF0YSB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi91dGlscy9kYXRlVGltZVwiO1xuaW1wb3J0IEljb25CdXR0b24gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2NvbXBvbmVudHMvQnV0dG9uL0ljb25CdXR0b25cIjtcbmltcG9ydCBXb3Jrb3V0IGZyb20gXCIuLi8uLi9Xb3Jrb3V0L1dvcmtvdXRcIjtcbmltcG9ydCB7IHVzZVdvcmtvdXREcm9wIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2hvb2tzL3VzZVdvcmtvdXREcm9nQW5kRHJhZ1wiO1xuaW1wb3J0IHR5cGUgeyBJV29ya291dCB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9kYXRhL2RhdGFcIjtcblxudHlwZSBXZWVrRGF5UHJvcHMgPSB7XG4gIGRheTogRGF0ZTtcbiAgd29ya291dHM6IElXb3Jrb3V0W107XG4gIGFkZGFibGU/OiBib29sZWFuO1xufTtcblxuY29uc3QgV2Vla0RheTogUmVhY3QuRkM8V2Vla0RheVByb3BzPiA9ICh7IGRheSwgYWRkYWJsZSwgd29ya291dHMgfSkgPT4ge1xuICBjb25zdCBkYXlEYXRhID0gZ2V0RGF0ZURhdGEoZGF5KTtcblxuICBjb25zdCBhZGRXb3Jrb3V0SGFuZGxlciA9ICgpID0+IHtcbiAgICBhbGVydChcIm5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgfTtcblxuICBjb25zdCBbeyBpc1dvcmtvdXREcm9wT3ZlciB9LCB3ZWVrZGF5RHJvcFJlZl0gPSB1c2VXb3Jrb3V0RHJvcChcbiAgICBkYXlEYXRhLndlZWtEYXksXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkV2Vla0RheVdyYXBwZXJcbiAgICAgIHJlZj17d2Vla2RheURyb3BSZWZ9XG4gICAgICBzdHlsZT17e1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGlzV29ya291dERyb3BPdmVyID8gXCJ2YXIoLS1iZy1oaWdodGxpZ2h0KVwiIDogdW5kZWZpbmVkLFxuICAgICAgfX1cbiAgICA+XG4gICAgICA8U3R5bGVkV2Vla0RheUhlYWRlcj57ZGF5RGF0YS53ZWVrRGF5LnRvVXBwZXJDYXNlKCl9PC9TdHlsZWRXZWVrRGF5SGVhZGVyPlxuICAgICAgPFN0eWxlZFdlZWtEYXlDb250ZW50PlxuICAgICAgICA8U3R5bGVkV2Vla0RheVRpdGxlICRpc0FjdGl2ZT17ZGF5RGF0YS5pc1RvZGF5fT5cbiAgICAgICAgICB7ZGF5RGF0YS5tb250aERheX1cbiAgICAgICAgICB7YWRkYWJsZSAmJiAoXG4gICAgICAgICAgICA8SWNvbkJ1dHRvblxuICAgICAgICAgICAgICB2YXJpYW50PVwiY29udGFpbmVkXCJcbiAgICAgICAgICAgICAgaWNvbj1cIitcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXthZGRXb3Jrb3V0SGFuZGxlcn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9TdHlsZWRXZWVrRGF5VGl0bGU+XG4gICAgICAgIHt3b3Jrb3V0cy5tYXAoKHdvcmtvdXQpID0+IChcbiAgICAgICAgICA8V29ya291dCBkYXk9e2RheURhdGEud2Vla0RheX0ga2V5PXt3b3Jrb3V0LmlkfSB3b3Jrb3V0PXt3b3Jrb3V0fSAvPlxuICAgICAgICApKX1cbiAgICAgIDwvU3R5bGVkV2Vla0RheUNvbnRlbnQ+XG4gICAgPC9TdHlsZWRXZWVrRGF5V3JhcHBlcj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFdlZWtEYXk7XG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuXG5leHBvcnQgY29uc3QgU3R5bGVXZWVrV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiAxMDAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDEwcHg7XG5gO1xuIiwiaW1wb3J0IFdlZWtEYXkgZnJvbSBcIi4vV2Vla0RheS9XZWVrRGF5XCI7XHJcbmltcG9ydCB7IFN0eWxlV2Vla1dyYXBwZXIgfSBmcm9tIFwiLi9XZWVrLnN0eWxlZFwiO1xyXG5pbXBvcnQgeyBnZXRDdXJyZW50V2VlaywgZ2V0RGF0ZURhdGEgfSBmcm9tIFwiLi4vLi4vLi4vLi4vdXRpbHMvZGF0ZVRpbWVcIjtcclxuaW1wb3J0IHVzZURhdGEgZnJvbSBcIi4uLy4uLy4uLy4uL2hvb2tzL3VzZURhdGFcIjtcclxuXHJcbmNvbnN0IFdlZWsgPSAoKSA9PiB7XHJcbiAgY29uc3Qge1xyXG4gICAgc3RhdGU6IHsgd2Vla0RhdGEgfSxcclxuICB9ID0gdXNlRGF0YSgpO1xyXG5cclxuICBjb25zdCBjdXJyZW50V2Vla0RheXMgPSBnZXRDdXJyZW50V2VlaygpO1xyXG5cclxuICBjb25zdCBjdXJyZW50RGF0ZVdpdGhEYXRhID0gY3VycmVudFdlZWtEYXlzLm1hcCgoZGF5KSA9PiB7XHJcbiAgICBjb25zdCBkYXRlRGF0YSA9IGdldERhdGVEYXRhKGRheSk7XHJcblxyXG4gICAgY29uc3Qgd29ya291dHMgPVxyXG4gICAgICB3ZWVrRGF0YS5maW5kKChkYXRhKSA9PiBkYXRhLmRheSA9PT0gZGF0ZURhdGEud2Vla0RheSk/LndvcmtvdXRzID8/IFtdO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGRheSxcclxuICAgICAgd29ya291dHMsXHJcbiAgICB9O1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPFN0eWxlV2Vla1dyYXBwZXI+XHJcbiAgICAgIHtjdXJyZW50RGF0ZVdpdGhEYXRhLm1hcCgoeyBkYXksIHdvcmtvdXRzIH0sIGluZGV4KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgIDxXZWVrRGF5XHJcbiAgICAgICAgICAgIGtleT17ZGF5LnRvRGF0ZVN0cmluZygpfVxyXG4gICAgICAgICAgICBkYXk9e2RheX1cclxuICAgICAgICAgICAgd29ya291dHM9e3dvcmtvdXRzfVxyXG4gICAgICAgICAgICBhZGRhYmxlPXtpbmRleCAlIDIgPT09IDB9XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICk7XHJcbiAgICAgIH0pfVxyXG4gICAgPC9TdHlsZVdlZWtXcmFwcGVyPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBXZWVrO1xyXG4iLCJleHBvcnQgaW50ZXJmYWNlIElFeGVyY2lzZSB7XG4gIGlkOiBudW1iZXI7XG4gIG5hbWU6IHN0cmluZztcbiAgZGV0YWlsczogc3RyaW5nO1xuICBzZXRzOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVdvcmtvdXQge1xuICBpZDogbnVtYmVyO1xuICBuYW1lOiBzdHJpbmc7XG4gIGV4ZXJjaXNlczogSUV4ZXJjaXNlW107XG59XG5cbmV4cG9ydCB0eXBlIERheSA9IFwibW9uXCIgfCBcInR1ZVwiIHwgXCJ3ZWRcIiB8IFwidGh1XCIgfCBcImZyaVwiIHwgXCJzYXRcIiB8IFwic3VuXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVdlZWtEYXkge1xuICBkYXk6IERheTtcbiAgd29ya291dHM6IElXb3Jrb3V0W107XG59XG5cbmNvbnN0IHdlZWtEYXRhOiBJV2Vla0RheVtdID0gW1xuICB7XG4gICAgLy9KdXN0IHVzZSB0aGUgd2Vla2RheSBoZXJlIHRvIGVuc3VyZSB0aGUgd2VlayBhbHdheXMgaGFzIGRhdGEuXG4gICAgZGF5OiBcIm1vblwiLFxuICAgIHdvcmtvdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGlkOiAxLFxuICAgICAgICBuYW1lOiBcIkxlZ3MgQXJlIEZvciBXYWxraW5nLCBOb3QgRm9yIEV4ZXJjaXNlXCIsXG4gICAgICAgIGV4ZXJjaXNlczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAxLFxuICAgICAgICAgICAgbmFtZTogXCJTcXVhdHNcIixcbiAgICAgICAgICAgIGRldGFpbHM6IFwiNTAgbGIgeCA1LCA2MCBsYiB4IDUsIDcwIGxiIHggNVwiLFxuICAgICAgICAgICAgc2V0czogMCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAyLFxuICAgICAgICAgICAgbmFtZTogXCJMdW5nZXNcIixcbiAgICAgICAgICAgIGRldGFpbHM6IFwiMzAgbGIgeCA1LCA0MCBsYiB4IDUsIDUwIGxiIHggNVwiLFxuICAgICAgICAgICAgc2V0czogNixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWQ6IDIsXG4gICAgICAgIG5hbWU6IFwiQ2hlc3QgRGF5XCIsXG4gICAgICAgIGV4ZXJjaXNlczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAzLFxuICAgICAgICAgICAgbmFtZTogXCJCZW5jaCBQcmVzc1wiLFxuICAgICAgICAgICAgZGV0YWlsczogXCI1MCBsYiB4IDUsIDYwIGxiIHggNSwgNzAgbGIgeCA1XCIsXG4gICAgICAgICAgICBzZXRzOiA5LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgeyBpZDogNCwgbmFtZTogXCJQdXNoIFVwc1wiLCBkZXRhaWxzOiBcIkJvZHl3ZWlnaHQgeCAyMFwiLCBzZXRzOiAzIH0sXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBkYXk6IFwidHVlXCIsXG4gICAgd29ya291dHM6IFtdLFxuICB9LFxuICB7XG4gICAgZGF5OiBcIndlZFwiLFxuICAgIHdvcmtvdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGlkOiAzLFxuICAgICAgICBuYW1lOiBcIkJhY2sgRGF5XCIsXG4gICAgICAgIGV4ZXJjaXNlczogW1xuICAgICAgICAgIHsgaWQ6IDUsIG5hbWU6IFwiUHVsbCBVcHNcIiwgZGV0YWlsczogXCJCb2R5d2VpZ2h0IHggOFwiLCBzZXRzOiAzIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWQ6IDYsXG4gICAgICAgICAgICBuYW1lOiBcIkRlYWRsaWZ0c1wiLFxuICAgICAgICAgICAgZGV0YWlsczogXCIxMDAgbGIgeCA1LCAxMjAgbGIgeCA1LCAxNDAgbGIgeCA1XCIsXG4gICAgICAgICAgICBzZXRzOiAxMixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgZGF5OiBcInRodVwiLFxuICAgIHdvcmtvdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGlkOiA0LFxuICAgICAgICBuYW1lOiBcIlNob3VsZGVyIERheVwiLFxuICAgICAgICBleGVyY2lzZXM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZDogNyxcbiAgICAgICAgICAgIG5hbWU6IFwiT3ZlcmhlYWQgUHJlc3NcIixcbiAgICAgICAgICAgIGRldGFpbHM6IFwiNDAgbGIgeCA1LCA1MCBsYiB4IDUsIDYwIGxiIHggNVwiLFxuICAgICAgICAgICAgc2V0czogMTIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZDogOCxcbiAgICAgICAgICAgIG5hbWU6IFwiTGF0ZXJhbCBSYWlzZXNcIixcbiAgICAgICAgICAgIGRldGFpbHM6IFwiMTUgbGIgeCAxNSwgMjAgbGIgeCAxNSwgMjUgbGIgeCAxNSwgMjUgbGIgeCAxNVwiLFxuICAgICAgICAgICAgc2V0czogMyxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgZGF5OiBcImZyaVwiLFxuICAgIHdvcmtvdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGlkOiA1LFxuICAgICAgICBuYW1lOiBcIkFybSBEYXlcIixcbiAgICAgICAgZXhlcmNpc2VzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWQ6IDksXG4gICAgICAgICAgICBuYW1lOiBcIkJpY2VwIEN1cmxzXCIsXG4gICAgICAgICAgICBkZXRhaWxzOiBcIjIwIGxiIHggMTIsIDI1IGxiIHggMTIsIDMwIGxiIHggMTJcIixcbiAgICAgICAgICAgIHNldHM6IDEyLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgeyBpZDogMTAsIG5hbWU6IFwiVHJpY2VwIERpcHNcIiwgZGV0YWlsczogXCJCb2R5d2VpZ2h0IHggMTVcIiwgc2V0czogMyB9LFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgZGF5OiBcInNhdFwiLFxuICAgIHdvcmtvdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGlkOiA2LFxuICAgICAgICBuYW1lOiBcIkNvcmUgRGF5XCIsXG4gICAgICAgIGV4ZXJjaXNlczogW1xuICAgICAgICAgIHsgaWQ6IDExLCBuYW1lOiBcIlBsYW5rc1wiLCBkZXRhaWxzOiBcIjYwIHNlY29uZHMgeCAzXCIsIHNldHM6IDMgfSxcbiAgICAgICAgICB7IGlkOiAxMiwgbmFtZTogXCJSdXNzaWFuIFR3aXN0c1wiLCBkZXRhaWxzOiBcIjIwIGxiIHggMjBcIiwgc2V0czogMyB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAxMyxcbiAgICAgICAgICAgIG5hbWU6IFwiUnVzc2lhbiBUd2lzdHMgQW5kIE5vdCBMZWcgRGF5XCIsXG4gICAgICAgICAgICBkZXRhaWxzOiBcIjIwIGxiIHggMjBcIixcbiAgICAgICAgICAgIHNldHM6IDMsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZDogMTQsXG4gICAgICAgICAgICBuYW1lOiBcIkxlZ3MgZGF5XCIsXG4gICAgICAgICAgICBkZXRhaWxzOiBcIjE1IGxiIHggMTUsIDIwIGxiIHggMTUsIDI1IGxiIHggMTUsIDI1IGxiIHggMTVcIixcbiAgICAgICAgICAgIHNldHM6IDEyLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWQ6IDE1LFxuICAgICAgICAgICAgbmFtZTogXCJSdW5cIixcbiAgICAgICAgICAgIGRldGFpbHM6IFwiNDJrbVwiLFxuICAgICAgICAgICAgc2V0czogMSxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgZGF5OiBcInN1blwiLFxuICAgIHdvcmtvdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGlkOiA3LFxuICAgICAgICBuYW1lOiBcIlJlc3QgRGF5XCIsXG4gICAgICAgIGV4ZXJjaXNlczogW10sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpZDogOCxcbiAgICAgICAgbmFtZTogXCJMZWdzIEFyZSBGb3IgV2Fsa2luZywgTm90IEZvciBFeGVyY2lzZVwiLFxuICAgICAgICBleGVyY2lzZXM6IFtdLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuXTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbmV4cG9ydCBjb25zdCBnZXRXZWVrRGF0YSA9IChkYXRlOiBEYXRlKSA9PiB3ZWVrRGF0YTtcbiIsImltcG9ydCB7IFN0eWxlV29ya291dFNjaGVkdWxlV3JhcHBlciB9IGZyb20gXCIuL1dvcmtvdXRTY2hlZHVsZS5zdHlsZWRcIjtcbmltcG9ydCBXZWVrIGZyb20gXCIuL1dlZWsvV2Vla1wiO1xuaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBnZXRXZWVrRGF0YSB9IGZyb20gXCIuLi8uLi8uLi9kYXRhL2RhdGFcIjtcbmltcG9ydCB1c2VEYXRhIGZyb20gXCIuLi8uLi8uLi9ob29rcy91c2VEYXRhXCI7XG5cbmNvbnN0IFdvcmtvdXRTY2hlZHVsZTogUmVhY3QuRkMgPSAoKSA9PiB7XG4gIGNvbnN0IHsgZGlzcGF0Y2ggfSA9IHVzZURhdGEoKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHdlZWtEYXRhID0gZ2V0V2Vla0RhdGEobmV3IERhdGUoKSk7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiBcIkxPQURfREFUQVwiLCBwYXlsb2FkOiB3ZWVrRGF0YSB9KTtcbiAgfSwgW2Rpc3BhdGNoXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8U3R5bGVXb3Jrb3V0U2NoZWR1bGVXcmFwcGVyPlxuICAgICAgPFdlZWsgLz5cbiAgICA8L1N0eWxlV29ya291dFNjaGVkdWxlV3JhcHBlcj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFdvcmtvdXRTY2hlZHVsZTtcbiIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDInO1xuXG4vKipcbiAqIEFkYXB0ZWQgZnJvbSBSZWFjdDogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvbWFzdGVyL3BhY2thZ2VzL3NoYXJlZC9mb3JtYXRQcm9kRXJyb3JNZXNzYWdlLmpzXG4gKlxuICogRG8gbm90IHJlcXVpcmUgdGhpcyBtb2R1bGUgZGlyZWN0bHkhIFVzZSBub3JtYWwgdGhyb3cgZXJyb3IgY2FsbHMuIFRoZXNlIG1lc3NhZ2VzIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCBlcnJvciBjb2Rlc1xuICogZHVyaW5nIGJ1aWxkLlxuICogQHBhcmFtIHtudW1iZXJ9IGNvZGVcbiAqL1xuZnVuY3Rpb24gZm9ybWF0UHJvZEVycm9yTWVzc2FnZShjb2RlKSB7XG4gIHJldHVybiBcIk1pbmlmaWVkIFJlZHV4IGVycm9yICNcIiArIGNvZGUgKyBcIjsgdmlzaXQgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvRXJyb3JzP2NvZGU9XCIgKyBjb2RlICsgXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgXCIgKyAndXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycy4gJztcbn1cblxuLy8gSW5saW5lZCB2ZXJzaW9uIG9mIHRoZSBgc3ltYm9sLW9ic2VydmFibGVgIHBvbHlmaWxsXG52YXIgJCRvYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLm9ic2VydmFibGUgfHwgJ0BAb2JzZXJ2YWJsZSc7XG59KSgpO1xuXG4vKipcbiAqIFRoZXNlIGFyZSBwcml2YXRlIGFjdGlvbiB0eXBlcyByZXNlcnZlZCBieSBSZWR1eC5cbiAqIEZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB5b3UgbXVzdCByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBJZiB0aGUgY3VycmVudCBzdGF0ZSBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS5cbiAqIERvIG5vdCByZWZlcmVuY2UgdGhlc2UgYWN0aW9uIHR5cGVzIGRpcmVjdGx5IGluIHlvdXIgY29kZS5cbiAqL1xudmFyIHJhbmRvbVN0cmluZyA9IGZ1bmN0aW9uIHJhbmRvbVN0cmluZygpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg3KS5zcGxpdCgnJykuam9pbignLicpO1xufTtcblxudmFyIEFjdGlvblR5cGVzID0ge1xuICBJTklUOiBcIkBAcmVkdXgvSU5JVFwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFJFUExBQ0U6IFwiQEByZWR1eC9SRVBMQUNFXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUFJPQkVfVU5LTk9XTl9BQ1RJT046IGZ1bmN0aW9uIFBST0JFX1VOS05PV05fQUNUSU9OKCkge1xuICAgIHJldHVybiBcIkBAcmVkdXgvUFJPQkVfVU5LTk9XTl9BQ1RJT05cIiArIHJhbmRvbVN0cmluZygpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgdmFyIHByb3RvID0gb2JqO1xuXG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBwcm90bztcbn1cblxuLy8gSW5saW5lZCAvIHNob3J0ZW5lZCB2ZXJzaW9uIG9mIGBraW5kT2ZgIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQva2luZC1vZlxuZnVuY3Rpb24gbWluaUtpbmRPZih2YWwpIHtcbiAgaWYgKHZhbCA9PT0gdm9pZCAwKSByZXR1cm4gJ3VuZGVmaW5lZCc7XG4gIGlmICh2YWwgPT09IG51bGwpIHJldHVybiAnbnVsbCc7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgY2FzZSAnc3ltYm9sJzpcbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICB7XG4gICAgICAgIHJldHVybiB0eXBlO1xuICAgICAgfVxuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkgcmV0dXJuICdhcnJheSc7XG4gIGlmIChpc0RhdGUodmFsKSkgcmV0dXJuICdkYXRlJztcbiAgaWYgKGlzRXJyb3IodmFsKSkgcmV0dXJuICdlcnJvcic7XG4gIHZhciBjb25zdHJ1Y3Rvck5hbWUgPSBjdG9yTmFtZSh2YWwpO1xuXG4gIHN3aXRjaCAoY29uc3RydWN0b3JOYW1lKSB7XG4gICAgY2FzZSAnU3ltYm9sJzpcbiAgICBjYXNlICdQcm9taXNlJzpcbiAgICBjYXNlICdXZWFrTWFwJzpcbiAgICBjYXNlICdXZWFrU2V0JzpcbiAgICBjYXNlICdNYXAnOlxuICAgIGNhc2UgJ1NldCc6XG4gICAgICByZXR1cm4gY29uc3RydWN0b3JOYW1lO1xuICB9IC8vIG90aGVyXG5cblxuICByZXR1cm4gdHlwZS5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMvZywgJycpO1xufVxuXG5mdW5jdGlvbiBjdG9yTmFtZSh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwuY29uc3RydWN0b3IgPT09ICdmdW5jdGlvbicgPyB2YWwuY29uc3RydWN0b3IubmFtZSA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzRXJyb3IodmFsKSB7XG4gIHJldHVybiB2YWwgaW5zdGFuY2VvZiBFcnJvciB8fCB0eXBlb2YgdmFsLm1lc3NhZ2UgPT09ICdzdHJpbmcnICYmIHZhbC5jb25zdHJ1Y3RvciAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLnN0YWNrVHJhY2VMaW1pdCA9PT0gJ251bWJlcic7XG59XG5cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgaWYgKHZhbCBpbnN0YW5jZW9mIERhdGUpIHJldHVybiB0cnVlO1xuICByZXR1cm4gdHlwZW9mIHZhbC50b0RhdGVTdHJpbmcgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbC5nZXREYXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWwuc2V0RGF0ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24ga2luZE9mKHZhbCkge1xuICB2YXIgdHlwZU9mVmFsID0gdHlwZW9mIHZhbDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHR5cGVPZlZhbCA9IG1pbmlLaW5kT2YodmFsKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlT2ZWYWw7XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqXG4gKiAqKldlIHJlY29tbWVuZCB1c2luZyB0aGUgYGNvbmZpZ3VyZVN0b3JlYCBtZXRob2RcbiAqIG9mIHRoZSBgQHJlZHV4anMvdG9vbGtpdGAgcGFja2FnZSoqLCB3aGljaCByZXBsYWNlcyBgY3JlYXRlU3RvcmVgLlxuICpcbiAqIFJlZHV4IFRvb2xraXQgaXMgb3VyIHJlY29tbWVuZGVkIGFwcHJvYWNoIGZvciB3cml0aW5nIFJlZHV4IGxvZ2ljIHRvZGF5LFxuICogaW5jbHVkaW5nIHN0b3JlIHNldHVwLCByZWR1Y2VycywgZGF0YSBmZXRjaGluZywgYW5kIG1vcmUuXG4gKlxuICogKipGb3IgbW9yZSBkZXRhaWxzLCBwbGVhc2UgcmVhZCB0aGlzIFJlZHV4IGRvY3MgcGFnZToqKlxuICogKipodHRwczovL3JlZHV4LmpzLm9yZy9pbnRyb2R1Y3Rpb24vd2h5LXJ0ay1pcy1yZWR1eC10b2RheSoqXG4gKlxuICogYGNvbmZpZ3VyZVN0b3JlYCBmcm9tIFJlZHV4IFRvb2xraXQgaXMgYW4gaW1wcm92ZWQgdmVyc2lvbiBvZiBgY3JlYXRlU3RvcmVgIHRoYXRcbiAqIHNpbXBsaWZpZXMgc2V0dXAgYW5kIGhlbHBzIGF2b2lkIGNvbW1vbiBidWdzLlxuICpcbiAqIFlvdSBzaG91bGQgbm90IGJlIHVzaW5nIHRoZSBgcmVkdXhgIGNvcmUgcGFja2FnZSBieSBpdHNlbGYgdG9kYXksIGV4Y2VwdCBmb3IgbGVhcm5pbmcgcHVycG9zZXMuXG4gKiBUaGUgYGNyZWF0ZVN0b3JlYCBtZXRob2QgZnJvbSB0aGUgY29yZSBgcmVkdXhgIHBhY2thZ2Ugd2lsbCBub3QgYmUgcmVtb3ZlZCwgYnV0IHdlIGVuY291cmFnZVxuICogYWxsIHVzZXJzIHRvIG1pZ3JhdGUgdG8gdXNpbmcgUmVkdXggVG9vbGtpdCBmb3IgYWxsIFJlZHV4IGNvZGUuXG4gKlxuICogSWYgeW91IHdhbnQgdG8gdXNlIGBjcmVhdGVTdG9yZWAgd2l0aG91dCB0aGlzIHZpc3VhbCBkZXByZWNhdGlvbiB3YXJuaW5nLCB1c2VcbiAqIHRoZSBgbGVnYWN5X2NyZWF0ZVN0b3JlYCBpbXBvcnQgaW5zdGVhZDpcbiAqXG4gKiBgaW1wb3J0IHsgbGVnYWN5X2NyZWF0ZVN0b3JlIGFzIGNyZWF0ZVN0b3JlfSBmcm9tICdyZWR1eCdgXG4gKlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICB2YXIgX3JlZjI7XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgwKSA6ICdJdCBsb29rcyBsaWtlIHlvdSBhcmUgcGFzc2luZyBzZXZlcmFsIHN0b3JlIGVuaGFuY2VycyB0byAnICsgJ2NyZWF0ZVN0b3JlKCkuIFRoaXMgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCwgY29tcG9zZSB0aGVtICcgKyAndG9nZXRoZXIgdG8gYSBzaW5nbGUgZnVuY3Rpb24uIFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy90dXRvcmlhbHMvZnVuZGFtZW50YWxzL3BhcnQtNC1zdG9yZSNjcmVhdGluZy1hLXN0b3JlLXdpdGgtZW5oYW5jZXJzIGZvciBhbiBleGFtcGxlLicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZW5oYW5jZXIgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgICBwcmVsb2FkZWRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMSkgOiBcIkV4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKGVuaGFuY2VyKSArIFwiJ1wiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW5oYW5jZXIoY3JlYXRlU3RvcmUpKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDIpIDogXCJFeHBlY3RlZCB0aGUgcm9vdCByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2YocmVkdWNlcikgKyBcIidcIik7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFRoaXMgbWFrZXMgYSBzaGFsbG93IGNvcHkgb2YgY3VycmVudExpc3RlbmVycyBzbyB3ZSBjYW4gdXNlXG4gICAqIG5leHRMaXN0ZW5lcnMgYXMgYSB0ZW1wb3JhcnkgbGlzdCB3aGlsZSBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogVGhpcyBwcmV2ZW50cyBhbnkgYnVncyBhcm91bmQgY29uc3VtZXJzIGNhbGxpbmdcbiAgICogc3Vic2NyaWJlL3Vuc3Vic2NyaWJlIGluIHRoZSBtaWRkbGUgb2YgYSBkaXNwYXRjaC5cbiAgICovXG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMpIDogJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnVGhlIHJlZHVjZXIgaGFzIGFscmVhZHkgcmVjZWl2ZWQgdGhlIHN0YXRlIGFzIGFuIGFyZ3VtZW50LiAnICsgJ1Bhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuICAvKipcbiAgICogQWRkcyBhIGNoYW5nZSBsaXN0ZW5lci4gSXQgd2lsbCBiZSBjYWxsZWQgYW55IHRpbWUgYW4gYWN0aW9uIGlzIGRpc3BhdGNoZWQsXG4gICAqIGFuZCBzb21lIHBhcnQgb2YgdGhlIHN0YXRlIHRyZWUgbWF5IHBvdGVudGlhbGx5IGhhdmUgY2hhbmdlZC4gWW91IG1heSB0aGVuXG4gICAqIGNhbGwgYGdldFN0YXRlKClgIHRvIHJlYWQgdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBpbnNpZGUgdGhlIGNhbGxiYWNrLlxuICAgKlxuICAgKiBZb3UgbWF5IGNhbGwgYGRpc3BhdGNoKClgIGZyb20gYSBjaGFuZ2UgbGlzdGVuZXIsIHdpdGggdGhlIGZvbGxvd2luZ1xuICAgKiBjYXZlYXRzOlxuICAgKlxuICAgKiAxLiBUaGUgc3Vic2NyaXB0aW9ucyBhcmUgc25hcHNob3R0ZWQganVzdCBiZWZvcmUgZXZlcnkgYGRpc3BhdGNoKClgIGNhbGwuXG4gICAqIElmIHlvdSBzdWJzY3JpYmUgb3IgdW5zdWJzY3JpYmUgd2hpbGUgdGhlIGxpc3RlbmVycyBhcmUgYmVpbmcgaW52b2tlZCwgdGhpc1xuICAgKiB3aWxsIG5vdCBoYXZlIGFueSBlZmZlY3Qgb24gdGhlIGBkaXNwYXRjaCgpYCB0aGF0IGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzcy5cbiAgICogSG93ZXZlciwgdGhlIG5leHQgYGRpc3BhdGNoKClgIGNhbGwsIHdoZXRoZXIgbmVzdGVkIG9yIG5vdCwgd2lsbCB1c2UgYSBtb3JlXG4gICAqIHJlY2VudCBzbmFwc2hvdCBvZiB0aGUgc3Vic2NyaXB0aW9uIGxpc3QuXG4gICAqXG4gICAqIDIuIFRoZSBsaXN0ZW5lciBzaG91bGQgbm90IGV4cGVjdCB0byBzZWUgYWxsIHN0YXRlIGNoYW5nZXMsIGFzIHRoZSBzdGF0ZVxuICAgKiBtaWdodCBoYXZlIGJlZW4gdXBkYXRlZCBtdWx0aXBsZSB0aW1lcyBkdXJpbmcgYSBuZXN0ZWQgYGRpc3BhdGNoKClgIGJlZm9yZVxuICAgKiB0aGUgbGlzdGVuZXIgaXMgY2FsbGVkLiBJdCBpcywgaG93ZXZlciwgZ3VhcmFudGVlZCB0aGF0IGFsbCBzdWJzY3JpYmVyc1xuICAgKiByZWdpc3RlcmVkIGJlZm9yZSB0aGUgYGRpc3BhdGNoKClgIHN0YXJ0ZWQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgbGF0ZXN0XG4gICAqIHN0YXRlIGJ5IHRoZSB0aW1lIGl0IGV4aXRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBBIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgb24gZXZlcnkgZGlzcGF0Y2guXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0byByZW1vdmUgdGhpcyBjaGFuZ2UgbGlzdGVuZXIuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNCkgOiBcIkV4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKGxpc3RlbmVyKSArIFwiJ1wiKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNSkgOiAnWW91IG1heSBub3QgY2FsbCBzdG9yZS5zdWJzY3JpYmUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgJyArICdjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgfVxuXG4gICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgIG5leHRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg2KSA6ICdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGkvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgICB2YXIgaW5kZXggPSBuZXh0TGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgY3VycmVudExpc3RlbmVycyA9IG51bGw7XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRGlzcGF0Y2hlcyBhbiBhY3Rpb24uIEl0IGlzIHRoZSBvbmx5IHdheSB0byB0cmlnZ2VyIGEgc3RhdGUgY2hhbmdlLlxuICAgKlxuICAgKiBUaGUgYHJlZHVjZXJgIGZ1bmN0aW9uLCB1c2VkIHRvIGNyZWF0ZSB0aGUgc3RvcmUsIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlXG4gICAqIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGdpdmVuIGBhY3Rpb25gLiBJdHMgcmV0dXJuIHZhbHVlIHdpbGxcbiAgICogYmUgY29uc2lkZXJlZCB0aGUgKipuZXh0Kiogc3RhdGUgb2YgdGhlIHRyZWUsIGFuZCB0aGUgY2hhbmdlIGxpc3RlbmVyc1xuICAgKiB3aWxsIGJlIG5vdGlmaWVkLlxuICAgKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvbmx5IHN1cHBvcnRzIHBsYWluIG9iamVjdCBhY3Rpb25zLiBJZiB5b3Ugd2FudCB0b1xuICAgKiBkaXNwYXRjaCBhIFByb21pc2UsIGFuIE9ic2VydmFibGUsIGEgdGh1bmssIG9yIHNvbWV0aGluZyBlbHNlLCB5b3UgbmVlZCB0b1xuICAgKiB3cmFwIHlvdXIgc3RvcmUgY3JlYXRpbmcgZnVuY3Rpb24gaW50byB0aGUgY29ycmVzcG9uZGluZyBtaWRkbGV3YXJlLiBGb3JcbiAgICogZXhhbXBsZSwgc2VlIHRoZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgYHJlZHV4LXRodW5rYCBwYWNrYWdlLiBFdmVuIHRoZVxuICAgKiBtaWRkbGV3YXJlIHdpbGwgZXZlbnR1YWxseSBkaXNwYXRjaCBwbGFpbiBvYmplY3QgYWN0aW9ucyB1c2luZyB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFjdGlvbiBBIHBsYWluIG9iamVjdCByZXByZXNlbnRpbmcg4oCcd2hhdCBjaGFuZ2Vk4oCdLiBJdCBpc1xuICAgKiBhIGdvb2QgaWRlYSB0byBrZWVwIGFjdGlvbnMgc2VyaWFsaXphYmxlIHNvIHlvdSBjYW4gcmVjb3JkIGFuZCByZXBsYXkgdXNlclxuICAgKiBzZXNzaW9ucywgb3IgdXNlIHRoZSB0aW1lIHRyYXZlbGxpbmcgYHJlZHV4LWRldnRvb2xzYC4gQW4gYWN0aW9uIG11c3QgaGF2ZVxuICAgKiBhIGB0eXBlYCBwcm9wZXJ0eSB3aGljaCBtYXkgbm90IGJlIGB1bmRlZmluZWRgLiBJdCBpcyBhIGdvb2QgaWRlYSB0byB1c2VcbiAgICogc3RyaW5nIGNvbnN0YW50cyBmb3IgYWN0aW9uIHR5cGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBGb3IgY29udmVuaWVuY2UsIHRoZSBzYW1lIGFjdGlvbiBvYmplY3QgeW91IGRpc3BhdGNoZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCwgaWYgeW91IHVzZSBhIGN1c3RvbSBtaWRkbGV3YXJlLCBpdCBtYXkgd3JhcCBgZGlzcGF0Y2goKWAgdG9cbiAgICogcmV0dXJuIHNvbWV0aGluZyBlbHNlIChmb3IgZXhhbXBsZSwgYSBQcm9taXNlIHlvdSBjYW4gYXdhaXQpLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg3KSA6IFwiQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuIEluc3RlYWQsIHRoZSBhY3R1YWwgdHlwZSB3YXM6ICdcIiArIGtpbmRPZihhY3Rpb24pICsgXCInLiBZb3UgbWF5IG5lZWQgdG8gYWRkIG1pZGRsZXdhcmUgdG8geW91ciBzdG9yZSBzZXR1cCB0byBoYW5kbGUgZGlzcGF0Y2hpbmcgb3RoZXIgdmFsdWVzLCBzdWNoIGFzICdyZWR1eC10aHVuaycgdG8gaGFuZGxlIGRpc3BhdGNoaW5nIGZ1bmN0aW9ucy4gU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL3R1dG9yaWFscy9mdW5kYW1lbnRhbHMvcGFydC00LXN0b3JlI21pZGRsZXdhcmUgYW5kIGh0dHBzOi8vcmVkdXguanMub3JnL3R1dG9yaWFscy9mdW5kYW1lbnRhbHMvcGFydC02LWFzeW5jLWxvZ2ljI3VzaW5nLXRoZS1yZWR1eC10aHVuay1taWRkbGV3YXJlIGZvciBleGFtcGxlcy5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDgpIDogJ0FjdGlvbnMgbWF5IG5vdCBoYXZlIGFuIHVuZGVmaW5lZCBcInR5cGVcIiBwcm9wZXJ0eS4gWW91IG1heSBoYXZlIG1pc3NwZWxsZWQgYW4gYWN0aW9uIHR5cGUgc3RyaW5nIGNvbnN0YW50LicpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg5KSA6ICdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTApIDogXCJFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihuZXh0UmVkdWNlcikpO1xuICAgIH1cblxuICAgIGN1cnJlbnRSZWR1Y2VyID0gbmV4dFJlZHVjZXI7IC8vIFRoaXMgYWN0aW9uIGhhcyBhIHNpbWlsaWFyIGVmZmVjdCB0byBBY3Rpb25UeXBlcy5JTklULlxuICAgIC8vIEFueSByZWR1Y2VycyB0aGF0IGV4aXN0ZWQgaW4gYm90aCB0aGUgbmV3IGFuZCBvbGQgcm9vdFJlZHVjZXJcbiAgICAvLyB3aWxsIHJlY2VpdmUgdGhlIHByZXZpb3VzIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAgIC8vIHRoZSBuZXcgc3RhdGUgdHJlZSB3aXRoIGFueSByZWxldmFudCBkYXRhIGZyb20gdGhlIG9sZCBvbmUuXG5cbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5SRVBMQUNFXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEludGVyb3BlcmFiaWxpdHkgcG9pbnQgZm9yIG9ic2VydmFibGUvcmVhY3RpdmUgbGlicmFyaWVzLlxuICAgKiBAcmV0dXJucyB7b2JzZXJ2YWJsZX0gQSBtaW5pbWFsIG9ic2VydmFibGUgb2Ygc3RhdGUgY2hhbmdlcy5cbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgb2JzZXJ2YWJsZSBwcm9wb3NhbDpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9ic2VydmFibGUoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgb3V0ZXJTdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgcmV0dXJuIF9yZWYgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBtaW5pbWFsIG9ic2VydmFibGUgc3Vic2NyaXB0aW9uIG1ldGhvZC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYnNlcnZlciBBbnkgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgYXMgYW4gb2JzZXJ2ZXIuXG4gICAgICAgKiBUaGUgb2JzZXJ2ZXIgb2JqZWN0IHNob3VsZCBoYXZlIGEgYG5leHRgIG1ldGhvZC5cbiAgICAgICAqIEByZXR1cm5zIHtzdWJzY3JpcHRpb259IEFuIG9iamVjdCB3aXRoIGFuIGB1bnN1YnNjcmliZWAgbWV0aG9kIHRoYXQgY2FuXG4gICAgICAgKiBiZSB1c2VkIHRvIHVuc3Vic2NyaWJlIHRoZSBvYnNlcnZhYmxlIGZyb20gdGhlIHN0b3JlLCBhbmQgcHJldmVudCBmdXJ0aGVyXG4gICAgICAgKiBlbWlzc2lvbiBvZiB2YWx1ZXMgZnJvbSB0aGUgb2JzZXJ2YWJsZS5cbiAgICAgICAqL1xuICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYnNlcnZlciAhPT0gJ29iamVjdCcgfHwgb2JzZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMSkgOiBcIkV4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2Yob2JzZXJ2ZXIpICsgXCInXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb2JzZXJ2ZVN0YXRlKCkge1xuICAgICAgICAgIGlmIChvYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGdldFN0YXRlKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBvdXRlclN1YnNjcmliZShvYnNlcnZlU3RhdGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH0gLy8gV2hlbiBhIHN0b3JlIGlzIGNyZWF0ZWQsIGFuIFwiSU5JVFwiIGFjdGlvbiBpcyBkaXNwYXRjaGVkIHNvIHRoYXQgZXZlcnlcbiAgLy8gcmVkdWNlciByZXR1cm5zIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gIC8vIHRoZSBpbml0aWFsIHN0YXRlIHRyZWUuXG5cblxuICBkaXNwYXRjaCh7XG4gICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICB9KTtcbiAgcmV0dXJuIF9yZWYyID0ge1xuICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZSxcbiAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgcmVwbGFjZVJlZHVjZXI6IHJlcGxhY2VSZWR1Y2VyXG4gIH0sIF9yZWYyWyQkb2JzZXJ2YWJsZV0gPSBvYnNlcnZhYmxlLCBfcmVmMjtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIFJlZHV4IHN0b3JlIHRoYXQgaG9sZHMgdGhlIHN0YXRlIHRyZWUuXG4gKlxuICogKipXZSByZWNvbW1lbmQgdXNpbmcgYGNvbmZpZ3VyZVN0b3JlYCBmcm9tIHRoZVxuICogYEByZWR1eGpzL3Rvb2xraXRgIHBhY2thZ2UqKiwgd2hpY2ggcmVwbGFjZXMgYGNyZWF0ZVN0b3JlYDpcbiAqICoqaHR0cHM6Ly9yZWR1eC5qcy5vcmcvaW50cm9kdWN0aW9uL3doeS1ydGstaXMtcmVkdXgtdG9kYXkqKlxuICpcbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuXG52YXIgbGVnYWN5X2NyZWF0ZVN0b3JlID0gY3JlYXRlU3RvcmU7XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxufVxuXG5mdW5jdGlvbiBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSkge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLklOSVQgPyAncHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG5cbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnU3RvcmUgZG9lcyBub3QgaGF2ZSBhIHZhbGlkIHJlZHVjZXIuIE1ha2Ugc3VyZSB0aGUgYXJndW1lbnQgcGFzc2VkICcgKyAndG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLic7XG4gIH1cblxuICBpZiAoIWlzUGxhaW5PYmplY3QoaW5wdXRTdGF0ZSkpIHtcbiAgICByZXR1cm4gXCJUaGUgXCIgKyBhcmd1bWVudE5hbWUgKyBcIiBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFxcXCJcIiArIGtpbmRPZihpbnB1dFN0YXRlKSArIFwiXFxcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBcIiArIChcImtleXM6IFxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFwiVW5leHBlY3RlZCBcIiArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgXCIgXCIgKyAoXCJcXFwiXCIgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIiBmb3VuZCBpbiBcIiArIGFyZ3VtZW50TmFtZSArIFwiLiBcIikgKyBcIkV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIgKyAoXCJcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEyKSA6IFwiVGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gXCIgKyBcIklmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCBcIiArIFwiZXhwbGljaXRseSByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBcIiArIFwibm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvbid0IHdhbnQgdG8gc2V0IGEgdmFsdWUgZm9yIHRoaXMgcmVkdWNlciwgXCIgKyBcInlvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlBST0JFX1VOS05PV05fQUNUSU9OKClcbiAgICB9KSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzKSA6IFwiVGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gXCIgKyAoXCJEb24ndCB0cnkgdG8gaGFuZGxlICdcIiArIEFjdGlvblR5cGVzLklOSVQgKyBcIicgb3Igb3RoZXIgYWN0aW9ucyBpbiBcXFwicmVkdXgvKlxcXCIgXCIpICsgXCJuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBcIiArIFwiY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgXCIgKyBcImluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBcIiArIFwiYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCByZWR1Y2VyIGZ1bmN0aW9ucywgaW50byBhIHNpbmdsZVxuICogcmVkdWNlciBmdW5jdGlvbi4gSXQgd2lsbCBjYWxsIGV2ZXJ5IGNoaWxkIHJlZHVjZXIsIGFuZCBnYXRoZXIgdGhlaXIgcmVzdWx0c1xuICogaW50byBhIHNpbmdsZSBzdGF0ZSBvYmplY3QsIHdob3NlIGtleXMgY29ycmVzcG9uZCB0byB0aGUga2V5cyBvZiB0aGUgcGFzc2VkXG4gKiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVkdWNlcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBjb3JyZXNwb25kIHRvIGRpZmZlcmVudFxuICogcmVkdWNlciBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNvbWJpbmVkIGludG8gb25lLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpblxuICogaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXMgcmVkdWNlcnNgIHN5bnRheC4gVGhlIHJlZHVjZXJzIG1heSBuZXZlciByZXR1cm5cbiAqIHVuZGVmaW5lZCBmb3IgYW55IGFjdGlvbi4gSW5zdGVhZCwgdGhleSBzaG91bGQgcmV0dXJuIHRoZWlyIGluaXRpYWwgc3RhdGVcbiAqIGlmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlbSB3YXMgdW5kZWZpbmVkLCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueVxuICogdW5yZWNvZ25pemVkIGFjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgZXZlcnkgcmVkdWNlciBpbnNpZGUgdGhlXG4gKiBwYXNzZWQgb2JqZWN0LCBhbmQgYnVpbGRzIGEgc3RhdGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcmVkdWNlcktleXNbaV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3YXJuaW5nKFwiTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTsgLy8gVGhpcyBpcyB1c2VkIHRvIG1ha2Ugc3VyZSB3ZSBkb24ndCB3YXJuIGFib3V0IHRoZSBzYW1lXG4gIC8vIGtleXMgbXVsdGlwbGUgdGltZXMuXG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG5cbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfVxuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcblxuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTQpIDogXCJXaGVuIGNhbGxlZCB3aXRoIGFuIGFjdGlvbiBvZiB0eXBlIFwiICsgKGFjdGlvblR5cGUgPyBcIlxcXCJcIiArIFN0cmluZyhhY3Rpb25UeXBlKSArIFwiXFxcIlwiIDogJyh1bmtub3duIHR5cGUpJykgKyBcIiwgdGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBfa2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZC4gXCIgKyBcIlRvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gXCIgKyBcIklmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICAgIH1cblxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cblxuICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhzdGF0ZSkubGVuZ3RoO1xuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvbiBjcmVhdG9ycywgaW50byBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUga2V5cywgYnV0IHdpdGggZXZlcnkgZnVuY3Rpb24gd3JhcHBlZCBpbnRvIGEgYGRpc3BhdGNoYCBjYWxsIHNvIHRoZXlcbiAqIG1heSBiZSBpbnZva2VkIGRpcmVjdGx5LiBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSBtZXRob2QsIGFzIHlvdSBjYW4gY2FsbFxuICogYHN0b3JlLmRpc3BhdGNoKE15QWN0aW9uQ3JlYXRvcnMuZG9Tb21ldGhpbmcoKSlgIHlvdXJzZWxmIGp1c3QgZmluZS5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGFuIGFjdGlvbiBjcmVhdG9yIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCBnZXQgYSBkaXNwYXRjaCB3cmFwcGVkIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2KSA6IFwiYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBidXQgaW5zdGVhZCByZWNlaXZlZDogJ1wiICsga2luZE9mKGFjdGlvbkNyZWF0b3JzKSArIFwiJy4gXCIgKyBcIkRpZCB5b3Ugd3JpdGUgXFxcImltcG9ydCBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIiBpbnN0ZWFkIG9mIFxcXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIj9cIik7XG4gIH1cblxuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBhY3Rpb25DcmVhdG9ycykge1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNSkgOiAnRGlzcGF0Y2hpbmcgd2hpbGUgY29uc3RydWN0aW5nIHlvdXIgbWlkZGxld2FyZSBpcyBub3QgYWxsb3dlZC4gJyArICdPdGhlciBtaWRkbGV3YXJlIHdvdWxkIG5vdCBiZSBhcHBsaWVkIHRvIHRoaXMgZGlzcGF0Y2guJyk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbWlkZGxld2FyZUFQSSA9IHtcbiAgICAgICAgZ2V0U3RhdGU6IHN0b3JlLmdldFN0YXRlLFxuICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgICAgcmV0dXJuIF9kaXNwYXRjaC5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgY2hhaW4gPSBtaWRkbGV3YXJlcy5tYXAoZnVuY3Rpb24gKG1pZGRsZXdhcmUpIHtcbiAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSk7XG4gICAgICB9KTtcbiAgICAgIF9kaXNwYXRjaCA9IGNvbXBvc2UuYXBwbHkodm9pZCAwLCBjaGFpbikoc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgc3RvcmUpLCB7fSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgeyBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzLCBhcHBseU1pZGRsZXdhcmUsIGJpbmRBY3Rpb25DcmVhdG9ycywgY29tYmluZVJlZHVjZXJzLCBjb21wb3NlLCBjcmVhdGVTdG9yZSwgbGVnYWN5X2NyZWF0ZVN0b3JlIH07XG4iLCIvLyBjaGVhcCBsb2Rhc2ggcmVwbGFjZW1lbnRzXG4vKipcbiAqIGRyb3AtaW4gcmVwbGFjZW1lbnQgZm9yIF8uZ2V0XG4gKiBAcGFyYW0gb2JqXG4gKiBAcGFyYW0gcGF0aFxuICogQHBhcmFtIGRlZmF1bHRWYWx1ZVxuICovIGV4cG9ydCBmdW5jdGlvbiBnZXQob2JqLCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgICByZXR1cm4gcGF0aC5zcGxpdCgnLicpLnJlZHVjZSgoYSwgYyk9PmEgJiYgYVtjXSA/IGFbY10gOiBkZWZhdWx0VmFsdWUgfHwgbnVsbFxuICAgICwgb2JqKTtcbn1cbi8qKlxuICogZHJvcC1pbiByZXBsYWNlbWVudCBmb3IgXy53aXRob3V0XG4gKi8gZXhwb3J0IGZ1bmN0aW9uIHdpdGhvdXQoaXRlbXMsIGl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbXMuZmlsdGVyKChpKT0+aSAhPT0gaXRlbVxuICAgICk7XG59XG4vKipcbiAqIGRyb3AtaW4gcmVwbGFjZW1lbnQgZm9yIF8uaXNTdHJpbmdcbiAqIEBwYXJhbSBpbnB1dFxuICovIGV4cG9ydCBmdW5jdGlvbiBpc1N0cmluZyhpbnB1dCkge1xuICAgIHJldHVybiB0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnO1xufVxuLyoqXG4gKiBkcm9wLWluIHJlcGxhY2VtZW50IGZvciBfLmlzU3RyaW5nXG4gKiBAcGFyYW0gaW5wdXRcbiAqLyBleHBvcnQgZnVuY3Rpb24gaXNPYmplY3QoaW5wdXQpIHtcbiAgICByZXR1cm4gdHlwZW9mIGlucHV0ID09PSAnb2JqZWN0Jztcbn1cbi8qKlxuICogcmVwbGFjZW1lbnQgZm9yIF8ueG9yXG4gKiBAcGFyYW0gaXRlbXNBXG4gKiBAcGFyYW0gaXRlbXNCXG4gKi8gZXhwb3J0IGZ1bmN0aW9uIHhvcihpdGVtc0EsIGl0ZW1zQikge1xuICAgIGNvbnN0IG1hcCA9IG5ldyBNYXAoKTtcbiAgICBjb25zdCBpbnNlcnRJdGVtID0gKGl0ZW0pPT57XG4gICAgICAgIG1hcC5zZXQoaXRlbSwgbWFwLmhhcyhpdGVtKSA/IG1hcC5nZXQoaXRlbSkgKyAxIDogMSk7XG4gICAgfTtcbiAgICBpdGVtc0EuZm9yRWFjaChpbnNlcnRJdGVtKTtcbiAgICBpdGVtc0IuZm9yRWFjaChpbnNlcnRJdGVtKTtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBtYXAuZm9yRWFjaCgoY291bnQsIGtleSk9PntcbiAgICAgICAgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogcmVwbGFjZW1lbnQgZm9yIF8uaW50ZXJzZWN0aW9uXG4gKiBAcGFyYW0gaXRlbXNBXG4gKiBAcGFyYW0gaXRlbXNCXG4gKi8gZXhwb3J0IGZ1bmN0aW9uIGludGVyc2VjdGlvbihpdGVtc0EsIGl0ZW1zQikge1xuICAgIHJldHVybiBpdGVtc0EuZmlsdGVyKCh0KT0+aXRlbXNCLmluZGV4T2YodCkgPiAtMVxuICAgICk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWpzX3V0aWxzLmpzLm1hcCIsImV4cG9ydCBjb25zdCBJTklUX0NPT1JEUyA9ICdkbmQtY29yZS9JTklUX0NPT1JEUyc7XG5leHBvcnQgY29uc3QgQkVHSU5fRFJBRyA9ICdkbmQtY29yZS9CRUdJTl9EUkFHJztcbmV4cG9ydCBjb25zdCBQVUJMSVNIX0RSQUdfU09VUkNFID0gJ2RuZC1jb3JlL1BVQkxJU0hfRFJBR19TT1VSQ0UnO1xuZXhwb3J0IGNvbnN0IEhPVkVSID0gJ2RuZC1jb3JlL0hPVkVSJztcbmV4cG9ydCBjb25zdCBEUk9QID0gJ2RuZC1jb3JlL0RST1AnO1xuZXhwb3J0IGNvbnN0IEVORF9EUkFHID0gJ2RuZC1jb3JlL0VORF9EUkFHJztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIiwiaW1wb3J0IHsgSU5JVF9DT09SRFMgfSBmcm9tICcuLi90eXBlcy5qcyc7XG5leHBvcnQgZnVuY3Rpb24gc2V0Q2xpZW50T2Zmc2V0KGNsaWVudE9mZnNldCwgc291cmNlQ2xpZW50T2Zmc2V0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogSU5JVF9DT09SRFMsXG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICAgIHNvdXJjZUNsaWVudE9mZnNldDogc291cmNlQ2xpZW50T2Zmc2V0IHx8IG51bGwsXG4gICAgICAgICAgICBjbGllbnRPZmZzZXQ6IGNsaWVudE9mZnNldCB8fCBudWxsXG4gICAgICAgIH1cbiAgICB9O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXRDbGllbnRPZmZzZXQuanMubWFwIiwiaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnQHJlYWN0LWRuZC9pbnZhcmlhbnQnO1xuaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tICcuLi8uLi91dGlscy9qc191dGlscy5qcyc7XG5pbXBvcnQgeyBzZXRDbGllbnRPZmZzZXQgfSBmcm9tICcuL2xvY2FsL3NldENsaWVudE9mZnNldC5qcyc7XG5pbXBvcnQgeyBCRUdJTl9EUkFHLCBJTklUX0NPT1JEUyB9IGZyb20gJy4vdHlwZXMuanMnO1xuY29uc3QgUmVzZXRDb29yZGluYXRlc0FjdGlvbiA9IHtcbiAgICB0eXBlOiBJTklUX0NPT1JEUyxcbiAgICBwYXlsb2FkOiB7XG4gICAgICAgIGNsaWVudE9mZnNldDogbnVsbCxcbiAgICAgICAgc291cmNlQ2xpZW50T2Zmc2V0OiBudWxsXG4gICAgfVxufTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVCZWdpbkRyYWcobWFuYWdlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiBiZWdpbkRyYWcoc291cmNlSWRzID0gW10sIG9wdGlvbnMgPSB7XG4gICAgICAgIHB1Ymxpc2hTb3VyY2U6IHRydWVcbiAgICB9KSB7XG4gICAgICAgIGNvbnN0IHsgcHVibGlzaFNvdXJjZSA9dHJ1ZSAsIGNsaWVudE9mZnNldCAsIGdldFNvdXJjZUNsaWVudE9mZnNldCAsICB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgbW9uaXRvciA9IG1hbmFnZXIuZ2V0TW9uaXRvcigpO1xuICAgICAgICBjb25zdCByZWdpc3RyeSA9IG1hbmFnZXIuZ2V0UmVnaXN0cnkoKTtcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgY29vcmRpbmF0ZXMgdXNpbmcgdGhlIGNsaWVudCBvZmZzZXRcbiAgICAgICAgbWFuYWdlci5kaXNwYXRjaChzZXRDbGllbnRPZmZzZXQoY2xpZW50T2Zmc2V0KSk7XG4gICAgICAgIHZlcmlmeUludmFyaWFudHMoc291cmNlSWRzLCBtb25pdG9yLCByZWdpc3RyeSk7XG4gICAgICAgIC8vIEdldCB0aGUgZHJhZ2dhYmxlIHNvdXJjZVxuICAgICAgICBjb25zdCBzb3VyY2VJZCA9IGdldERyYWdnYWJsZVNvdXJjZShzb3VyY2VJZHMsIG1vbml0b3IpO1xuICAgICAgICBpZiAoc291cmNlSWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgbWFuYWdlci5kaXNwYXRjaChSZXNldENvb3JkaW5hdGVzQWN0aW9uKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBHZXQgdGhlIHNvdXJjZSBjbGllbnQgb2Zmc2V0XG4gICAgICAgIGxldCBzb3VyY2VDbGllbnRPZmZzZXQgPSBudWxsO1xuICAgICAgICBpZiAoY2xpZW50T2Zmc2V0KSB7XG4gICAgICAgICAgICBpZiAoIWdldFNvdXJjZUNsaWVudE9mZnNldCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZ2V0U291cmNlQ2xpZW50T2Zmc2V0IG11c3QgYmUgZGVmaW5lZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmVyaWZ5R2V0U291cmNlQ2xpZW50T2Zmc2V0SXNGdW5jdGlvbihnZXRTb3VyY2VDbGllbnRPZmZzZXQpO1xuICAgICAgICAgICAgc291cmNlQ2xpZW50T2Zmc2V0ID0gZ2V0U291cmNlQ2xpZW50T2Zmc2V0KHNvdXJjZUlkKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJbml0aWFsaXplIHRoZSBmdWxsIGNvb3JkaW5hdGVzXG4gICAgICAgIG1hbmFnZXIuZGlzcGF0Y2goc2V0Q2xpZW50T2Zmc2V0KGNsaWVudE9mZnNldCwgc291cmNlQ2xpZW50T2Zmc2V0KSk7XG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IHJlZ2lzdHJ5LmdldFNvdXJjZShzb3VyY2VJZCk7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBzb3VyY2UuYmVnaW5EcmFnKG1vbml0b3IsIHNvdXJjZUlkKTtcbiAgICAgICAgLy8gSWYgc291cmNlLmJlZ2luRHJhZyByZXR1cm5zIG51bGwsIHRoaXMgaXMgYW4gaW5kaWNhdG9yIHRvIGNhbmNlbCB0aGUgZHJhZ1xuICAgICAgICBpZiAoaXRlbSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHZlcmlmeUl0ZW1Jc09iamVjdChpdGVtKTtcbiAgICAgICAgcmVnaXN0cnkucGluU291cmNlKHNvdXJjZUlkKTtcbiAgICAgICAgY29uc3QgaXRlbVR5cGUgPSByZWdpc3RyeS5nZXRTb3VyY2VUeXBlKHNvdXJjZUlkKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IEJFR0lOX0RSQUcsXG4gICAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICAgICAgaXRlbVR5cGUsXG4gICAgICAgICAgICAgICAgaXRlbSxcbiAgICAgICAgICAgICAgICBzb3VyY2VJZCxcbiAgICAgICAgICAgICAgICBjbGllbnRPZmZzZXQ6IGNsaWVudE9mZnNldCB8fCBudWxsLFxuICAgICAgICAgICAgICAgIHNvdXJjZUNsaWVudE9mZnNldDogc291cmNlQ2xpZW50T2Zmc2V0IHx8IG51bGwsXG4gICAgICAgICAgICAgICAgaXNTb3VyY2VQdWJsaWM6ICEhcHVibGlzaFNvdXJjZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH07XG59XG5mdW5jdGlvbiB2ZXJpZnlJbnZhcmlhbnRzKHNvdXJjZUlkcywgbW9uaXRvciwgcmVnaXN0cnkpIHtcbiAgICBpbnZhcmlhbnQoIW1vbml0b3IuaXNEcmFnZ2luZygpLCAnQ2Fubm90IGNhbGwgYmVnaW5EcmFnIHdoaWxlIGRyYWdnaW5nLicpO1xuICAgIHNvdXJjZUlkcy5mb3JFYWNoKGZ1bmN0aW9uKHNvdXJjZUlkKSB7XG4gICAgICAgIGludmFyaWFudChyZWdpc3RyeS5nZXRTb3VyY2Uoc291cmNlSWQpLCAnRXhwZWN0ZWQgc291cmNlSWRzIHRvIGJlIHJlZ2lzdGVyZWQuJyk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiB2ZXJpZnlHZXRTb3VyY2VDbGllbnRPZmZzZXRJc0Z1bmN0aW9uKGdldFNvdXJjZUNsaWVudE9mZnNldCkge1xuICAgIGludmFyaWFudCh0eXBlb2YgZ2V0U291cmNlQ2xpZW50T2Zmc2V0ID09PSAnZnVuY3Rpb24nLCAnV2hlbiBjbGllbnRPZmZzZXQgaXMgcHJvdmlkZWQsIGdldFNvdXJjZUNsaWVudE9mZnNldCBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG59XG5mdW5jdGlvbiB2ZXJpZnlJdGVtSXNPYmplY3QoaXRlbSkge1xuICAgIGludmFyaWFudChpc09iamVjdChpdGVtKSwgJ0l0ZW0gbXVzdCBiZSBhbiBvYmplY3QuJyk7XG59XG5mdW5jdGlvbiBnZXREcmFnZ2FibGVTb3VyY2Uoc291cmNlSWRzLCBtb25pdG9yKSB7XG4gICAgbGV0IHNvdXJjZUlkID0gbnVsbDtcbiAgICBmb3IobGV0IGkgPSBzb3VyY2VJZHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pe1xuICAgICAgICBpZiAobW9uaXRvci5jYW5EcmFnU291cmNlKHNvdXJjZUlkc1tpXSkpIHtcbiAgICAgICAgICAgIHNvdXJjZUlkID0gc291cmNlSWRzW2ldO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZUlkO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1iZWdpbkRyYWcuanMubWFwIiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkge1xuICAgIGZvcih2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspe1xuICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcbiAgICAgICAgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICAgICAgICBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uKHN5bSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIG93bktleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJ0ByZWFjdC1kbmQvaW52YXJpYW50JztcbmltcG9ydCB7IGlzT2JqZWN0IH0gZnJvbSAnLi4vLi4vdXRpbHMvanNfdXRpbHMuanMnO1xuaW1wb3J0IHsgRFJPUCB9IGZyb20gJy4vdHlwZXMuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURyb3AobWFuYWdlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiBkcm9wKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBjb25zdCBtb25pdG9yID0gbWFuYWdlci5nZXRNb25pdG9yKCk7XG4gICAgICAgIGNvbnN0IHJlZ2lzdHJ5ID0gbWFuYWdlci5nZXRSZWdpc3RyeSgpO1xuICAgICAgICB2ZXJpZnlJbnZhcmlhbnRzKG1vbml0b3IpO1xuICAgICAgICBjb25zdCB0YXJnZXRJZHMgPSBnZXREcm9wcGFibGVUYXJnZXRzKG1vbml0b3IpO1xuICAgICAgICAvLyBNdWx0aXBsZSBhY3Rpb25zIGFyZSBkaXNwYXRjaGVkIGhlcmUsIHdoaWNoIGlzIHdoeSB0aGlzIGRvZXNuJ3QgcmV0dXJuIGFuIGFjdGlvblxuICAgICAgICB0YXJnZXRJZHMuZm9yRWFjaCgodGFyZ2V0SWQsIGluZGV4KT0+e1xuICAgICAgICAgICAgY29uc3QgZHJvcFJlc3VsdCA9IGRldGVybWluZURyb3BSZXN1bHQodGFyZ2V0SWQsIGluZGV4LCByZWdpc3RyeSwgbW9uaXRvcik7XG4gICAgICAgICAgICBjb25zdCBhY3Rpb24gPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogRFJPUCxcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICAgICAgICAgIGRyb3BSZXN1bHQ6IF9vYmplY3RTcHJlYWQoe30sIG9wdGlvbnMsIGRyb3BSZXN1bHQpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG1hbmFnZXIuZGlzcGF0Y2goYWN0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHZlcmlmeUludmFyaWFudHMobW9uaXRvcikge1xuICAgIGludmFyaWFudChtb25pdG9yLmlzRHJhZ2dpbmcoKSwgJ0Nhbm5vdCBjYWxsIGRyb3Agd2hpbGUgbm90IGRyYWdnaW5nLicpO1xuICAgIGludmFyaWFudCghbW9uaXRvci5kaWREcm9wKCksICdDYW5ub3QgY2FsbCBkcm9wIHR3aWNlIGR1cmluZyBvbmUgZHJhZyBvcGVyYXRpb24uJyk7XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVEcm9wUmVzdWx0KHRhcmdldElkLCBpbmRleCwgcmVnaXN0cnksIG1vbml0b3IpIHtcbiAgICBjb25zdCB0YXJnZXQgPSByZWdpc3RyeS5nZXRUYXJnZXQodGFyZ2V0SWQpO1xuICAgIGxldCBkcm9wUmVzdWx0ID0gdGFyZ2V0ID8gdGFyZ2V0LmRyb3AobW9uaXRvciwgdGFyZ2V0SWQpIDogdW5kZWZpbmVkO1xuICAgIHZlcmlmeURyb3BSZXN1bHRUeXBlKGRyb3BSZXN1bHQpO1xuICAgIGlmICh0eXBlb2YgZHJvcFJlc3VsdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZHJvcFJlc3VsdCA9IGluZGV4ID09PSAwID8ge30gOiBtb25pdG9yLmdldERyb3BSZXN1bHQoKTtcbiAgICB9XG4gICAgcmV0dXJuIGRyb3BSZXN1bHQ7XG59XG5mdW5jdGlvbiB2ZXJpZnlEcm9wUmVzdWx0VHlwZShkcm9wUmVzdWx0KSB7XG4gICAgaW52YXJpYW50KHR5cGVvZiBkcm9wUmVzdWx0ID09PSAndW5kZWZpbmVkJyB8fCBpc09iamVjdChkcm9wUmVzdWx0KSwgJ0Ryb3AgcmVzdWx0IG11c3QgZWl0aGVyIGJlIGFuIG9iamVjdCBvciB1bmRlZmluZWQuJyk7XG59XG5mdW5jdGlvbiBnZXREcm9wcGFibGVUYXJnZXRzKG1vbml0b3IpIHtcbiAgICBjb25zdCB0YXJnZXRJZHMgPSBtb25pdG9yLmdldFRhcmdldElkcygpLmZpbHRlcihtb25pdG9yLmNhbkRyb3BPblRhcmdldCwgbW9uaXRvcik7XG4gICAgdGFyZ2V0SWRzLnJldmVyc2UoKTtcbiAgICByZXR1cm4gdGFyZ2V0SWRzO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kcm9wLmpzLm1hcCIsImltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJ0ByZWFjdC1kbmQvaW52YXJpYW50JztcbmltcG9ydCB7IEVORF9EUkFHIH0gZnJvbSAnLi90eXBlcy5qcyc7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRW5kRHJhZyhtYW5hZ2VyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGVuZERyYWcoKSB7XG4gICAgICAgIGNvbnN0IG1vbml0b3IgPSBtYW5hZ2VyLmdldE1vbml0b3IoKTtcbiAgICAgICAgY29uc3QgcmVnaXN0cnkgPSBtYW5hZ2VyLmdldFJlZ2lzdHJ5KCk7XG4gICAgICAgIHZlcmlmeUlzRHJhZ2dpbmcobW9uaXRvcik7XG4gICAgICAgIGNvbnN0IHNvdXJjZUlkID0gbW9uaXRvci5nZXRTb3VyY2VJZCgpO1xuICAgICAgICBpZiAoc291cmNlSWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3Qgc291cmNlID0gcmVnaXN0cnkuZ2V0U291cmNlKHNvdXJjZUlkLCB0cnVlKTtcbiAgICAgICAgICAgIHNvdXJjZS5lbmREcmFnKG1vbml0b3IsIHNvdXJjZUlkKTtcbiAgICAgICAgICAgIHJlZ2lzdHJ5LnVucGluU291cmNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IEVORF9EUkFHXG4gICAgICAgIH07XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHZlcmlmeUlzRHJhZ2dpbmcobW9uaXRvcikge1xuICAgIGludmFyaWFudChtb25pdG9yLmlzRHJhZ2dpbmcoKSwgJ0Nhbm5vdCBjYWxsIGVuZERyYWcgd2hpbGUgbm90IGRyYWdnaW5nLicpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbmREcmFnLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBtYXRjaGVzVHlwZSh0YXJnZXRUeXBlLCBkcmFnZ2VkSXRlbVR5cGUpIHtcbiAgICBpZiAoZHJhZ2dlZEl0ZW1UeXBlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXRUeXBlID09PSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh0YXJnZXRUeXBlKSA/IHRhcmdldFR5cGUuc29tZSgodCk9PnQgPT09IGRyYWdnZWRJdGVtVHlwZVxuICAgICkgOiB0YXJnZXRUeXBlID09PSBkcmFnZ2VkSXRlbVR5cGU7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hdGNoZXNUeXBlLmpzLm1hcCIsImltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJ0ByZWFjdC1kbmQvaW52YXJpYW50JztcbmltcG9ydCB7IG1hdGNoZXNUeXBlIH0gZnJvbSAnLi4vLi4vdXRpbHMvbWF0Y2hlc1R5cGUuanMnO1xuaW1wb3J0IHsgSE9WRVIgfSBmcm9tICcuL3R5cGVzLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVIb3ZlcihtYW5hZ2VyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGhvdmVyKHRhcmdldElkc0FyZywgeyBjbGllbnRPZmZzZXQgIH0gPSB7fSkge1xuICAgICAgICB2ZXJpZnlUYXJnZXRJZHNJc0FycmF5KHRhcmdldElkc0FyZyk7XG4gICAgICAgIGNvbnN0IHRhcmdldElkcyA9IHRhcmdldElkc0FyZy5zbGljZSgwKTtcbiAgICAgICAgY29uc3QgbW9uaXRvciA9IG1hbmFnZXIuZ2V0TW9uaXRvcigpO1xuICAgICAgICBjb25zdCByZWdpc3RyeSA9IG1hbmFnZXIuZ2V0UmVnaXN0cnkoKTtcbiAgICAgICAgY29uc3QgZHJhZ2dlZEl0ZW1UeXBlID0gbW9uaXRvci5nZXRJdGVtVHlwZSgpO1xuICAgICAgICByZW1vdmVOb25NYXRjaGluZ1RhcmdldElkcyh0YXJnZXRJZHMsIHJlZ2lzdHJ5LCBkcmFnZ2VkSXRlbVR5cGUpO1xuICAgICAgICBjaGVja0ludmFyaWFudHModGFyZ2V0SWRzLCBtb25pdG9yLCByZWdpc3RyeSk7XG4gICAgICAgIGhvdmVyQWxsVGFyZ2V0cyh0YXJnZXRJZHMsIG1vbml0b3IsIHJlZ2lzdHJ5KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IEhPVkVSLFxuICAgICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgICAgIHRhcmdldElkcyxcbiAgICAgICAgICAgICAgICBjbGllbnRPZmZzZXQ6IGNsaWVudE9mZnNldCB8fCBudWxsXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHZlcmlmeVRhcmdldElkc0lzQXJyYXkodGFyZ2V0SWRzQXJnKSB7XG4gICAgaW52YXJpYW50KEFycmF5LmlzQXJyYXkodGFyZ2V0SWRzQXJnKSwgJ0V4cGVjdGVkIHRhcmdldElkcyB0byBiZSBhbiBhcnJheS4nKTtcbn1cbmZ1bmN0aW9uIGNoZWNrSW52YXJpYW50cyh0YXJnZXRJZHMsIG1vbml0b3IsIHJlZ2lzdHJ5KSB7XG4gICAgaW52YXJpYW50KG1vbml0b3IuaXNEcmFnZ2luZygpLCAnQ2Fubm90IGNhbGwgaG92ZXIgd2hpbGUgbm90IGRyYWdnaW5nLicpO1xuICAgIGludmFyaWFudCghbW9uaXRvci5kaWREcm9wKCksICdDYW5ub3QgY2FsbCBob3ZlciBhZnRlciBkcm9wLicpO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0YXJnZXRJZHMubGVuZ3RoOyBpKyspe1xuICAgICAgICBjb25zdCB0YXJnZXRJZCA9IHRhcmdldElkc1tpXTtcbiAgICAgICAgaW52YXJpYW50KHRhcmdldElkcy5sYXN0SW5kZXhPZih0YXJnZXRJZCkgPT09IGksICdFeHBlY3RlZCB0YXJnZXRJZHMgdG8gYmUgdW5pcXVlIGluIHRoZSBwYXNzZWQgYXJyYXkuJyk7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHJlZ2lzdHJ5LmdldFRhcmdldCh0YXJnZXRJZCk7XG4gICAgICAgIGludmFyaWFudCh0YXJnZXQsICdFeHBlY3RlZCB0YXJnZXRJZHMgdG8gYmUgcmVnaXN0ZXJlZC4nKTtcbiAgICB9XG59XG5mdW5jdGlvbiByZW1vdmVOb25NYXRjaGluZ1RhcmdldElkcyh0YXJnZXRJZHMsIHJlZ2lzdHJ5LCBkcmFnZ2VkSXRlbVR5cGUpIHtcbiAgICAvLyBSZW1vdmUgdGhvc2UgdGFyZ2V0SWRzIHRoYXQgZG9uJ3QgbWF0Y2ggdGhlIHRhcmdldFR5cGUuICBUaGlzXG4gICAgLy8gZml4ZXMgc2hhbGxvdyBpc092ZXIgd2hpY2ggd291bGQgb25seSBiZSBub24tc2hhbGxvdyBiZWNhdXNlIG9mXG4gICAgLy8gbm9uLW1hdGNoaW5nIHRhcmdldHMuXG4gICAgZm9yKGxldCBpID0gdGFyZ2V0SWRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKXtcbiAgICAgICAgY29uc3QgdGFyZ2V0SWQgPSB0YXJnZXRJZHNbaV07XG4gICAgICAgIGNvbnN0IHRhcmdldFR5cGUgPSByZWdpc3RyeS5nZXRUYXJnZXRUeXBlKHRhcmdldElkKTtcbiAgICAgICAgaWYgKCFtYXRjaGVzVHlwZSh0YXJnZXRUeXBlLCBkcmFnZ2VkSXRlbVR5cGUpKSB7XG4gICAgICAgICAgICB0YXJnZXRJZHMuc3BsaWNlKGksIDEpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gaG92ZXJBbGxUYXJnZXRzKHRhcmdldElkcywgbW9uaXRvciwgcmVnaXN0cnkpIHtcbiAgICAvLyBGaW5hbGx5IGNhbGwgaG92ZXIgb24gYWxsIG1hdGNoaW5nIHRhcmdldHMuXG4gICAgdGFyZ2V0SWRzLmZvckVhY2goZnVuY3Rpb24odGFyZ2V0SWQpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gcmVnaXN0cnkuZ2V0VGFyZ2V0KHRhcmdldElkKTtcbiAgICAgICAgdGFyZ2V0LmhvdmVyKG1vbml0b3IsIHRhcmdldElkKTtcbiAgICB9KTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aG92ZXIuanMubWFwIiwiaW1wb3J0IHsgUFVCTElTSF9EUkFHX1NPVVJDRSB9IGZyb20gJy4vdHlwZXMuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVB1Ymxpc2hEcmFnU291cmNlKG1hbmFnZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gcHVibGlzaERyYWdTb3VyY2UoKSB7XG4gICAgICAgIGNvbnN0IG1vbml0b3IgPSBtYW5hZ2VyLmdldE1vbml0b3IoKTtcbiAgICAgICAgaWYgKG1vbml0b3IuaXNEcmFnZ2luZygpKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFBVQkxJU0hfRFJBR19TT1VSQ0VcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH07XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXB1Ymxpc2hEcmFnU291cmNlLmpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZURyYWdEcm9wQWN0aW9ucyB9IGZyb20gJy4uL2FjdGlvbnMvZHJhZ0Ryb3AvaW5kZXguanMnO1xuZXhwb3J0IGNsYXNzIERyYWdEcm9wTWFuYWdlckltcGwge1xuICAgIHJlY2VpdmVCYWNrZW5kKGJhY2tlbmQpIHtcbiAgICAgICAgdGhpcy5iYWNrZW5kID0gYmFja2VuZDtcbiAgICB9XG4gICAgZ2V0TW9uaXRvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9uaXRvcjtcbiAgICB9XG4gICAgZ2V0QmFja2VuZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFja2VuZDtcbiAgICB9XG4gICAgZ2V0UmVnaXN0cnkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vbml0b3IucmVnaXN0cnk7XG4gICAgfVxuICAgIGdldEFjdGlvbnMoKSB7XG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdGhpcy1hbGlhcyAqLyBjb25zdCBtYW5hZ2VyID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBkaXNwYXRjaCAgfSA9IHRoaXMuc3RvcmU7XG4gICAgICAgIGZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IpIHtcbiAgICAgICAgICAgIHJldHVybiAoLi4uYXJncyk9PntcbiAgICAgICAgICAgICAgICBjb25zdCBhY3Rpb24gPSBhY3Rpb25DcmVhdG9yLmFwcGx5KG1hbmFnZXIsIGFyZ3MpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYWN0aW9uICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChhY3Rpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWN0aW9ucyA9IGNyZWF0ZURyYWdEcm9wQWN0aW9ucyh0aGlzKTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGFjdGlvbnMpLnJlZHVjZSgoYm91bmRBY3Rpb25zLCBrZXkpPT57XG4gICAgICAgICAgICBjb25zdCBhY3Rpb24gPSBhY3Rpb25zW2tleV07XG4gICAgICAgICAgICBib3VuZEFjdGlvbnNba2V5XSA9IGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbik7XG4gICAgICAgICAgICByZXR1cm4gYm91bmRBY3Rpb25zO1xuICAgICAgICB9LCB7fSk7XG4gICAgfVxuICAgIGRpc3BhdGNoKGFjdGlvbikge1xuICAgICAgICB0aGlzLnN0b3JlLmRpc3BhdGNoKGFjdGlvbik7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHN0b3JlLCBtb25pdG9yKXtcbiAgICAgICAgdGhpcy5pc1NldFVwID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaGFuZGxlUmVmQ291bnRDaGFuZ2UgPSAoKT0+e1xuICAgICAgICAgICAgY29uc3Qgc2hvdWxkU2V0VXAgPSB0aGlzLnN0b3JlLmdldFN0YXRlKCkucmVmQ291bnQgPiAwO1xuICAgICAgICAgICAgaWYgKHRoaXMuYmFja2VuZCkge1xuICAgICAgICAgICAgICAgIGlmIChzaG91bGRTZXRVcCAmJiAhdGhpcy5pc1NldFVwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmFja2VuZC5zZXR1cCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzU2V0VXAgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXNob3VsZFNldFVwICYmIHRoaXMuaXNTZXRVcCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJhY2tlbmQudGVhcmRvd24oKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1NldFVwID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnN0b3JlID0gc3RvcmU7XG4gICAgICAgIHRoaXMubW9uaXRvciA9IG1vbml0b3I7XG4gICAgICAgIHN0b3JlLnN1YnNjcmliZSh0aGlzLmhhbmRsZVJlZkNvdW50Q2hhbmdlKTtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURyYWdEcm9wTWFuYWdlckltcGwuanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlQmVnaW5EcmFnIH0gZnJvbSAnLi9iZWdpbkRyYWcuanMnO1xuaW1wb3J0IHsgY3JlYXRlRHJvcCB9IGZyb20gJy4vZHJvcC5qcyc7XG5pbXBvcnQgeyBjcmVhdGVFbmREcmFnIH0gZnJvbSAnLi9lbmREcmFnLmpzJztcbmltcG9ydCB7IGNyZWF0ZUhvdmVyIH0gZnJvbSAnLi9ob3Zlci5qcyc7XG5pbXBvcnQgeyBjcmVhdGVQdWJsaXNoRHJhZ1NvdXJjZSB9IGZyb20gJy4vcHVibGlzaERyYWdTb3VyY2UuanMnO1xuZXhwb3J0ICogZnJvbSAnLi90eXBlcy5qcyc7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRHJhZ0Ryb3BBY3Rpb25zKG1hbmFnZXIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBiZWdpbkRyYWc6IGNyZWF0ZUJlZ2luRHJhZyhtYW5hZ2VyKSxcbiAgICAgICAgcHVibGlzaERyYWdTb3VyY2U6IGNyZWF0ZVB1Ymxpc2hEcmFnU291cmNlKG1hbmFnZXIpLFxuICAgICAgICBob3ZlcjogY3JlYXRlSG92ZXIobWFuYWdlciksXG4gICAgICAgIGRyb3A6IGNyZWF0ZURyb3AobWFuYWdlciksXG4gICAgICAgIGVuZERyYWc6IGNyZWF0ZUVuZERyYWcobWFuYWdlcilcbiAgICB9O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCIvKipcbiAqIENvb3JkaW5hdGUgYWRkaXRpb25cbiAqIEBwYXJhbSBhIFRoZSBmaXJzdCBjb29yZGluYXRlXG4gKiBAcGFyYW0gYiBUaGUgc2Vjb25kIGNvb3JkaW5hdGVcbiAqLyBleHBvcnQgZnVuY3Rpb24gYWRkKGEsIGIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiBhLnggKyBiLngsXG4gICAgICAgIHk6IGEueSArIGIueVxuICAgIH07XG59XG4vKipcbiAqIENvb3JkaW5hdGUgc3VidHJhY3Rpb25cbiAqIEBwYXJhbSBhIFRoZSBmaXJzdCBjb29yZGluYXRlXG4gKiBAcGFyYW0gYiBUaGUgc2Vjb25kIGNvb3JkaW5hdGVcbiAqLyBleHBvcnQgZnVuY3Rpb24gc3VidHJhY3QoYSwgYikge1xuICAgIHJldHVybiB7XG4gICAgICAgIHg6IGEueCAtIGIueCxcbiAgICAgICAgeTogYS55IC0gYi55XG4gICAgfTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgY2FydGVzaWFuIGRpc3RhbmNlIG9mIHRoZSBkcmFnIHNvdXJjZSBjb21wb25lbnQncyBwb3NpdGlvbiwgYmFzZWQgb24gaXRzIHBvc2l0aW9uXG4gKiBhdCB0aGUgdGltZSB3aGVuIHRoZSBjdXJyZW50IGRyYWcgb3BlcmF0aW9uIGhhcyBzdGFydGVkLCBhbmQgdGhlIG1vdmVtZW50IGRpZmZlcmVuY2UuXG4gKlxuICogUmV0dXJucyBudWxsIGlmIG5vIGl0ZW0gaXMgYmVpbmcgZHJhZ2dlZC5cbiAqXG4gKiBAcGFyYW0gc3RhdGUgVGhlIG9mZnNldCBzdGF0ZSB0byBjb21wdXRlIGZyb21cbiAqLyBleHBvcnQgZnVuY3Rpb24gZ2V0U291cmNlQ2xpZW50T2Zmc2V0KHN0YXRlKSB7XG4gICAgY29uc3QgeyBjbGllbnRPZmZzZXQgLCBpbml0aWFsQ2xpZW50T2Zmc2V0ICwgaW5pdGlhbFNvdXJjZUNsaWVudE9mZnNldCAgfSA9IHN0YXRlO1xuICAgIGlmICghY2xpZW50T2Zmc2V0IHx8ICFpbml0aWFsQ2xpZW50T2Zmc2V0IHx8ICFpbml0aWFsU291cmNlQ2xpZW50T2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gc3VidHJhY3QoYWRkKGNsaWVudE9mZnNldCwgaW5pdGlhbFNvdXJjZUNsaWVudE9mZnNldCksIGluaXRpYWxDbGllbnRPZmZzZXQpO1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIHRoZSB4LHkgb2Zmc2V0IGJldHdlZW4gdGhlIGNsaWVudCBvZmZzZXQgYW5kIHRoZSBpbml0aWFsIGNsaWVudCBvZmZzZXRcbiAqXG4gKiBAcGFyYW0gc3RhdGUgVGhlIG9mZnNldCBzdGF0ZSB0byBjb21wdXRlIGZyb21cbiAqLyBleHBvcnQgZnVuY3Rpb24gZ2V0RGlmZmVyZW5jZUZyb21Jbml0aWFsT2Zmc2V0KHN0YXRlKSB7XG4gICAgY29uc3QgeyBjbGllbnRPZmZzZXQgLCBpbml0aWFsQ2xpZW50T2Zmc2V0ICB9ID0gc3RhdGU7XG4gICAgaWYgKCFjbGllbnRPZmZzZXQgfHwgIWluaXRpYWxDbGllbnRPZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBzdWJ0cmFjdChjbGllbnRPZmZzZXQsIGluaXRpYWxDbGllbnRPZmZzZXQpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb29yZHMuanMubWFwIiwiaW1wb3J0IHsgaW50ZXJzZWN0aW9uIH0gZnJvbSAnLi9qc191dGlscy5qcyc7XG5leHBvcnQgY29uc3QgTk9ORSA9IFtdO1xuZXhwb3J0IGNvbnN0IEFMTCA9IFtdO1xuTk9ORS5fX0lTX05PTkVfXyA9IHRydWU7XG5BTEwuX19JU19BTExfXyA9IHRydWU7XG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGdpdmVuIGhhbmRsZXIgSURzIGFyZSBkaXJ0eSBvciBub3QuXG4gKlxuICogQHBhcmFtIGRpcnR5SWRzIFRoZSBzZXQgb2YgZGlydHkgaGFuZGxlciBpZHNcbiAqIEBwYXJhbSBoYW5kbGVySWRzIFRoZSBzZXQgb2YgaGFuZGxlciBpZHMgdG8gY2hlY2tcbiAqLyBleHBvcnQgZnVuY3Rpb24gYXJlRGlydHkoZGlydHlJZHMsIGhhbmRsZXJJZHMpIHtcbiAgICBpZiAoZGlydHlJZHMgPT09IE5PTkUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoZGlydHlJZHMgPT09IEFMTCB8fCB0eXBlb2YgaGFuZGxlcklkcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNvbnN0IGNvbW1vbklkcyA9IGludGVyc2VjdGlvbihoYW5kbGVySWRzLCBkaXJ0eUlkcyk7XG4gICAgcmV0dXJuIGNvbW1vbklkcy5sZW5ndGggPiAwO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXJ0aW5lc3MuanMubWFwIiwiaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnQHJlYWN0LWRuZC9pbnZhcmlhbnQnO1xuaW1wb3J0IHsgZ2V0RGlmZmVyZW5jZUZyb21Jbml0aWFsT2Zmc2V0LCBnZXRTb3VyY2VDbGllbnRPZmZzZXQgfSBmcm9tICcuLi91dGlscy9jb29yZHMuanMnO1xuaW1wb3J0IHsgYXJlRGlydHkgfSBmcm9tICcuLi91dGlscy9kaXJ0aW5lc3MuanMnO1xuaW1wb3J0IHsgbWF0Y2hlc1R5cGUgfSBmcm9tICcuLi91dGlscy9tYXRjaGVzVHlwZS5qcyc7XG5leHBvcnQgY2xhc3MgRHJhZ0Ryb3BNb25pdG9ySW1wbCB7XG4gICAgc3Vic2NyaWJlVG9TdGF0ZUNoYW5nZShsaXN0ZW5lciwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHsgaGFuZGxlcklkcyAgfSA9IG9wdGlvbnM7XG4gICAgICAgIGludmFyaWFudCh0eXBlb2YgbGlzdGVuZXIgPT09ICdmdW5jdGlvbicsICdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgICAgIGludmFyaWFudCh0eXBlb2YgaGFuZGxlcklkcyA9PT0gJ3VuZGVmaW5lZCcgfHwgQXJyYXkuaXNBcnJheShoYW5kbGVySWRzKSwgJ2hhbmRsZXJJZHMsIHdoZW4gc3BlY2lmaWVkLCBtdXN0IGJlIGFuIGFycmF5IG9mIHN0cmluZ3MuJyk7XG4gICAgICAgIGxldCBwcmV2U3RhdGVJZCA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5zdGF0ZUlkO1xuICAgICAgICBjb25zdCBoYW5kbGVDaGFuZ2UgPSAoKT0+e1xuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50U3RhdGVJZCA9IHN0YXRlLnN0YXRlSWQ7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhblNraXBMaXN0ZW5lciA9IGN1cnJlbnRTdGF0ZUlkID09PSBwcmV2U3RhdGVJZCB8fCBjdXJyZW50U3RhdGVJZCA9PT0gcHJldlN0YXRlSWQgKyAxICYmICFhcmVEaXJ0eShzdGF0ZS5kaXJ0eUhhbmRsZXJJZHMsIGhhbmRsZXJJZHMpO1xuICAgICAgICAgICAgICAgIGlmICghY2FuU2tpcExpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBmaW5hbGx5e1xuICAgICAgICAgICAgICAgIHByZXZTdGF0ZUlkID0gY3VycmVudFN0YXRlSWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JlLnN1YnNjcmliZShoYW5kbGVDaGFuZ2UpO1xuICAgIH1cbiAgICBzdWJzY3JpYmVUb09mZnNldENoYW5nZShsaXN0ZW5lcikge1xuICAgICAgICBpbnZhcmlhbnQodHlwZW9mIGxpc3RlbmVyID09PSAnZnVuY3Rpb24nLCAnbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICAgICAgICBsZXQgcHJldmlvdXNTdGF0ZSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5kcmFnT2Zmc2V0O1xuICAgICAgICBjb25zdCBoYW5kbGVDaGFuZ2UgPSAoKT0+e1xuICAgICAgICAgICAgY29uc3QgbmV4dFN0YXRlID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmRyYWdPZmZzZXQ7XG4gICAgICAgICAgICBpZiAobmV4dFN0YXRlID09PSBwcmV2aW91c1N0YXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJldmlvdXNTdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICAgICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JlLnN1YnNjcmliZShoYW5kbGVDaGFuZ2UpO1xuICAgIH1cbiAgICBjYW5EcmFnU291cmNlKHNvdXJjZUlkKSB7XG4gICAgICAgIGlmICghc291cmNlSWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzb3VyY2UgPSB0aGlzLnJlZ2lzdHJ5LmdldFNvdXJjZShzb3VyY2VJZCk7XG4gICAgICAgIGludmFyaWFudChzb3VyY2UsIGBFeHBlY3RlZCB0byBmaW5kIGEgdmFsaWQgc291cmNlLiBzb3VyY2VJZD0ke3NvdXJjZUlkfWApO1xuICAgICAgICBpZiAodGhpcy5pc0RyYWdnaW5nKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc291cmNlLmNhbkRyYWcodGhpcywgc291cmNlSWQpO1xuICAgIH1cbiAgICBjYW5Ecm9wT25UYXJnZXQodGFyZ2V0SWQpIHtcbiAgICAgICAgLy8gdW5kZWZpbmVkIG9uIGluaXRpYWwgcmVuZGVyXG4gICAgICAgIGlmICghdGFyZ2V0SWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLnJlZ2lzdHJ5LmdldFRhcmdldCh0YXJnZXRJZCk7XG4gICAgICAgIGludmFyaWFudCh0YXJnZXQsIGBFeHBlY3RlZCB0byBmaW5kIGEgdmFsaWQgdGFyZ2V0LiB0YXJnZXRJZD0ke3RhcmdldElkfWApO1xuICAgICAgICBpZiAoIXRoaXMuaXNEcmFnZ2luZygpIHx8IHRoaXMuZGlkRHJvcCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGFyZ2V0VHlwZSA9IHRoaXMucmVnaXN0cnkuZ2V0VGFyZ2V0VHlwZSh0YXJnZXRJZCk7XG4gICAgICAgIGNvbnN0IGRyYWdnZWRJdGVtVHlwZSA9IHRoaXMuZ2V0SXRlbVR5cGUoKTtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXNUeXBlKHRhcmdldFR5cGUsIGRyYWdnZWRJdGVtVHlwZSkgJiYgdGFyZ2V0LmNhbkRyb3AodGhpcywgdGFyZ2V0SWQpO1xuICAgIH1cbiAgICBpc0RyYWdnaW5nKCkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbih0aGlzLmdldEl0ZW1UeXBlKCkpO1xuICAgIH1cbiAgICBpc0RyYWdnaW5nU291cmNlKHNvdXJjZUlkKSB7XG4gICAgICAgIC8vIHVuZGVmaW5lZCBvbiBpbml0aWFsIHJlbmRlclxuICAgICAgICBpZiAoIXNvdXJjZUlkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc291cmNlID0gdGhpcy5yZWdpc3RyeS5nZXRTb3VyY2Uoc291cmNlSWQsIHRydWUpO1xuICAgICAgICBpbnZhcmlhbnQoc291cmNlLCBgRXhwZWN0ZWQgdG8gZmluZCBhIHZhbGlkIHNvdXJjZS4gc291cmNlSWQ9JHtzb3VyY2VJZH1gKTtcbiAgICAgICAgaWYgKCF0aGlzLmlzRHJhZ2dpbmcoKSB8fCAhdGhpcy5pc1NvdXJjZVB1YmxpYygpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc291cmNlVHlwZSA9IHRoaXMucmVnaXN0cnkuZ2V0U291cmNlVHlwZShzb3VyY2VJZCk7XG4gICAgICAgIGNvbnN0IGRyYWdnZWRJdGVtVHlwZSA9IHRoaXMuZ2V0SXRlbVR5cGUoKTtcbiAgICAgICAgaWYgKHNvdXJjZVR5cGUgIT09IGRyYWdnZWRJdGVtVHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzb3VyY2UuaXNEcmFnZ2luZyh0aGlzLCBzb3VyY2VJZCk7XG4gICAgfVxuICAgIGlzT3ZlclRhcmdldCh0YXJnZXRJZCwgb3B0aW9ucyA9IHtcbiAgICAgICAgc2hhbGxvdzogZmFsc2VcbiAgICB9KSB7XG4gICAgICAgIC8vIHVuZGVmaW5lZCBvbiBpbml0aWFsIHJlbmRlclxuICAgICAgICBpZiAoIXRhcmdldElkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBzaGFsbG93ICB9ID0gb3B0aW9ucztcbiAgICAgICAgaWYgKCF0aGlzLmlzRHJhZ2dpbmcoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRhcmdldFR5cGUgPSB0aGlzLnJlZ2lzdHJ5LmdldFRhcmdldFR5cGUodGFyZ2V0SWQpO1xuICAgICAgICBjb25zdCBkcmFnZ2VkSXRlbVR5cGUgPSB0aGlzLmdldEl0ZW1UeXBlKCk7XG4gICAgICAgIGlmIChkcmFnZ2VkSXRlbVR5cGUgJiYgIW1hdGNoZXNUeXBlKHRhcmdldFR5cGUsIGRyYWdnZWRJdGVtVHlwZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0YXJnZXRJZHMgPSB0aGlzLmdldFRhcmdldElkcygpO1xuICAgICAgICBpZiAoIXRhcmdldElkcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbmRleCA9IHRhcmdldElkcy5pbmRleE9mKHRhcmdldElkKTtcbiAgICAgICAgaWYgKHNoYWxsb3cpIHtcbiAgICAgICAgICAgIHJldHVybiBpbmRleCA9PT0gdGFyZ2V0SWRzLmxlbmd0aCAtIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaW5kZXggPiAtMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRJdGVtVHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5kcmFnT3BlcmF0aW9uLml0ZW1UeXBlO1xuICAgIH1cbiAgICBnZXRJdGVtKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmRyYWdPcGVyYXRpb24uaXRlbTtcbiAgICB9XG4gICAgZ2V0U291cmNlSWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JlLmdldFN0YXRlKCkuZHJhZ09wZXJhdGlvbi5zb3VyY2VJZDtcbiAgICB9XG4gICAgZ2V0VGFyZ2V0SWRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmRyYWdPcGVyYXRpb24udGFyZ2V0SWRzO1xuICAgIH1cbiAgICBnZXREcm9wUmVzdWx0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmRyYWdPcGVyYXRpb24uZHJvcFJlc3VsdDtcbiAgICB9XG4gICAgZGlkRHJvcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5kcmFnT3BlcmF0aW9uLmRpZERyb3A7XG4gICAgfVxuICAgIGlzU291cmNlUHVibGljKCkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbih0aGlzLnN0b3JlLmdldFN0YXRlKCkuZHJhZ09wZXJhdGlvbi5pc1NvdXJjZVB1YmxpYyk7XG4gICAgfVxuICAgIGdldEluaXRpYWxDbGllbnRPZmZzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JlLmdldFN0YXRlKCkuZHJhZ09mZnNldC5pbml0aWFsQ2xpZW50T2Zmc2V0O1xuICAgIH1cbiAgICBnZXRJbml0aWFsU291cmNlQ2xpZW50T2Zmc2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmRyYWdPZmZzZXQuaW5pdGlhbFNvdXJjZUNsaWVudE9mZnNldDtcbiAgICB9XG4gICAgZ2V0Q2xpZW50T2Zmc2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmRyYWdPZmZzZXQuY2xpZW50T2Zmc2V0O1xuICAgIH1cbiAgICBnZXRTb3VyY2VDbGllbnRPZmZzZXQoKSB7XG4gICAgICAgIHJldHVybiBnZXRTb3VyY2VDbGllbnRPZmZzZXQodGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmRyYWdPZmZzZXQpO1xuICAgIH1cbiAgICBnZXREaWZmZXJlbmNlRnJvbUluaXRpYWxPZmZzZXQoKSB7XG4gICAgICAgIHJldHVybiBnZXREaWZmZXJlbmNlRnJvbUluaXRpYWxPZmZzZXQodGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmRyYWdPZmZzZXQpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihzdG9yZSwgcmVnaXN0cnkpe1xuICAgICAgICB0aGlzLnN0b3JlID0gc3RvcmU7XG4gICAgICAgIHRoaXMucmVnaXN0cnkgPSByZWdpc3RyeTtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURyYWdEcm9wTW9uaXRvckltcGwuanMubWFwIiwiLy8gU2FmYXJpIDYgYW5kIDYuMSBmb3IgZGVza3RvcCwgaVBhZCwgYW5kIGlQaG9uZSBhcmUgdGhlIG9ubHkgYnJvd3NlcnMgdGhhdFxuLy8gaGF2ZSBXZWJLaXRNdXRhdGlvbk9ic2VydmVyIGJ1dCBub3QgdW4tcHJlZml4ZWQgTXV0YXRpb25PYnNlcnZlci5cbi8vIE11c3QgdXNlIGBnbG9iYWxgIG9yIGBzZWxmYCBpbnN0ZWFkIG9mIGB3aW5kb3dgIHRvIHdvcmsgaW4gYm90aCBmcmFtZXMgYW5kIHdlYlxuLy8gd29ya2Vycy4gYGdsb2JhbGAgaXMgYSBwcm92aXNpb24gb2YgQnJvd3NlcmlmeSwgTXIsIE1ycywgb3IgTW9wLlxuLyogZ2xvYmFscyBzZWxmICovIGNvbnN0IHNjb3BlID0gdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiBzZWxmO1xuY29uc3QgQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIgPSBzY29wZS5NdXRhdGlvbk9ic2VydmVyIHx8IHNjb3BlLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG5leHBvcnQgZnVuY3Rpb24gbWFrZVJlcXVlc3RDYWxsRnJvbVRpbWVyKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHJlcXVlc3RDYWxsKCkge1xuICAgICAgICAvLyBXZSBkaXNwYXRjaCBhIHRpbWVvdXQgd2l0aCBhIHNwZWNpZmllZCBkZWxheSBvZiAwIGZvciBlbmdpbmVzIHRoYXRcbiAgICAgICAgLy8gY2FuIHJlbGlhYmx5IGFjY29tbW9kYXRlIHRoYXQgcmVxdWVzdC4gVGhpcyB3aWxsIHVzdWFsbHkgYmUgc25hcHBlZFxuICAgICAgICAvLyB0byBhIDQgbWlsaXNlY29uZCBkZWxheSwgYnV0IG9uY2Ugd2UncmUgZmx1c2hpbmcsIHRoZXJlJ3Mgbm8gZGVsYXlcbiAgICAgICAgLy8gYmV0d2VlbiBldmVudHMuXG4gICAgICAgIGNvbnN0IHRpbWVvdXRIYW5kbGUgPSBzZXRUaW1lb3V0KGhhbmRsZVRpbWVyLCAwKTtcbiAgICAgICAgLy8gSG93ZXZlciwgc2luY2UgdGhpcyB0aW1lciBnZXRzIGZyZXF1ZW50bHkgZHJvcHBlZCBpbiBGaXJlZm94XG4gICAgICAgIC8vIHdvcmtlcnMsIHdlIGVubGlzdCBhbiBpbnRlcnZhbCBoYW5kbGUgdGhhdCB3aWxsIHRyeSB0byBmaXJlXG4gICAgICAgIC8vIGFuIGV2ZW50IDIwIHRpbWVzIHBlciBzZWNvbmQgdW50aWwgaXQgc3VjY2VlZHMuXG4gICAgICAgIGNvbnN0IGludGVydmFsSGFuZGxlID0gc2V0SW50ZXJ2YWwoaGFuZGxlVGltZXIsIDUwKTtcbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlVGltZXIoKSB7XG4gICAgICAgICAgICAvLyBXaGljaGV2ZXIgdGltZXIgc3VjY2VlZHMgd2lsbCBjYW5jZWwgYm90aCB0aW1lcnMgYW5kXG4gICAgICAgICAgICAvLyBleGVjdXRlIHRoZSBjYWxsYmFjay5cbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SGFuZGxlKTtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxIYW5kbGUpO1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgIH07XG59XG4vLyBUbyByZXF1ZXN0IGEgaGlnaCBwcmlvcml0eSBldmVudCwgd2UgaW5kdWNlIGEgbXV0YXRpb24gb2JzZXJ2ZXIgYnkgdG9nZ2xpbmdcbi8vIHRoZSB0ZXh0IG9mIGEgdGV4dCBub2RlIGJldHdlZW4gXCIxXCIgYW5kIFwiLTFcIi5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlUmVxdWVzdENhbGxGcm9tTXV0YXRpb25PYnNlcnZlcihjYWxsYmFjaykge1xuICAgIGxldCB0b2dnbGUgPSAxO1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyKGNhbGxiYWNrKTtcbiAgICBjb25zdCBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG9ic2VydmVyLm9ic2VydmUobm9kZSwge1xuICAgICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHJlcXVlc3RDYWxsKCkge1xuICAgICAgICB0b2dnbGUgPSAtdG9nZ2xlO1xuICAgICAgICBub2RlLmRhdGEgPSB0b2dnbGU7XG4gICAgfTtcbn1cbmV4cG9ydCBjb25zdCBtYWtlUmVxdWVzdENhbGwgPSB0eXBlb2YgQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIgPT09ICdmdW5jdGlvbicgPyAvLyByZWxpYWJseSBldmVyeXdoZXJlIHRoZXkgYXJlIGltcGxlbWVudGVkLlxuLy8gVGhleSBhcmUgaW1wbGVtZW50ZWQgaW4gYWxsIG1vZGVybiBicm93c2Vycy5cbi8vXG4vLyAtIEFuZHJvaWQgNC00LjNcbi8vIC0gQ2hyb21lIDI2LTM0XG4vLyAtIEZpcmVmb3ggMTQtMjlcbi8vIC0gSW50ZXJuZXQgRXhwbG9yZXIgMTFcbi8vIC0gaVBhZCBTYWZhcmkgNi03LjFcbi8vIC0gaVBob25lIFNhZmFyaSA3LTcuMVxuLy8gLSBTYWZhcmkgNi03XG5tYWtlUmVxdWVzdENhbGxGcm9tTXV0YXRpb25PYnNlcnZlciA6IC8vIHRhc2sgcXVldWUsIGFyZSBpbXBsZW1lbnRlZCBpbiBJbnRlcm5ldCBFeHBsb3JlciAxMCwgU2FmYXJpIDUuMC0xLCBhbmQgT3BlcmFcbi8vIDExLTEyLCBhbmQgaW4gd2ViIHdvcmtlcnMgaW4gbWFueSBlbmdpbmVzLlxuLy8gQWx0aG91Z2ggbWVzc2FnZSBjaGFubmVscyB5aWVsZCB0byBhbnkgcXVldWVkIHJlbmRlcmluZyBhbmQgSU8gdGFza3MsIHRoZXlcbi8vIHdvdWxkIGJlIGJldHRlciB0aGFuIGltcG9zaW5nIHRoZSA0bXMgZGVsYXkgb2YgdGltZXJzLlxuLy8gSG93ZXZlciwgdGhleSBkbyBub3Qgd29yayByZWxpYWJseSBpbiBJbnRlcm5ldCBFeHBsb3JlciBvciBTYWZhcmkuXG4vLyBJbnRlcm5ldCBFeHBsb3JlciAxMCBpcyB0aGUgb25seSBicm93c2VyIHRoYXQgaGFzIHNldEltbWVkaWF0ZSBidXQgZG9lc1xuLy8gbm90IGhhdmUgTXV0YXRpb25PYnNlcnZlcnMuXG4vLyBBbHRob3VnaCBzZXRJbW1lZGlhdGUgeWllbGRzIHRvIHRoZSBicm93c2VyJ3MgcmVuZGVyZXIsIGl0IHdvdWxkIGJlXG4vLyBwcmVmZXJyYWJsZSB0byBmYWxsaW5nIGJhY2sgdG8gc2V0VGltZW91dCBzaW5jZSBpdCBkb2VzIG5vdCBoYXZlXG4vLyB0aGUgbWluaW11bSA0bXMgcGVuYWx0eS5cbi8vIFVuZm9ydHVuYXRlbHkgdGhlcmUgYXBwZWFycyB0byBiZSBhIGJ1ZyBpbiBJbnRlcm5ldCBFeHBsb3JlciAxMCBNb2JpbGUgKGFuZFxuLy8gRGVza3RvcCB0byBhIGxlc3NlciBleHRlbnQpIHRoYXQgcmVuZGVycyBib3RoIHNldEltbWVkaWF0ZSBhbmRcbi8vIE1lc3NhZ2VDaGFubmVsIHVzZWxlc3MgZm9yIHRoZSBwdXJwb3NlcyBvZiBBU0FQLlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2tyaXNrb3dhbC9xL2lzc3Vlcy8zOTZcbi8vIFRpbWVycyBhcmUgaW1wbGVtZW50ZWQgdW5pdmVyc2FsbHkuXG4vLyBXZSBmYWxsIGJhY2sgdG8gdGltZXJzIGluIHdvcmtlcnMgaW4gbW9zdCBlbmdpbmVzLCBhbmQgaW4gZm9yZWdyb3VuZFxuLy8gY29udGV4dHMgaW4gdGhlIGZvbGxvd2luZyBicm93c2Vycy5cbi8vIEhvd2V2ZXIsIG5vdGUgdGhhdCBldmVuIHRoaXMgc2ltcGxlIGNhc2UgcmVxdWlyZXMgbnVhbmNlcyB0byBvcGVyYXRlIGluIGFcbi8vIGJyb2FkIHNwZWN0cnVtIG9mIGJyb3dzZXJzLlxuLy9cbi8vIC0gRmlyZWZveCAzLTEzXG4vLyAtIEludGVybmV0IEV4cGxvcmVyIDYtOVxuLy8gLSBpUGFkIFNhZmFyaSA0LjNcbi8vIC0gTHlueCAyLjguN1xubWFrZVJlcXVlc3RDYWxsRnJvbVRpbWVyO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYWtlUmVxdWVzdENhbGwuanMubWFwIiwiLy8gYGNhbGxgLCBqdXN0IGxpa2UgYSBmdW5jdGlvbi5cbmV4cG9ydCBjbGFzcyBSYXdUYXNrIHtcbiAgICBjYWxsKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy50YXNrICYmIHRoaXMudGFzaygpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5vbkVycm9yKGVycm9yKTtcbiAgICAgICAgfSBmaW5hbGx5e1xuICAgICAgICAgICAgdGhpcy50YXNrID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMucmVsZWFzZSh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihvbkVycm9yLCByZWxlYXNlKXtcbiAgICAgICAgdGhpcy5vbkVycm9yID0gb25FcnJvcjtcbiAgICAgICAgdGhpcy5yZWxlYXNlID0gcmVsZWFzZTtcbiAgICAgICAgdGhpcy50YXNrID0gbnVsbDtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJhd1Rhc2suanMubWFwIiwiaW1wb3J0IHsgQXNhcFF1ZXVlIH0gZnJvbSAnLi9Bc2FwUXVldWUuanMnO1xuaW1wb3J0IHsgVGFza0ZhY3RvcnkgfSBmcm9tICcuL1Rhc2tGYWN0b3J5LmpzJztcbmNvbnN0IGFzYXBRdWV1ZSA9IG5ldyBBc2FwUXVldWUoKTtcbmNvbnN0IHRhc2tGYWN0b3J5ID0gbmV3IFRhc2tGYWN0b3J5KGFzYXBRdWV1ZS5yZWdpc3RlclBlbmRpbmdFcnJvcik7XG4vKipcbiAqIENhbGxzIGEgdGFzayBhcyBzb29uIGFzIHBvc3NpYmxlIGFmdGVyIHJldHVybmluZywgaW4gaXRzIG93biBldmVudCwgd2l0aCBwcmlvcml0eVxuICogb3ZlciBvdGhlciBldmVudHMgbGlrZSBhbmltYXRpb24sIHJlZmxvdywgYW5kIHJlcGFpbnQuIEFuIGVycm9yIHRocm93biBmcm9tIGFuXG4gKiBldmVudCB3aWxsIG5vdCBpbnRlcnJ1cHQsIG5vciBldmVuIHN1YnN0YW50aWFsbHkgc2xvdyBkb3duIHRoZSBwcm9jZXNzaW5nIG9mXG4gKiBvdGhlciBldmVudHMsIGJ1dCB3aWxsIGJlIHJhdGhlciBwb3N0cG9uZWQgdG8gYSBsb3dlciBwcmlvcml0eSBldmVudC5cbiAqIEBwYXJhbSB7e2NhbGx9fSB0YXNrIEEgY2FsbGFibGUgb2JqZWN0LCB0eXBpY2FsbHkgYSBmdW5jdGlvbiB0aGF0IHRha2VzIG5vXG4gKiBhcmd1bWVudHMuXG4gKi8gZXhwb3J0IGZ1bmN0aW9uIGFzYXAodGFzaykge1xuICAgIGFzYXBRdWV1ZS5lbnF1ZXVlVGFzayh0YXNrRmFjdG9yeS5jcmVhdGUodGFzaykpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc2FwLmpzLm1hcCIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscywgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50LCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMsIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb24gKi8gaW1wb3J0IHsgbWFrZVJlcXVlc3RDYWxsLCBtYWtlUmVxdWVzdENhbGxGcm9tVGltZXIgfSBmcm9tICcuL21ha2VSZXF1ZXN0Q2FsbC5qcyc7XG5leHBvcnQgY2xhc3MgQXNhcFF1ZXVlIHtcbiAgICAvLyBVc2UgdGhlIGZhc3Rlc3QgbWVhbnMgcG9zc2libGUgdG8gZXhlY3V0ZSBhIHRhc2sgaW4gaXRzIG93biB0dXJuLCB3aXRoXG4gICAgLy8gcHJpb3JpdHkgb3ZlciBvdGhlciBldmVudHMgaW5jbHVkaW5nIElPLCBhbmltYXRpb24sIHJlZmxvdywgYW5kIHJlZHJhd1xuICAgIC8vIGV2ZW50cyBpbiBicm93c2Vycy5cbiAgICAvL1xuICAgIC8vIEFuIGV4Y2VwdGlvbiB0aHJvd24gYnkgYSB0YXNrIHdpbGwgcGVybWFuZW50bHkgaW50ZXJydXB0IHRoZSBwcm9jZXNzaW5nIG9mXG4gICAgLy8gc3Vic2VxdWVudCB0YXNrcy4gVGhlIGhpZ2hlciBsZXZlbCBgYXNhcGAgZnVuY3Rpb24gZW5zdXJlcyB0aGF0IGlmIGFuXG4gICAgLy8gZXhjZXB0aW9uIGlzIHRocm93biBieSBhIHRhc2ssIHRoYXQgdGhlIHRhc2sgcXVldWUgd2lsbCBjb250aW51ZSBmbHVzaGluZyBhc1xuICAgIC8vIHNvb24gYXMgcG9zc2libGUsIGJ1dCBpZiB5b3UgdXNlIGByYXdBc2FwYCBkaXJlY3RseSwgeW91IGFyZSByZXNwb25zaWJsZSB0b1xuICAgIC8vIGVpdGhlciBlbnN1cmUgdGhhdCBubyBleGNlcHRpb25zIGFyZSB0aHJvd24gZnJvbSB5b3VyIHRhc2ssIG9yIHRvIG1hbnVhbGx5XG4gICAgLy8gY2FsbCBgcmF3QXNhcC5yZXF1ZXN0Rmx1c2hgIGlmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24uXG4gICAgZW5xdWV1ZVRhc2sodGFzaykge1xuICAgICAgICBjb25zdCB7IHF1ZXVlOiBxICwgcmVxdWVzdEZsdXNoICB9ID0gdGhpcztcbiAgICAgICAgaWYgKCFxLmxlbmd0aCkge1xuICAgICAgICAgICAgcmVxdWVzdEZsdXNoKCk7XG4gICAgICAgICAgICB0aGlzLmZsdXNoaW5nID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBFcXVpdmFsZW50IHRvIHB1c2gsIGJ1dCBhdm9pZHMgYSBmdW5jdGlvbiBjYWxsLlxuICAgICAgICBxW3EubGVuZ3RoXSA9IHRhc2s7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHRoaXMucXVldWUgPSBbXTtcbiAgICAgICAgLy8gV2UgcXVldWUgZXJyb3JzIHRvIGVuc3VyZSB0aGV5IGFyZSB0aHJvd24gaW4gcmlnaHQgb3JkZXIgKEZJRk8pLlxuICAgICAgICAvLyBBcnJheS1hcy1xdWV1ZSBpcyBnb29kIGVub3VnaCBoZXJlLCBzaW5jZSB3ZSBhcmUganVzdCBkZWFsaW5nIHdpdGggZXhjZXB0aW9ucy5cbiAgICAgICAgdGhpcy5wZW5kaW5nRXJyb3JzID0gW107XG4gICAgICAgIC8vIE9uY2UgYSBmbHVzaCBoYXMgYmVlbiByZXF1ZXN0ZWQsIG5vIGZ1cnRoZXIgY2FsbHMgdG8gYHJlcXVlc3RGbHVzaGAgYXJlXG4gICAgICAgIC8vIG5lY2Vzc2FyeSB1bnRpbCB0aGUgbmV4dCBgZmx1c2hgIGNvbXBsZXRlcy5cbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB0aGlzLmZsdXNoaW5nID0gZmFsc2U7XG4gICAgICAgIC8vIFRoZSBwb3NpdGlvbiBvZiB0aGUgbmV4dCB0YXNrIHRvIGV4ZWN1dGUgaW4gdGhlIHRhc2sgcXVldWUuIFRoaXMgaXNcbiAgICAgICAgLy8gcHJlc2VydmVkIGJldHdlZW4gY2FsbHMgdG8gYGZsdXNoYCBzbyB0aGF0IGl0IGNhbiBiZSByZXN1bWVkIGlmXG4gICAgICAgIC8vIGEgdGFzayB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuICAgICAgICB0aGlzLmluZGV4ID0gMDtcbiAgICAgICAgLy8gSWYgYSB0YXNrIHNjaGVkdWxlcyBhZGRpdGlvbmFsIHRhc2tzIHJlY3Vyc2l2ZWx5LCB0aGUgdGFzayBxdWV1ZSBjYW4gZ3Jvd1xuICAgICAgICAvLyB1bmJvdW5kZWQuIFRvIHByZXZlbnQgbWVtb3J5IGV4aGF1c3Rpb24sIHRoZSB0YXNrIHF1ZXVlIHdpbGwgcGVyaW9kaWNhbGx5XG4gICAgICAgIC8vIHRydW5jYXRlIGFscmVhZHktY29tcGxldGVkIHRhc2tzLlxuICAgICAgICB0aGlzLmNhcGFjaXR5ID0gMTAyNDtcbiAgICAgICAgLy8gVGhlIGZsdXNoIGZ1bmN0aW9uIHByb2Nlc3NlcyBhbGwgdGFza3MgdGhhdCBoYXZlIGJlZW4gc2NoZWR1bGVkIHdpdGhcbiAgICAgICAgLy8gYHJhd0FzYXBgIHVubGVzcyBhbmQgdW50aWwgb25lIG9mIHRob3NlIHRhc2tzIHRocm93cyBhbiBleGNlcHRpb24uXG4gICAgICAgIC8vIElmIGEgdGFzayB0aHJvd3MgYW4gZXhjZXB0aW9uLCBgZmx1c2hgIGVuc3VyZXMgdGhhdCBpdHMgc3RhdGUgd2lsbCByZW1haW5cbiAgICAgICAgLy8gY29uc2lzdGVudCBhbmQgd2lsbCByZXN1bWUgd2hlcmUgaXQgbGVmdCBvZmYgd2hlbiBjYWxsZWQgYWdhaW4uXG4gICAgICAgIC8vIEhvd2V2ZXIsIGBmbHVzaGAgZG9lcyBub3QgbWFrZSBhbnkgYXJyYW5nZW1lbnRzIHRvIGJlIGNhbGxlZCBhZ2FpbiBpZiBhblxuICAgICAgICAvLyBleGNlcHRpb24gaXMgdGhyb3duLlxuICAgICAgICB0aGlzLmZsdXNoID0gKCk9PntcbiAgICAgICAgICAgIGNvbnN0IHsgcXVldWU6IHEgIH0gPSB0aGlzO1xuICAgICAgICAgICAgd2hpbGUodGhpcy5pbmRleCA8IHEubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50SW5kZXggPSB0aGlzLmluZGV4O1xuICAgICAgICAgICAgICAgIC8vIEFkdmFuY2UgdGhlIGluZGV4IGJlZm9yZSBjYWxsaW5nIHRoZSB0YXNrLiBUaGlzIGVuc3VyZXMgdGhhdCB3ZSB3aWxsXG4gICAgICAgICAgICAgICAgLy8gYmVnaW4gZmx1c2hpbmcgb24gdGhlIG5leHQgdGFzayB0aGUgdGFzayB0aHJvd3MgYW4gZXJyb3IuXG4gICAgICAgICAgICAgICAgdGhpcy5pbmRleCsrO1xuICAgICAgICAgICAgICAgIHFbY3VycmVudEluZGV4XS5jYWxsKCk7XG4gICAgICAgICAgICAgICAgLy8gUHJldmVudCBsZWFraW5nIG1lbW9yeSBmb3IgbG9uZyBjaGFpbnMgb2YgcmVjdXJzaXZlIGNhbGxzIHRvIGBhc2FwYC5cbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSBjYWxsIGBhc2FwYCB3aXRoaW4gdGFza3Mgc2NoZWR1bGVkIGJ5IGBhc2FwYCwgdGhlIHF1ZXVlIHdpbGxcbiAgICAgICAgICAgICAgICAvLyBncm93LCBidXQgdG8gYXZvaWQgYW4gTyhuKSB3YWxrIGZvciBldmVyeSB0YXNrIHdlIGV4ZWN1dGUsIHdlIGRvbid0XG4gICAgICAgICAgICAgICAgLy8gc2hpZnQgdGFza3Mgb2ZmIHRoZSBxdWV1ZSBhZnRlciB0aGV5IGhhdmUgYmVlbiBleGVjdXRlZC5cbiAgICAgICAgICAgICAgICAvLyBJbnN0ZWFkLCB3ZSBwZXJpb2RpY2FsbHkgc2hpZnQgMTAyNCB0YXNrcyBvZmYgdGhlIHF1ZXVlLlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmluZGV4ID4gdGhpcy5jYXBhY2l0eSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBNYW51YWxseSBzaGlmdCBhbGwgdmFsdWVzIHN0YXJ0aW5nIGF0IHRoZSBpbmRleCBiYWNrIHRvIHRoZVxuICAgICAgICAgICAgICAgICAgICAvLyBiZWdpbm5pbmcgb2YgdGhlIHF1ZXVlLlxuICAgICAgICAgICAgICAgICAgICBmb3IobGV0IHNjYW4gPSAwLCBuZXdMZW5ndGggPSBxLmxlbmd0aCAtIHRoaXMuaW5kZXg7IHNjYW4gPCBuZXdMZW5ndGg7IHNjYW4rKyl7XG4gICAgICAgICAgICAgICAgICAgICAgICBxW3NjYW5dID0gcVtzY2FuICsgdGhpcy5pbmRleF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcS5sZW5ndGggLT0gdGhpcy5pbmRleDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcS5sZW5ndGggPSAwO1xuICAgICAgICAgICAgdGhpcy5pbmRleCA9IDA7XG4gICAgICAgICAgICB0aGlzLmZsdXNoaW5nID0gZmFsc2U7XG4gICAgICAgIH07XG4gICAgICAgIC8vIEluIGEgd2ViIGJyb3dzZXIsIGV4Y2VwdGlvbnMgYXJlIG5vdCBmYXRhbC4gSG93ZXZlciwgdG8gYXZvaWRcbiAgICAgICAgLy8gc2xvd2luZyBkb3duIHRoZSBxdWV1ZSBvZiBwZW5kaW5nIHRhc2tzLCB3ZSByZXRocm93IHRoZSBlcnJvciBpbiBhXG4gICAgICAgIC8vIGxvd2VyIHByaW9yaXR5IHR1cm4uXG4gICAgICAgIHRoaXMucmVnaXN0ZXJQZW5kaW5nRXJyb3IgPSAoZXJyKT0+e1xuICAgICAgICAgICAgdGhpcy5wZW5kaW5nRXJyb3JzLnB1c2goZXJyKTtcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdEVycm9yVGhyb3coKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gYHJlcXVlc3RGbHVzaGAgcmVxdWVzdHMgdGhhdCB0aGUgaGlnaCBwcmlvcml0eSBldmVudCBxdWV1ZSBiZSBmbHVzaGVkIGFzXG4gICAgICAgIC8vIHNvb24gYXMgcG9zc2libGUuXG4gICAgICAgIC8vIFRoaXMgaXMgdXNlZnVsIHRvIHByZXZlbnQgYW4gZXJyb3IgdGhyb3duIGluIGEgdGFzayBmcm9tIHN0YWxsaW5nIHRoZSBldmVudFxuICAgICAgICAvLyBxdWV1ZSBpZiB0aGUgZXhjZXB0aW9uIGhhbmRsZWQgYnkgTm9kZS5qc+KAmXNcbiAgICAgICAgLy8gYHByb2Nlc3Mub24oXCJ1bmNhdWdodEV4Y2VwdGlvblwiKWAgb3IgYnkgYSBkb21haW4uXG4gICAgICAgIC8vIGByZXF1ZXN0Rmx1c2hgIGlzIGltcGxlbWVudGVkIHVzaW5nIGEgc3RyYXRlZ3kgYmFzZWQgb24gZGF0YSBjb2xsZWN0ZWQgZnJvbVxuICAgICAgICAvLyBldmVyeSBhdmFpbGFibGUgU2F1Y2VMYWJzIFNlbGVuaXVtIHdlYiBkcml2ZXIgd29ya2VyIGF0IHRpbWUgb2Ygd3JpdGluZy5cbiAgICAgICAgLy8gaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vc3ByZWFkc2hlZXRzL2QvMW1HLTVVWUd1cDVxeEdkRU1Xa2hQNkJXQ3owNTNOVWIyRTFRb1VUVTE2dUEvZWRpdCNnaWQ9NzgzNzI0NTkzXG4gICAgICAgIHRoaXMucmVxdWVzdEZsdXNoID0gbWFrZVJlcXVlc3RDYWxsKHRoaXMuZmx1c2gpO1xuICAgICAgICB0aGlzLnJlcXVlc3RFcnJvclRocm93ID0gbWFrZVJlcXVlc3RDYWxsRnJvbVRpbWVyKCgpPT57XG4gICAgICAgICAgICAvLyBUaHJvdyBmaXJzdCBlcnJvclxuICAgICAgICAgICAgaWYgKHRoaXMucGVuZGluZ0Vycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyB0aGlzLnBlbmRpbmdFcnJvcnMuc2hpZnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufSAvLyBUaGUgbWVzc2FnZSBjaGFubmVsIHRlY2huaXF1ZSB3YXMgZGlzY292ZXJlZCBieSBNYWx0ZSBVYmwgYW5kIHdhcyB0aGVcbiAvLyBvcmlnaW5hbCBmb3VuZGF0aW9uIGZvciB0aGlzIGxpYnJhcnkuXG4gLy8gaHR0cDovL3d3dy5ub25ibG9ja2luZy5pby8yMDExLzA2L3dpbmRvd25leHR0aWNrLmh0bWxcbiAvLyBTYWZhcmkgNi4wLjUgKGF0IGxlYXN0KSBpbnRlcm1pdHRlbnRseSBmYWlscyB0byBjcmVhdGUgbWVzc2FnZSBwb3J0cyBvbiBhXG4gLy8gcGFnZSdzIGZpcnN0IGxvYWQuIFRoYW5rZnVsbHksIHRoaXMgdmVyc2lvbiBvZiBTYWZhcmkgc3VwcG9ydHNcbiAvLyBNdXRhdGlvbk9ic2VydmVycywgc28gd2UgZG9uJ3QgbmVlZCB0byBmYWxsIGJhY2sgaW4gdGhhdCBjYXNlLlxuIC8vIGZ1bmN0aW9uIG1ha2VSZXF1ZXN0Q2FsbEZyb21NZXNzYWdlQ2hhbm5lbChjYWxsYmFjaykge1xuIC8vICAgICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuIC8vICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGNhbGxiYWNrO1xuIC8vICAgICByZXR1cm4gZnVuY3Rpb24gcmVxdWVzdENhbGwoKSB7XG4gLy8gICAgICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKDApO1xuIC8vICAgICB9O1xuIC8vIH1cbiAvLyBGb3IgcmVhc29ucyBleHBsYWluZWQgYWJvdmUsIHdlIGFyZSBhbHNvIHVuYWJsZSB0byB1c2UgYHNldEltbWVkaWF0ZWBcbiAvLyB1bmRlciBhbnkgY2lyY3Vtc3RhbmNlcy5cbiAvLyBFdmVuIGlmIHdlIHdlcmUsIHRoZXJlIGlzIGFub3RoZXIgYnVnIGluIEludGVybmV0IEV4cGxvcmVyIDEwLlxuIC8vIEl0IGlzIG5vdCBzdWZmaWNpZW50IHRvIGFzc2lnbiBgc2V0SW1tZWRpYXRlYCB0byBgcmVxdWVzdEZsdXNoYCBiZWNhdXNlXG4gLy8gYHNldEltbWVkaWF0ZWAgbXVzdCBiZSBjYWxsZWQgKmJ5IG5hbWUqIGFuZCB0aGVyZWZvcmUgbXVzdCBiZSB3cmFwcGVkIGluIGFcbiAvLyBjbG9zdXJlLlxuIC8vIE5ldmVyIGZvcmdldC5cbiAvLyBmdW5jdGlvbiBtYWtlUmVxdWVzdENhbGxGcm9tU2V0SW1tZWRpYXRlKGNhbGxiYWNrKSB7XG4gLy8gICAgIHJldHVybiBmdW5jdGlvbiByZXF1ZXN0Q2FsbCgpIHtcbiAvLyAgICAgICAgIHNldEltbWVkaWF0ZShjYWxsYmFjayk7XG4gLy8gICAgIH07XG4gLy8gfVxuIC8vIFNhZmFyaSA2LjAgaGFzIGEgcHJvYmxlbSB3aGVyZSB0aW1lcnMgd2lsbCBnZXQgbG9zdCB3aGlsZSB0aGUgdXNlciBpc1xuIC8vIHNjcm9sbGluZy4gVGhpcyBwcm9ibGVtIGRvZXMgbm90IGltcGFjdCBBU0FQIGJlY2F1c2UgU2FmYXJpIDYuMCBzdXBwb3J0c1xuIC8vIG11dGF0aW9uIG9ic2VydmVycywgc28gdGhhdCBpbXBsZW1lbnRhdGlvbiBpcyB1c2VkIGluc3RlYWQuXG4gLy8gSG93ZXZlciwgaWYgd2UgZXZlciBlbGVjdCB0byB1c2UgdGltZXJzIGluIFNhZmFyaSwgdGhlIHByZXZhbGVudCB3b3JrLWFyb3VuZFxuIC8vIGlzIHRvIGFkZCBhIHNjcm9sbCBldmVudCBsaXN0ZW5lciB0aGF0IGNhbGxzIGZvciBhIGZsdXNoLlxuIC8vIGBzZXRUaW1lb3V0YCBkb2VzIG5vdCBjYWxsIHRoZSBwYXNzZWQgY2FsbGJhY2sgaWYgdGhlIGRlbGF5IGlzIGxlc3MgdGhhblxuIC8vIGFwcHJveGltYXRlbHkgNyBpbiB3ZWIgd29ya2VycyBpbiBGaXJlZm94IDggdGhyb3VnaCAxOCwgYW5kIHNvbWV0aW1lcyBub3RcbiAvLyBldmVuIHRoZW4uXG4gLy8gVGhpcyBpcyBmb3IgYGFzYXAuanNgIG9ubHkuXG4gLy8gSXRzIG5hbWUgd2lsbCBiZSBwZXJpb2RpY2FsbHkgcmFuZG9taXplZCB0byBicmVhayBhbnkgY29kZSB0aGF0IGRlcGVuZHMgb25cbiAvLyAvLyBpdHMgZXhpc3RlbmNlLlxuIC8vIHJhd0FzYXAubWFrZVJlcXVlc3RDYWxsRnJvbVRpbWVyID0gbWFrZVJlcXVlc3RDYWxsRnJvbVRpbWVyXG4gLy8gQVNBUCB3YXMgb3JpZ2luYWxseSBhIG5leHRUaWNrIHNoaW0gaW5jbHVkZWQgaW4gUS4gVGhpcyB3YXMgZmFjdG9yZWQgb3V0XG4gLy8gaW50byB0aGlzIEFTQVAgcGFja2FnZS4gSXQgd2FzIGxhdGVyIGFkYXB0ZWQgdG8gUlNWUCB3aGljaCBtYWRlIGZ1cnRoZXJcbiAvLyBhbWVuZG1lbnRzLiBUaGVzZSBkZWNpc2lvbnMsIHBhcnRpY3VsYXJseSB0byBtYXJnaW5hbGl6ZSBNZXNzYWdlQ2hhbm5lbCBhbmRcbiAvLyB0byBjYXB0dXJlIHRoZSBNdXRhdGlvbk9ic2VydmVyIGltcGxlbWVudGF0aW9uIGluIGEgY2xvc3VyZSwgd2VyZSBpbnRlZ3JhdGVkXG4gLy8gYmFjayBpbnRvIEFTQVAgcHJvcGVyLlxuIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90aWxkZWlvL3JzdnAuanMvYmxvYi9jZGRmNzIzMjU0NmE5Y2Y4NTg1MjRiNzVjZGU2ZjllZGY3MjYyMGE3L2xpYi9yc3ZwL2FzYXAuanNcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXNhcFF1ZXVlLmpzLm1hcCIsImltcG9ydCB7IFJhd1Rhc2sgfSBmcm9tICcuL1Jhd1Rhc2suanMnO1xuZXhwb3J0IGNsYXNzIFRhc2tGYWN0b3J5IHtcbiAgICBjcmVhdGUodGFzaykge1xuICAgICAgICBjb25zdCB0YXNrcyA9IHRoaXMuZnJlZVRhc2tzO1xuICAgICAgICBjb25zdCB0MSA9IHRhc2tzLmxlbmd0aCA/IHRhc2tzLnBvcCgpIDogbmV3IFJhd1Rhc2sodGhpcy5vbkVycm9yLCAodCk9PnRhc2tzW3Rhc2tzLmxlbmd0aF0gPSB0XG4gICAgICAgICk7XG4gICAgICAgIHQxLnRhc2sgPSB0YXNrO1xuICAgICAgICByZXR1cm4gdDE7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKG9uRXJyb3Ipe1xuICAgICAgICB0aGlzLm9uRXJyb3IgPSBvbkVycm9yO1xuICAgICAgICB0aGlzLmZyZWVUYXNrcyA9IFtdO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGFza0ZhY3RvcnkuanMubWFwIiwiZXhwb3J0IGNvbnN0IEFERF9TT1VSQ0UgPSAnZG5kLWNvcmUvQUREX1NPVVJDRSc7XG5leHBvcnQgY29uc3QgQUREX1RBUkdFVCA9ICdkbmQtY29yZS9BRERfVEFSR0VUJztcbmV4cG9ydCBjb25zdCBSRU1PVkVfU09VUkNFID0gJ2RuZC1jb3JlL1JFTU9WRV9TT1VSQ0UnO1xuZXhwb3J0IGNvbnN0IFJFTU9WRV9UQVJHRVQgPSAnZG5kLWNvcmUvUkVNT1ZFX1RBUkdFVCc7XG5leHBvcnQgZnVuY3Rpb24gYWRkU291cmNlKHNvdXJjZUlkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogQUREX1NPVVJDRSxcbiAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgc291cmNlSWRcbiAgICAgICAgfVxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gYWRkVGFyZ2V0KHRhcmdldElkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogQUREX1RBUkdFVCxcbiAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgdGFyZ2V0SWRcbiAgICAgICAgfVxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlU291cmNlKHNvdXJjZUlkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUkVNT1ZFX1NPVVJDRSxcbiAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgc291cmNlSWRcbiAgICAgICAgfVxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlVGFyZ2V0KHRhcmdldElkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUkVNT1ZFX1RBUkdFVCxcbiAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgdGFyZ2V0SWRcbiAgICAgICAgfVxuICAgIH07XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZ2lzdHJ5LmpzLm1hcCIsImltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJ0ByZWFjdC1kbmQvaW52YXJpYW50JztcbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVNvdXJjZUNvbnRyYWN0KHNvdXJjZSkge1xuICAgIGludmFyaWFudCh0eXBlb2Ygc291cmNlLmNhbkRyYWcgPT09ICdmdW5jdGlvbicsICdFeHBlY3RlZCBjYW5EcmFnIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgaW52YXJpYW50KHR5cGVvZiBzb3VyY2UuYmVnaW5EcmFnID09PSAnZnVuY3Rpb24nLCAnRXhwZWN0ZWQgYmVnaW5EcmFnIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgaW52YXJpYW50KHR5cGVvZiBzb3VyY2UuZW5kRHJhZyA9PT0gJ2Z1bmN0aW9uJywgJ0V4cGVjdGVkIGVuZERyYWcgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVRhcmdldENvbnRyYWN0KHRhcmdldCkge1xuICAgIGludmFyaWFudCh0eXBlb2YgdGFyZ2V0LmNhbkRyb3AgPT09ICdmdW5jdGlvbicsICdFeHBlY3RlZCBjYW5Ecm9wIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgaW52YXJpYW50KHR5cGVvZiB0YXJnZXQuaG92ZXIgPT09ICdmdW5jdGlvbicsICdFeHBlY3RlZCBob3ZlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIGludmFyaWFudCh0eXBlb2YgdGFyZ2V0LmRyb3AgPT09ICdmdW5jdGlvbicsICdFeHBlY3RlZCBiZWdpbkRyYWcgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVR5cGUodHlwZSwgYWxsb3dBcnJheSkge1xuICAgIGlmIChhbGxvd0FycmF5ICYmIEFycmF5LmlzQXJyYXkodHlwZSkpIHtcbiAgICAgICAgdHlwZS5mb3JFYWNoKCh0KT0+dmFsaWRhdGVUeXBlKHQsIGZhbHNlKVxuICAgICAgICApO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGludmFyaWFudCh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHR5cGUgPT09ICdzeW1ib2wnLCBhbGxvd0FycmF5ID8gJ1R5cGUgY2FuIG9ubHkgYmUgYSBzdHJpbmcsIGEgc3ltYm9sLCBvciBhbiBhcnJheSBvZiBlaXRoZXIuJyA6ICdUeXBlIGNhbiBvbmx5IGJlIGEgc3RyaW5nIG9yIGEgc3ltYm9sLicpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250cmFjdHMuanMubWFwIiwiZXhwb3J0IHZhciBIYW5kbGVyUm9sZTtcbihmdW5jdGlvbihIYW5kbGVyUm9sZSkge1xuICAgIEhhbmRsZXJSb2xlW1wiU09VUkNFXCJdID0gXCJTT1VSQ0VcIjtcbiAgICBIYW5kbGVyUm9sZVtcIlRBUkdFVFwiXSA9IFwiVEFSR0VUXCI7XG59KShIYW5kbGVyUm9sZSB8fCAoSGFuZGxlclJvbGUgPSB7fSkpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcmZhY2VzLmpzLm1hcCIsImxldCBuZXh0VW5pcXVlSWQgPSAwO1xuZXhwb3J0IGZ1bmN0aW9uIGdldE5leHRVbmlxdWVJZCgpIHtcbiAgICByZXR1cm4gbmV4dFVuaXF1ZUlkKys7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldE5leHRVbmlxdWVJZC5qcy5tYXAiLCJpbXBvcnQgeyBhc2FwIH0gZnJvbSAnQHJlYWN0LWRuZC9hc2FwJztcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJ0ByZWFjdC1kbmQvaW52YXJpYW50JztcbmltcG9ydCB7IGFkZFNvdXJjZSwgYWRkVGFyZ2V0LCByZW1vdmVTb3VyY2UsIHJlbW92ZVRhcmdldCB9IGZyb20gJy4uL2FjdGlvbnMvcmVnaXN0cnkuanMnO1xuaW1wb3J0IHsgdmFsaWRhdGVTb3VyY2VDb250cmFjdCwgdmFsaWRhdGVUYXJnZXRDb250cmFjdCwgdmFsaWRhdGVUeXBlIH0gZnJvbSAnLi4vY29udHJhY3RzLmpzJztcbmltcG9ydCB7IEhhbmRsZXJSb2xlIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy5qcyc7XG5pbXBvcnQgeyBnZXROZXh0VW5pcXVlSWQgfSBmcm9tICcuLi91dGlscy9nZXROZXh0VW5pcXVlSWQuanMnO1xuZnVuY3Rpb24gZ2V0TmV4dEhhbmRsZXJJZChyb2xlKSB7XG4gICAgY29uc3QgaWQgPSBnZXROZXh0VW5pcXVlSWQoKS50b1N0cmluZygpO1xuICAgIHN3aXRjaChyb2xlKXtcbiAgICAgICAgY2FzZSBIYW5kbGVyUm9sZS5TT1VSQ0U6XG4gICAgICAgICAgICByZXR1cm4gYFMke2lkfWA7XG4gICAgICAgIGNhc2UgSGFuZGxlclJvbGUuVEFSR0VUOlxuICAgICAgICAgICAgcmV0dXJuIGBUJHtpZH1gO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIEhhbmRsZXIgUm9sZTogJHtyb2xlfWApO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHBhcnNlUm9sZUZyb21IYW5kbGVySWQoaGFuZGxlcklkKSB7XG4gICAgc3dpdGNoKGhhbmRsZXJJZFswXSl7XG4gICAgICAgIGNhc2UgJ1MnOlxuICAgICAgICAgICAgcmV0dXJuIEhhbmRsZXJSb2xlLlNPVVJDRTtcbiAgICAgICAgY2FzZSAnVCc6XG4gICAgICAgICAgICByZXR1cm4gSGFuZGxlclJvbGUuVEFSR0VUO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgcGFyc2UgaGFuZGxlciBJRDogJHtoYW5kbGVySWR9YCk7XG4gICAgfVxufVxuZnVuY3Rpb24gbWFwQ29udGFpbnNWYWx1ZShtYXAsIHNlYXJjaFZhbHVlKSB7XG4gICAgY29uc3QgZW50cmllcyA9IG1hcC5lbnRyaWVzKCk7XG4gICAgbGV0IGlzRG9uZSA9IGZhbHNlO1xuICAgIGRvIHtcbiAgICAgICAgY29uc3QgeyBkb25lICwgdmFsdWU6IFssIHZhbHVlXSAsICB9ID0gZW50cmllcy5uZXh0KCk7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gc2VhcmNoVmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlzRG9uZSA9ICEhZG9uZTtcbiAgICB9d2hpbGUgKCFpc0RvbmUpXG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IGNsYXNzIEhhbmRsZXJSZWdpc3RyeUltcGwge1xuICAgIGFkZFNvdXJjZSh0eXBlLCBzb3VyY2UpIHtcbiAgICAgICAgdmFsaWRhdGVUeXBlKHR5cGUpO1xuICAgICAgICB2YWxpZGF0ZVNvdXJjZUNvbnRyYWN0KHNvdXJjZSk7XG4gICAgICAgIGNvbnN0IHNvdXJjZUlkID0gdGhpcy5hZGRIYW5kbGVyKEhhbmRsZXJSb2xlLlNPVVJDRSwgdHlwZSwgc291cmNlKTtcbiAgICAgICAgdGhpcy5zdG9yZS5kaXNwYXRjaChhZGRTb3VyY2Uoc291cmNlSWQpKTtcbiAgICAgICAgcmV0dXJuIHNvdXJjZUlkO1xuICAgIH1cbiAgICBhZGRUYXJnZXQodHlwZSwgdGFyZ2V0KSB7XG4gICAgICAgIHZhbGlkYXRlVHlwZSh0eXBlLCB0cnVlKTtcbiAgICAgICAgdmFsaWRhdGVUYXJnZXRDb250cmFjdCh0YXJnZXQpO1xuICAgICAgICBjb25zdCB0YXJnZXRJZCA9IHRoaXMuYWRkSGFuZGxlcihIYW5kbGVyUm9sZS5UQVJHRVQsIHR5cGUsIHRhcmdldCk7XG4gICAgICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2goYWRkVGFyZ2V0KHRhcmdldElkKSk7XG4gICAgICAgIHJldHVybiB0YXJnZXRJZDtcbiAgICB9XG4gICAgY29udGFpbnNIYW5kbGVyKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIG1hcENvbnRhaW5zVmFsdWUodGhpcy5kcmFnU291cmNlcywgaGFuZGxlcikgfHwgbWFwQ29udGFpbnNWYWx1ZSh0aGlzLmRyb3BUYXJnZXRzLCBoYW5kbGVyKTtcbiAgICB9XG4gICAgZ2V0U291cmNlKHNvdXJjZUlkLCBpbmNsdWRlUGlubmVkID0gZmFsc2UpIHtcbiAgICAgICAgaW52YXJpYW50KHRoaXMuaXNTb3VyY2VJZChzb3VyY2VJZCksICdFeHBlY3RlZCBhIHZhbGlkIHNvdXJjZSBJRC4nKTtcbiAgICAgICAgY29uc3QgaXNQaW5uZWQgPSBpbmNsdWRlUGlubmVkICYmIHNvdXJjZUlkID09PSB0aGlzLnBpbm5lZFNvdXJjZUlkO1xuICAgICAgICBjb25zdCBzb3VyY2UgPSBpc1Bpbm5lZCA/IHRoaXMucGlubmVkU291cmNlIDogdGhpcy5kcmFnU291cmNlcy5nZXQoc291cmNlSWQpO1xuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgIH1cbiAgICBnZXRUYXJnZXQodGFyZ2V0SWQpIHtcbiAgICAgICAgaW52YXJpYW50KHRoaXMuaXNUYXJnZXRJZCh0YXJnZXRJZCksICdFeHBlY3RlZCBhIHZhbGlkIHRhcmdldCBJRC4nKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZHJvcFRhcmdldHMuZ2V0KHRhcmdldElkKTtcbiAgICB9XG4gICAgZ2V0U291cmNlVHlwZShzb3VyY2VJZCkge1xuICAgICAgICBpbnZhcmlhbnQodGhpcy5pc1NvdXJjZUlkKHNvdXJjZUlkKSwgJ0V4cGVjdGVkIGEgdmFsaWQgc291cmNlIElELicpO1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlcy5nZXQoc291cmNlSWQpO1xuICAgIH1cbiAgICBnZXRUYXJnZXRUeXBlKHRhcmdldElkKSB7XG4gICAgICAgIGludmFyaWFudCh0aGlzLmlzVGFyZ2V0SWQodGFyZ2V0SWQpLCAnRXhwZWN0ZWQgYSB2YWxpZCB0YXJnZXQgSUQuJyk7XG4gICAgICAgIHJldHVybiB0aGlzLnR5cGVzLmdldCh0YXJnZXRJZCk7XG4gICAgfVxuICAgIGlzU291cmNlSWQoaGFuZGxlcklkKSB7XG4gICAgICAgIGNvbnN0IHJvbGUgPSBwYXJzZVJvbGVGcm9tSGFuZGxlcklkKGhhbmRsZXJJZCk7XG4gICAgICAgIHJldHVybiByb2xlID09PSBIYW5kbGVyUm9sZS5TT1VSQ0U7XG4gICAgfVxuICAgIGlzVGFyZ2V0SWQoaGFuZGxlcklkKSB7XG4gICAgICAgIGNvbnN0IHJvbGUgPSBwYXJzZVJvbGVGcm9tSGFuZGxlcklkKGhhbmRsZXJJZCk7XG4gICAgICAgIHJldHVybiByb2xlID09PSBIYW5kbGVyUm9sZS5UQVJHRVQ7XG4gICAgfVxuICAgIHJlbW92ZVNvdXJjZShzb3VyY2VJZCkge1xuICAgICAgICBpbnZhcmlhbnQodGhpcy5nZXRTb3VyY2Uoc291cmNlSWQpLCAnRXhwZWN0ZWQgYW4gZXhpc3Rpbmcgc291cmNlLicpO1xuICAgICAgICB0aGlzLnN0b3JlLmRpc3BhdGNoKHJlbW92ZVNvdXJjZShzb3VyY2VJZCkpO1xuICAgICAgICBhc2FwKCgpPT57XG4gICAgICAgICAgICB0aGlzLmRyYWdTb3VyY2VzLmRlbGV0ZShzb3VyY2VJZCk7XG4gICAgICAgICAgICB0aGlzLnR5cGVzLmRlbGV0ZShzb3VyY2VJZCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZW1vdmVUYXJnZXQodGFyZ2V0SWQpIHtcbiAgICAgICAgaW52YXJpYW50KHRoaXMuZ2V0VGFyZ2V0KHRhcmdldElkKSwgJ0V4cGVjdGVkIGFuIGV4aXN0aW5nIHRhcmdldC4nKTtcbiAgICAgICAgdGhpcy5zdG9yZS5kaXNwYXRjaChyZW1vdmVUYXJnZXQodGFyZ2V0SWQpKTtcbiAgICAgICAgdGhpcy5kcm9wVGFyZ2V0cy5kZWxldGUodGFyZ2V0SWQpO1xuICAgICAgICB0aGlzLnR5cGVzLmRlbGV0ZSh0YXJnZXRJZCk7XG4gICAgfVxuICAgIHBpblNvdXJjZShzb3VyY2VJZCkge1xuICAgICAgICBjb25zdCBzb3VyY2UgPSB0aGlzLmdldFNvdXJjZShzb3VyY2VJZCk7XG4gICAgICAgIGludmFyaWFudChzb3VyY2UsICdFeHBlY3RlZCBhbiBleGlzdGluZyBzb3VyY2UuJyk7XG4gICAgICAgIHRoaXMucGlubmVkU291cmNlSWQgPSBzb3VyY2VJZDtcbiAgICAgICAgdGhpcy5waW5uZWRTb3VyY2UgPSBzb3VyY2U7XG4gICAgfVxuICAgIHVucGluU291cmNlKCkge1xuICAgICAgICBpbnZhcmlhbnQodGhpcy5waW5uZWRTb3VyY2UsICdObyBzb3VyY2UgaXMgcGlubmVkIGF0IHRoZSB0aW1lLicpO1xuICAgICAgICB0aGlzLnBpbm5lZFNvdXJjZUlkID0gbnVsbDtcbiAgICAgICAgdGhpcy5waW5uZWRTb3VyY2UgPSBudWxsO1xuICAgIH1cbiAgICBhZGRIYW5kbGVyKHJvbGUsIHR5cGUsIGhhbmRsZXIpIHtcbiAgICAgICAgY29uc3QgaWQgPSBnZXROZXh0SGFuZGxlcklkKHJvbGUpO1xuICAgICAgICB0aGlzLnR5cGVzLnNldChpZCwgdHlwZSk7XG4gICAgICAgIGlmIChyb2xlID09PSBIYW5kbGVyUm9sZS5TT1VSQ0UpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhZ1NvdXJjZXMuc2V0KGlkLCBoYW5kbGVyKTtcbiAgICAgICAgfSBlbHNlIGlmIChyb2xlID09PSBIYW5kbGVyUm9sZS5UQVJHRVQpIHtcbiAgICAgICAgICAgIHRoaXMuZHJvcFRhcmdldHMuc2V0KGlkLCBoYW5kbGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaWQ7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHN0b3JlKXtcbiAgICAgICAgdGhpcy50eXBlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5kcmFnU291cmNlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5kcm9wVGFyZ2V0cyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5waW5uZWRTb3VyY2VJZCA9IG51bGw7XG4gICAgICAgIHRoaXMucGlubmVkU291cmNlID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SGFuZGxlclJlZ2lzdHJ5SW1wbC5qcy5tYXAiLCJleHBvcnQgY29uc3Qgc3RyaWN0RXF1YWxpdHkgPSAoYSwgYik9PmEgPT09IGJcbjtcbi8qKlxuICogRGV0ZXJtaW5lIGlmIHR3byBjYXJ0ZXNpYW4gY29vcmRpbmF0ZSBvZmZzZXRzIGFyZSBlcXVhbFxuICogQHBhcmFtIG9mZnNldEFcbiAqIEBwYXJhbSBvZmZzZXRCXG4gKi8gZXhwb3J0IGZ1bmN0aW9uIGFyZUNvb3Jkc0VxdWFsKG9mZnNldEEsIG9mZnNldEIpIHtcbiAgICBpZiAoIW9mZnNldEEgJiYgIW9mZnNldEIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmICghb2Zmc2V0QSB8fCAhb2Zmc2V0Qikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG9mZnNldEEueCA9PT0gb2Zmc2V0Qi54ICYmIG9mZnNldEEueSA9PT0gb2Zmc2V0Qi55O1xuICAgIH1cbn1cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0d28gYXJyYXlzIG9mIGl0ZW1zIGFyZSBlcXVhbFxuICogQHBhcmFtIGEgVGhlIGZpcnN0IGFycmF5IG9mIGl0ZW1zXG4gKiBAcGFyYW0gYiBUaGUgc2Vjb25kIGFycmF5IG9mIGl0ZW1zXG4gKi8gZXhwb3J0IGZ1bmN0aW9uIGFyZUFycmF5c0VxdWFsKGEsIGIsIGlzRXF1YWwgPSBzdHJpY3RFcXVhbGl0eSkge1xuICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7ICsraSl7XG4gICAgICAgIGlmICghaXNFcXVhbChhW2ldLCBiW2ldKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcXVhbGl0eS5qcy5tYXAiLCJpbXBvcnQgeyBCRUdJTl9EUkFHLCBEUk9QLCBFTkRfRFJBRywgSE9WRVIsIFBVQkxJU0hfRFJBR19TT1VSQ0UgfSBmcm9tICcuLi9hY3Rpb25zL2RyYWdEcm9wL2luZGV4LmpzJztcbmltcG9ydCB7IEFERF9TT1VSQ0UsIEFERF9UQVJHRVQsIFJFTU9WRV9TT1VSQ0UsIFJFTU9WRV9UQVJHRVQgfSBmcm9tICcuLi9hY3Rpb25zL3JlZ2lzdHJ5LmpzJztcbmltcG9ydCB7IEFMTCwgTk9ORSB9IGZyb20gJy4uL3V0aWxzL2RpcnRpbmVzcy5qcyc7XG5pbXBvcnQgeyBhcmVBcnJheXNFcXVhbCB9IGZyb20gJy4uL3V0aWxzL2VxdWFsaXR5LmpzJztcbmltcG9ydCB7IHhvciB9IGZyb20gJy4uL3V0aWxzL2pzX3V0aWxzLmpzJztcbmV4cG9ydCBmdW5jdGlvbiByZWR1Y2UoLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuX3N0YXRlID0gTk9ORSwgYWN0aW9uKSB7XG4gICAgc3dpdGNoKGFjdGlvbi50eXBlKXtcbiAgICAgICAgY2FzZSBIT1ZFUjpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEFERF9TT1VSQ0U6XG4gICAgICAgIGNhc2UgQUREX1RBUkdFVDpcbiAgICAgICAgY2FzZSBSRU1PVkVfVEFSR0VUOlxuICAgICAgICBjYXNlIFJFTU9WRV9TT1VSQ0U6XG4gICAgICAgICAgICByZXR1cm4gTk9ORTtcbiAgICAgICAgY2FzZSBCRUdJTl9EUkFHOlxuICAgICAgICBjYXNlIFBVQkxJU0hfRFJBR19TT1VSQ0U6XG4gICAgICAgIGNhc2UgRU5EX0RSQUc6XG4gICAgICAgIGNhc2UgRFJPUDpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBBTEw7XG4gICAgfVxuICAgIGNvbnN0IHsgdGFyZ2V0SWRzID1bXSAsIHByZXZUYXJnZXRJZHMgPVtdICB9ID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgY29uc3QgcmVzdWx0ID0geG9yKHRhcmdldElkcywgcHJldlRhcmdldElkcyk7XG4gICAgY29uc3QgZGlkQ2hhbmdlID0gcmVzdWx0Lmxlbmd0aCA+IDAgfHwgIWFyZUFycmF5c0VxdWFsKHRhcmdldElkcywgcHJldlRhcmdldElkcyk7XG4gICAgaWYgKCFkaWRDaGFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIE5PTkU7XG4gICAgfVxuICAgIC8vIENoZWNrIHRoZSB0YXJnZXQgaWRzIGF0IHRoZSBpbm5lcm1vc3QgcG9zaXRpb24uIElmIHRoZXkgYXJlIHZhbGlkLCBhZGQgdGhlbVxuICAgIC8vIHRvIHRoZSByZXN1bHRcbiAgICBjb25zdCBwcmV2SW5uZXJtb3N0VGFyZ2V0SWQgPSBwcmV2VGFyZ2V0SWRzW3ByZXZUYXJnZXRJZHMubGVuZ3RoIC0gMV07XG4gICAgY29uc3QgaW5uZXJtb3N0VGFyZ2V0SWQgPSB0YXJnZXRJZHNbdGFyZ2V0SWRzLmxlbmd0aCAtIDFdO1xuICAgIGlmIChwcmV2SW5uZXJtb3N0VGFyZ2V0SWQgIT09IGlubmVybW9zdFRhcmdldElkKSB7XG4gICAgICAgIGlmIChwcmV2SW5uZXJtb3N0VGFyZ2V0SWQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHByZXZJbm5lcm1vc3RUYXJnZXRJZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlubmVybW9zdFRhcmdldElkKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChpbm5lcm1vc3RUYXJnZXRJZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlydHlIYW5kbGVySWRzLmpzLm1hcCIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5IGluIG9iaikge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xufVxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHtcbiAgICBmb3IodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG4gICAgICAgIHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgICAgICAgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbihzeW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgICBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG5pbXBvcnQgeyBCRUdJTl9EUkFHLCBEUk9QLCBFTkRfRFJBRywgSE9WRVIsIElOSVRfQ09PUkRTIH0gZnJvbSAnLi4vYWN0aW9ucy9kcmFnRHJvcC9pbmRleC5qcyc7XG5pbXBvcnQgeyBhcmVDb29yZHNFcXVhbCB9IGZyb20gJy4uL3V0aWxzL2VxdWFsaXR5LmpzJztcbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcbiAgICBpbml0aWFsU291cmNlQ2xpZW50T2Zmc2V0OiBudWxsLFxuICAgIGluaXRpYWxDbGllbnRPZmZzZXQ6IG51bGwsXG4gICAgY2xpZW50T2Zmc2V0OiBudWxsXG59O1xuZXhwb3J0IGZ1bmN0aW9uIHJlZHVjZShzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgYWN0aW9uKSB7XG4gICAgY29uc3QgeyBwYXlsb2FkICB9ID0gYWN0aW9uO1xuICAgIHN3aXRjaChhY3Rpb24udHlwZSl7XG4gICAgICAgIGNhc2UgSU5JVF9DT09SRFM6XG4gICAgICAgIGNhc2UgQkVHSU5fRFJBRzpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaW5pdGlhbFNvdXJjZUNsaWVudE9mZnNldDogcGF5bG9hZC5zb3VyY2VDbGllbnRPZmZzZXQsXG4gICAgICAgICAgICAgICAgaW5pdGlhbENsaWVudE9mZnNldDogcGF5bG9hZC5jbGllbnRPZmZzZXQsXG4gICAgICAgICAgICAgICAgY2xpZW50T2Zmc2V0OiBwYXlsb2FkLmNsaWVudE9mZnNldFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBIT1ZFUjpcbiAgICAgICAgICAgIGlmIChhcmVDb29yZHNFcXVhbChzdGF0ZS5jbGllbnRPZmZzZXQsIHBheWxvYWQuY2xpZW50T2Zmc2V0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSwge1xuICAgICAgICAgICAgICAgIGNsaWVudE9mZnNldDogcGF5bG9hZC5jbGllbnRPZmZzZXRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBjYXNlIEVORF9EUkFHOlxuICAgICAgICBjYXNlIERST1A6XG4gICAgICAgICAgICByZXR1cm4gaW5pdGlhbFN0YXRlO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZHJhZ09mZnNldC5qcy5tYXAiLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgaWYgKGtleSBpbiBvYmopIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbn1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7XG4gICAgZm9yKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgICAgICB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gICAgICAgIGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgb3duS2V5cyA9IG93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24oc3ltKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuaW1wb3J0IHsgQkVHSU5fRFJBRywgRFJPUCwgRU5EX0RSQUcsIEhPVkVSLCBQVUJMSVNIX0RSQUdfU09VUkNFIH0gZnJvbSAnLi4vYWN0aW9ucy9kcmFnRHJvcC9pbmRleC5qcyc7XG5pbXBvcnQgeyBSRU1PVkVfVEFSR0VUIH0gZnJvbSAnLi4vYWN0aW9ucy9yZWdpc3RyeS5qcyc7XG5pbXBvcnQgeyB3aXRob3V0IH0gZnJvbSAnLi4vdXRpbHMvanNfdXRpbHMuanMnO1xuY29uc3QgaW5pdGlhbFN0YXRlID0ge1xuICAgIGl0ZW1UeXBlOiBudWxsLFxuICAgIGl0ZW06IG51bGwsXG4gICAgc291cmNlSWQ6IG51bGwsXG4gICAgdGFyZ2V0SWRzOiBbXSxcbiAgICBkcm9wUmVzdWx0OiBudWxsLFxuICAgIGRpZERyb3A6IGZhbHNlLFxuICAgIGlzU291cmNlUHVibGljOiBudWxsXG59O1xuZXhwb3J0IGZ1bmN0aW9uIHJlZHVjZShzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgYWN0aW9uKSB7XG4gICAgY29uc3QgeyBwYXlsb2FkICB9ID0gYWN0aW9uO1xuICAgIHN3aXRjaChhY3Rpb24udHlwZSl7XG4gICAgICAgIGNhc2UgQkVHSU5fRFJBRzpcbiAgICAgICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSwge1xuICAgICAgICAgICAgICAgIGl0ZW1UeXBlOiBwYXlsb2FkLml0ZW1UeXBlLFxuICAgICAgICAgICAgICAgIGl0ZW06IHBheWxvYWQuaXRlbSxcbiAgICAgICAgICAgICAgICBzb3VyY2VJZDogcGF5bG9hZC5zb3VyY2VJZCxcbiAgICAgICAgICAgICAgICBpc1NvdXJjZVB1YmxpYzogcGF5bG9hZC5pc1NvdXJjZVB1YmxpYyxcbiAgICAgICAgICAgICAgICBkcm9wUmVzdWx0OiBudWxsLFxuICAgICAgICAgICAgICAgIGRpZERyb3A6IGZhbHNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgY2FzZSBQVUJMSVNIX0RSQUdfU09VUkNFOlxuICAgICAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHN0YXRlLCB7XG4gICAgICAgICAgICAgICAgaXNTb3VyY2VQdWJsaWM6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBjYXNlIEhPVkVSOlxuICAgICAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHN0YXRlLCB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0SWRzOiBwYXlsb2FkLnRhcmdldElkc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIGNhc2UgUkVNT1ZFX1RBUkdFVDpcbiAgICAgICAgICAgIGlmIChzdGF0ZS50YXJnZXRJZHMuaW5kZXhPZihwYXlsb2FkLnRhcmdldElkKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgc3RhdGUsIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRJZHM6IHdpdGhvdXQoc3RhdGUudGFyZ2V0SWRzLCBwYXlsb2FkLnRhcmdldElkKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIGNhc2UgRFJPUDpcbiAgICAgICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSwge1xuICAgICAgICAgICAgICAgIGRyb3BSZXN1bHQ6IHBheWxvYWQuZHJvcFJlc3VsdCxcbiAgICAgICAgICAgICAgICBkaWREcm9wOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRhcmdldElkczogW11cbiAgICAgICAgICAgIH0pO1xuICAgICAgICBjYXNlIEVORF9EUkFHOlxuICAgICAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHN0YXRlLCB7XG4gICAgICAgICAgICAgICAgaXRlbVR5cGU6IG51bGwsXG4gICAgICAgICAgICAgICAgaXRlbTogbnVsbCxcbiAgICAgICAgICAgICAgICBzb3VyY2VJZDogbnVsbCxcbiAgICAgICAgICAgICAgICBkcm9wUmVzdWx0OiBudWxsLFxuICAgICAgICAgICAgICAgIGRpZERyb3A6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGlzU291cmNlUHVibGljOiBudWxsLFxuICAgICAgICAgICAgICAgIHRhcmdldElkczogW11cbiAgICAgICAgICAgIH0pO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZHJhZ09wZXJhdGlvbi5qcy5tYXAiLCJpbXBvcnQgeyBBRERfU09VUkNFLCBBRERfVEFSR0VULCBSRU1PVkVfU09VUkNFLCBSRU1PVkVfVEFSR0VUIH0gZnJvbSAnLi4vYWN0aW9ucy9yZWdpc3RyeS5qcyc7XG5leHBvcnQgZnVuY3Rpb24gcmVkdWNlKHN0YXRlID0gMCwgYWN0aW9uKSB7XG4gICAgc3dpdGNoKGFjdGlvbi50eXBlKXtcbiAgICAgICAgY2FzZSBBRERfU09VUkNFOlxuICAgICAgICBjYXNlIEFERF9UQVJHRVQ6XG4gICAgICAgICAgICByZXR1cm4gc3RhdGUgKyAxO1xuICAgICAgICBjYXNlIFJFTU9WRV9TT1VSQ0U6XG4gICAgICAgIGNhc2UgUkVNT1ZFX1RBUkdFVDpcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZSAtIDE7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWZDb3VudC5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gcmVkdWNlKHN0YXRlID0gMCkge1xuICAgIHJldHVybiBzdGF0ZSArIDE7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXRlSWQuanMubWFwIiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkge1xuICAgIGZvcih2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspe1xuICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcbiAgICAgICAgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICAgICAgICBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uKHN5bSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIG93bktleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbmltcG9ydCB7IGdldCB9IGZyb20gJy4uL3V0aWxzL2pzX3V0aWxzLmpzJztcbmltcG9ydCB7IHJlZHVjZSBhcyBkaXJ0eUhhbmRsZXJJZHMgfSBmcm9tICcuL2RpcnR5SGFuZGxlcklkcy5qcyc7XG5pbXBvcnQgeyByZWR1Y2UgYXMgZHJhZ09mZnNldCB9IGZyb20gJy4vZHJhZ09mZnNldC5qcyc7XG5pbXBvcnQgeyByZWR1Y2UgYXMgZHJhZ09wZXJhdGlvbiB9IGZyb20gJy4vZHJhZ09wZXJhdGlvbi5qcyc7XG5pbXBvcnQgeyByZWR1Y2UgYXMgcmVmQ291bnQgfSBmcm9tICcuL3JlZkNvdW50LmpzJztcbmltcG9ydCB7IHJlZHVjZSBhcyBzdGF0ZUlkIH0gZnJvbSAnLi9zdGF0ZUlkLmpzJztcbmV4cG9ydCBmdW5jdGlvbiByZWR1Y2Uoc3RhdGUgPSB7fSwgYWN0aW9uKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGlydHlIYW5kbGVySWRzOiBkaXJ0eUhhbmRsZXJJZHMoc3RhdGUuZGlydHlIYW5kbGVySWRzLCB7XG4gICAgICAgICAgICB0eXBlOiBhY3Rpb24udHlwZSxcbiAgICAgICAgICAgIHBheWxvYWQ6IF9vYmplY3RTcHJlYWQoe30sIGFjdGlvbi5wYXlsb2FkLCB7XG4gICAgICAgICAgICAgICAgcHJldlRhcmdldElkczogZ2V0KHN0YXRlLCAnZHJhZ09wZXJhdGlvbi50YXJnZXRJZHMnLCBbXSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pLFxuICAgICAgICBkcmFnT2Zmc2V0OiBkcmFnT2Zmc2V0KHN0YXRlLmRyYWdPZmZzZXQsIGFjdGlvbiksXG4gICAgICAgIHJlZkNvdW50OiByZWZDb3VudChzdGF0ZS5yZWZDb3VudCwgYWN0aW9uKSxcbiAgICAgICAgZHJhZ09wZXJhdGlvbjogZHJhZ09wZXJhdGlvbihzdGF0ZS5kcmFnT3BlcmF0aW9uLCBhY3Rpb24pLFxuICAgICAgICBzdGF0ZUlkOiBzdGF0ZUlkKHN0YXRlLnN0YXRlSWQpXG4gICAgfTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlU3RvcmUgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyBEcmFnRHJvcE1hbmFnZXJJbXBsIH0gZnJvbSAnLi9jbGFzc2VzL0RyYWdEcm9wTWFuYWdlckltcGwuanMnO1xuaW1wb3J0IHsgRHJhZ0Ryb3BNb25pdG9ySW1wbCB9IGZyb20gJy4vY2xhc3Nlcy9EcmFnRHJvcE1vbml0b3JJbXBsLmpzJztcbmltcG9ydCB7IEhhbmRsZXJSZWdpc3RyeUltcGwgfSBmcm9tICcuL2NsYXNzZXMvSGFuZGxlclJlZ2lzdHJ5SW1wbC5qcyc7XG5pbXBvcnQgeyByZWR1Y2UgfSBmcm9tICcuL3JlZHVjZXJzL2luZGV4LmpzJztcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEcmFnRHJvcE1hbmFnZXIoYmFja2VuZEZhY3RvcnksIGdsb2JhbENvbnRleHQgPSB1bmRlZmluZWQsIGJhY2tlbmRPcHRpb25zID0ge30sIGRlYnVnTW9kZSA9IGZhbHNlKSB7XG4gICAgY29uc3Qgc3RvcmUgPSBtYWtlU3RvcmVJbnN0YW5jZShkZWJ1Z01vZGUpO1xuICAgIGNvbnN0IG1vbml0b3IgPSBuZXcgRHJhZ0Ryb3BNb25pdG9ySW1wbChzdG9yZSwgbmV3IEhhbmRsZXJSZWdpc3RyeUltcGwoc3RvcmUpKTtcbiAgICBjb25zdCBtYW5hZ2VyID0gbmV3IERyYWdEcm9wTWFuYWdlckltcGwoc3RvcmUsIG1vbml0b3IpO1xuICAgIGNvbnN0IGJhY2tlbmQgPSBiYWNrZW5kRmFjdG9yeShtYW5hZ2VyLCBnbG9iYWxDb250ZXh0LCBiYWNrZW5kT3B0aW9ucyk7XG4gICAgbWFuYWdlci5yZWNlaXZlQmFja2VuZChiYWNrZW5kKTtcbiAgICByZXR1cm4gbWFuYWdlcjtcbn1cbmZ1bmN0aW9uIG1ha2VTdG9yZUluc3RhbmNlKGRlYnVnTW9kZSkge1xuICAgIC8vIFRPRE86IGlmIHdlIGV2ZXIgbWFrZSBhIHJlYWN0LW5hdGl2ZSB2ZXJzaW9uIG9mIHRoaXMsXG4gICAgLy8gd2UnbGwgbmVlZCB0byBjb25zaWRlciBob3cgdG8gcHVsbCBvZmYgZGV2LXRvb2xpbmdcbiAgICBjb25zdCByZWR1eERldlRvb2xzID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX187XG4gICAgcmV0dXJuIGNyZWF0ZVN0b3JlKHJlZHVjZSwgZGVidWdNb2RlICYmIHJlZHV4RGV2VG9vbHMgJiYgcmVkdXhEZXZUb29scyh7XG4gICAgICAgIG5hbWU6ICdkbmQtY29yZScsXG4gICAgICAgIGluc3RhbmNlSWQ6ICdkbmQtY29yZSdcbiAgICB9KSk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZURyYWdEcm9wTWFuYWdlci5qcy5tYXAiLCJmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICAgIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICAgIHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcbiAgICB2YXIga2V5LCBpO1xuICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuICAgICAgICBmb3IoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICAgICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgICB2YXIgdGFyZ2V0ID0ge307XG4gICAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICAgIHZhciBrZXksIGk7XG4gICAgZm9yKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsgY3JlYXRlRHJhZ0Ryb3BNYW5hZ2VyIH0gZnJvbSAnZG5kLWNvcmUnO1xuaW1wb3J0IHsgbWVtbywgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRG5kQ29udGV4dCB9IGZyb20gJy4vRG5kQ29udGV4dC5qcyc7XG5sZXQgcmVmQ291bnQgPSAwO1xuY29uc3QgSU5TVEFOQ0VfU1lNID0gU3ltYm9sLmZvcignX19SRUFDVF9ETkRfQ09OVEVYVF9JTlNUQU5DRV9fJyk7XG52YXIgRG5kUHJvdmlkZXIgPSAvKiNfX1BVUkVfXyovIG1lbW8oZnVuY3Rpb24gRG5kUHJvdmlkZXIoX3BhcmFtKSB7XG4gICAgdmFyIHsgY2hpbGRyZW4gIH0gPSBfcGFyYW0sIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wYXJhbSwgW1xuICAgICAgICBcImNoaWxkcmVuXCJcbiAgICBdKTtcbiAgICBjb25zdCBbbWFuYWdlciwgaXNHbG9iYWxJbnN0YW5jZV0gPSBnZXREbmRDb250ZXh0VmFsdWUocHJvcHMpIC8vIG1lbW9pemVkIGZyb20gcHJvcHNcbiAgICA7XG4gICAgLyoqXG5cdFx0ICogSWYgdGhlIGdsb2JhbCBjb250ZXh0IHdhcyB1c2VkIHRvIHN0b3JlIHRoZSBETkQgY29udGV4dFxuXHRcdCAqIHRoZW4gd2hlcmUgdGhlcmVzIG5vIG1vcmUgcmVmZXJlbmNlcyB0byBpdCB3ZSBzaG91bGRcblx0XHQgKiBjbGVhbiBpdCB1cCB0byBhdm9pZCBtZW1vcnkgbGVha3Ncblx0XHQgKi8gdXNlRWZmZWN0KCgpPT57XG4gICAgICAgIGlmIChpc0dsb2JhbEluc3RhbmNlKSB7XG4gICAgICAgICAgICBjb25zdCBjb250ZXh0ID0gZ2V0R2xvYmFsQ29udGV4dCgpO1xuICAgICAgICAgICAgKytyZWZDb3VudDtcbiAgICAgICAgICAgIHJldHVybiAoKT0+e1xuICAgICAgICAgICAgICAgIGlmICgtLXJlZkNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRbSU5TVEFOQ0VfU1lNXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfSwgW10pO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovIF9qc3goRG5kQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogbWFuYWdlcixcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgfSk7XG59KTtcbi8qKlxuICogQSBSZWFjdCBjb21wb25lbnQgdGhhdCBwcm92aWRlcyB0aGUgUmVhY3QtRG5EIGNvbnRleHRcbiAqLyBleHBvcnQgeyBEbmRQcm92aWRlciwgIH07XG5mdW5jdGlvbiBnZXREbmRDb250ZXh0VmFsdWUocHJvcHMpIHtcbiAgICBpZiAoJ21hbmFnZXInIGluIHByb3BzKSB7XG4gICAgICAgIGNvbnN0IG1hbmFnZXIgPSB7XG4gICAgICAgICAgICBkcmFnRHJvcE1hbmFnZXI6IHByb3BzLm1hbmFnZXJcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG1hbmFnZXIsXG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICBdO1xuICAgIH1cbiAgICBjb25zdCBtYW5hZ2VyID0gY3JlYXRlU2luZ2xldG9uRG5kQ29udGV4dChwcm9wcy5iYWNrZW5kLCBwcm9wcy5jb250ZXh0LCBwcm9wcy5vcHRpb25zLCBwcm9wcy5kZWJ1Z01vZGUpO1xuICAgIGNvbnN0IGlzR2xvYmFsSW5zdGFuY2UgPSAhcHJvcHMuY29udGV4dDtcbiAgICByZXR1cm4gW1xuICAgICAgICBtYW5hZ2VyLFxuICAgICAgICBpc0dsb2JhbEluc3RhbmNlXG4gICAgXTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVNpbmdsZXRvbkRuZENvbnRleHQoYmFja2VuZCwgY29udGV4dCA9IGdldEdsb2JhbENvbnRleHQoKSwgb3B0aW9ucywgZGVidWdNb2RlKSB7XG4gICAgY29uc3QgY3R4ID0gY29udGV4dDtcbiAgICBpZiAoIWN0eFtJTlNUQU5DRV9TWU1dKSB7XG4gICAgICAgIGN0eFtJTlNUQU5DRV9TWU1dID0ge1xuICAgICAgICAgICAgZHJhZ0Ryb3BNYW5hZ2VyOiBjcmVhdGVEcmFnRHJvcE1hbmFnZXIoYmFja2VuZCwgY29udGV4dCwgb3B0aW9ucywgZGVidWdNb2RlKVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gY3R4W0lOU1RBTkNFX1NZTV07XG59XG5mdW5jdGlvbiBnZXRHbG9iYWxDb250ZXh0KCkge1xuICAgIHJldHVybiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHdpbmRvdztcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RG5kUHJvdmlkZXIuanMubWFwIiwiLy8gY2hlYXAgbG9kYXNoIHJlcGxhY2VtZW50c1xuZXhwb3J0IGZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgICBsZXQgcmVzdWx0ID0gbnVsbDtcbiAgICBjb25zdCBtZW1vaXplZCA9ICgpPT57XG4gICAgICAgIGlmIChyZXN1bHQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZm4oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgcmV0dXJuIG1lbW9pemVkO1xufVxuLyoqXG4gKiBkcm9wLWluIHJlcGxhY2VtZW50IGZvciBfLndpdGhvdXRcbiAqLyBleHBvcnQgZnVuY3Rpb24gd2l0aG91dChpdGVtcywgaXRlbSkge1xuICAgIHJldHVybiBpdGVtcy5maWx0ZXIoKGkpPT5pICE9PSBpdGVtXG4gICAgKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1bmlvbihpdGVtc0EsIGl0ZW1zQikge1xuICAgIGNvbnN0IHNldCA9IG5ldyBTZXQoKTtcbiAgICBjb25zdCBpbnNlcnRJdGVtID0gKGl0ZW0pPT5zZXQuYWRkKGl0ZW0pXG4gICAgO1xuICAgIGl0ZW1zQS5mb3JFYWNoKGluc2VydEl0ZW0pO1xuICAgIGl0ZW1zQi5mb3JFYWNoKGluc2VydEl0ZW0pO1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIHNldC5mb3JFYWNoKChrZXkpPT5yZXN1bHQucHVzaChrZXkpXG4gICAgKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1qc191dGlscy5qcy5tYXAiLCJpbXBvcnQgeyB1bmlvbiwgd2l0aG91dCB9IGZyb20gJy4vdXRpbHMvanNfdXRpbHMuanMnO1xuZXhwb3J0IGNsYXNzIEVudGVyTGVhdmVDb3VudGVyIHtcbiAgICBlbnRlcihlbnRlcmluZ05vZGUpIHtcbiAgICAgICAgY29uc3QgcHJldmlvdXNMZW5ndGggPSB0aGlzLmVudGVyZWQubGVuZ3RoO1xuICAgICAgICBjb25zdCBpc05vZGVFbnRlcmVkID0gKG5vZGUpPT50aGlzLmlzTm9kZUluRG9jdW1lbnQobm9kZSkgJiYgKCFub2RlLmNvbnRhaW5zIHx8IG5vZGUuY29udGFpbnMoZW50ZXJpbmdOb2RlKSlcbiAgICAgICAgO1xuICAgICAgICB0aGlzLmVudGVyZWQgPSB1bmlvbih0aGlzLmVudGVyZWQuZmlsdGVyKGlzTm9kZUVudGVyZWQpLCBbXG4gICAgICAgICAgICBlbnRlcmluZ05vZGVcbiAgICAgICAgXSk7XG4gICAgICAgIHJldHVybiBwcmV2aW91c0xlbmd0aCA9PT0gMCAmJiB0aGlzLmVudGVyZWQubGVuZ3RoID4gMDtcbiAgICB9XG4gICAgbGVhdmUobGVhdmluZ05vZGUpIHtcbiAgICAgICAgY29uc3QgcHJldmlvdXNMZW5ndGggPSB0aGlzLmVudGVyZWQubGVuZ3RoO1xuICAgICAgICB0aGlzLmVudGVyZWQgPSB3aXRob3V0KHRoaXMuZW50ZXJlZC5maWx0ZXIodGhpcy5pc05vZGVJbkRvY3VtZW50KSwgbGVhdmluZ05vZGUpO1xuICAgICAgICByZXR1cm4gcHJldmlvdXNMZW5ndGggPiAwICYmIHRoaXMuZW50ZXJlZC5sZW5ndGggPT09IDA7XG4gICAgfVxuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLmVudGVyZWQgPSBbXTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoaXNOb2RlSW5Eb2N1bWVudCl7XG4gICAgICAgIHRoaXMuZW50ZXJlZCA9IFtdO1xuICAgICAgICB0aGlzLmlzTm9kZUluRG9jdW1lbnQgPSBpc05vZGVJbkRvY3VtZW50O1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RW50ZXJMZWF2ZUNvdW50ZXIuanMubWFwIiwiZXhwb3J0IGNsYXNzIE5hdGl2ZURyYWdTb3VyY2Uge1xuICAgIGluaXRpYWxpemVFeHBvc2VkUHJvcGVydGllcygpIHtcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5jb25maWcuZXhwb3NlUHJvcGVydGllcykuZm9yRWFjaCgocHJvcGVydHkpPT57XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5pdGVtLCBwcm9wZXJ0eSwge1xuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGdldCAoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgQnJvd3NlciBkb2Vzbid0IGFsbG93IHJlYWRpbmcgXCIke3Byb3BlcnR5fVwiIHVudGlsIHRoZSBkcm9wIGV2ZW50LmApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxvYWREYXRhVHJhbnNmZXIoZGF0YVRyYW5zZmVyKSB7XG4gICAgICAgIGlmIChkYXRhVHJhbnNmZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1Byb3BlcnRpZXMgPSB7fTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMuY29uZmlnLmV4cG9zZVByb3BlcnRpZXMpLmZvckVhY2goKHByb3BlcnR5KT0+e1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb3BlcnR5Rm4gPSB0aGlzLmNvbmZpZy5leHBvc2VQcm9wZXJ0aWVzW3Byb3BlcnR5XTtcbiAgICAgICAgICAgICAgICBpZiAocHJvcGVydHlGbiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld1Byb3BlcnRpZXNbcHJvcGVydHldID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHByb3BlcnR5Rm4oZGF0YVRyYW5zZmVyLCB0aGlzLmNvbmZpZy5tYXRjaGVzVHlwZXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcy5pdGVtLCBuZXdQcm9wZXJ0aWVzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYW5EcmFnKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgYmVnaW5EcmFnKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pdGVtO1xuICAgIH1cbiAgICBpc0RyYWdnaW5nKG1vbml0b3IsIGhhbmRsZSkge1xuICAgICAgICByZXR1cm4gaGFuZGxlID09PSBtb25pdG9yLmdldFNvdXJjZUlkKCk7XG4gICAgfVxuICAgIGVuZERyYWcoKSB7XG4gICAgLy8gZW1wdHlcbiAgICB9XG4gICAgY29uc3RydWN0b3IoY29uZmlnKXtcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgICAgIHRoaXMuaXRlbSA9IHt9O1xuICAgICAgICB0aGlzLmluaXRpYWxpemVFeHBvc2VkUHJvcGVydGllcygpO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TmF0aXZlRHJhZ1NvdXJjZS5qcy5tYXAiLCJleHBvcnQgY29uc3QgRklMRSA9ICdfX05BVElWRV9GSUxFX18nO1xuZXhwb3J0IGNvbnN0IFVSTCA9ICdfX05BVElWRV9VUkxfXyc7XG5leHBvcnQgY29uc3QgVEVYVCA9ICdfX05BVElWRV9URVhUX18nO1xuZXhwb3J0IGNvbnN0IEhUTUwgPSAnX19OQVRJVkVfSFRNTF9fJztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TmF0aXZlVHlwZXMuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGdldERhdGFGcm9tRGF0YVRyYW5zZmVyKGRhdGFUcmFuc2ZlciwgdHlwZXNUb1RyeSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gdHlwZXNUb1RyeS5yZWR1Y2UoKHJlc3VsdFNvRmFyLCB0eXBlVG9UcnkpPT5yZXN1bHRTb0ZhciB8fCBkYXRhVHJhbnNmZXIuZ2V0RGF0YSh0eXBlVG9UcnkpXG4gICAgLCAnJyk7XG4gICAgcmV0dXJuIHJlc3VsdCAhPSBudWxsID8gcmVzdWx0IDogZGVmYXVsdFZhbHVlO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXREYXRhRnJvbURhdGFUcmFuc2Zlci5qcy5tYXAiLCJpbXBvcnQgKiBhcyBOYXRpdmVUeXBlcyBmcm9tICcuLi9OYXRpdmVUeXBlcy5qcyc7XG5pbXBvcnQgeyBnZXREYXRhRnJvbURhdGFUcmFuc2ZlciB9IGZyb20gJy4vZ2V0RGF0YUZyb21EYXRhVHJhbnNmZXIuanMnO1xuZXhwb3J0IGNvbnN0IG5hdGl2ZVR5cGVzQ29uZmlnID0ge1xuICAgIFtOYXRpdmVUeXBlcy5GSUxFXToge1xuICAgICAgICBleHBvc2VQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBmaWxlczogKGRhdGFUcmFuc2Zlcik9PkFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGRhdGFUcmFuc2Zlci5maWxlcylcbiAgICAgICAgICAgICxcbiAgICAgICAgICAgIGl0ZW1zOiAoZGF0YVRyYW5zZmVyKT0+ZGF0YVRyYW5zZmVyLml0ZW1zXG4gICAgICAgICAgICAsXG4gICAgICAgICAgICBkYXRhVHJhbnNmZXI6IChkYXRhVHJhbnNmZXIpPT5kYXRhVHJhbnNmZXJcbiAgICAgICAgfSxcbiAgICAgICAgbWF0Y2hlc1R5cGVzOiBbXG4gICAgICAgICAgICAnRmlsZXMnXG4gICAgICAgIF1cbiAgICB9LFxuICAgIFtOYXRpdmVUeXBlcy5IVE1MXToge1xuICAgICAgICBleHBvc2VQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBodG1sOiAoZGF0YVRyYW5zZmVyLCBtYXRjaGVzVHlwZXMpPT5nZXREYXRhRnJvbURhdGFUcmFuc2ZlcihkYXRhVHJhbnNmZXIsIG1hdGNoZXNUeXBlcywgJycpXG4gICAgICAgICAgICAsXG4gICAgICAgICAgICBkYXRhVHJhbnNmZXI6IChkYXRhVHJhbnNmZXIpPT5kYXRhVHJhbnNmZXJcbiAgICAgICAgfSxcbiAgICAgICAgbWF0Y2hlc1R5cGVzOiBbXG4gICAgICAgICAgICAnSHRtbCcsXG4gICAgICAgICAgICAndGV4dC9odG1sJ1xuICAgICAgICBdXG4gICAgfSxcbiAgICBbTmF0aXZlVHlwZXMuVVJMXToge1xuICAgICAgICBleHBvc2VQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICB1cmxzOiAoZGF0YVRyYW5zZmVyLCBtYXRjaGVzVHlwZXMpPT5nZXREYXRhRnJvbURhdGFUcmFuc2ZlcihkYXRhVHJhbnNmZXIsIG1hdGNoZXNUeXBlcywgJycpLnNwbGl0KCdcXG4nKVxuICAgICAgICAgICAgLFxuICAgICAgICAgICAgZGF0YVRyYW5zZmVyOiAoZGF0YVRyYW5zZmVyKT0+ZGF0YVRyYW5zZmVyXG4gICAgICAgIH0sXG4gICAgICAgIG1hdGNoZXNUeXBlczogW1xuICAgICAgICAgICAgJ1VybCcsXG4gICAgICAgICAgICAndGV4dC91cmktbGlzdCdcbiAgICAgICAgXVxuICAgIH0sXG4gICAgW05hdGl2ZVR5cGVzLlRFWFRdOiB7XG4gICAgICAgIGV4cG9zZVByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIHRleHQ6IChkYXRhVHJhbnNmZXIsIG1hdGNoZXNUeXBlcyk9PmdldERhdGFGcm9tRGF0YVRyYW5zZmVyKGRhdGFUcmFuc2ZlciwgbWF0Y2hlc1R5cGVzLCAnJylcbiAgICAgICAgICAgICxcbiAgICAgICAgICAgIGRhdGFUcmFuc2ZlcjogKGRhdGFUcmFuc2Zlcik9PmRhdGFUcmFuc2ZlclxuICAgICAgICB9LFxuICAgICAgICBtYXRjaGVzVHlwZXM6IFtcbiAgICAgICAgICAgICdUZXh0JyxcbiAgICAgICAgICAgICd0ZXh0L3BsYWluJ1xuICAgICAgICBdXG4gICAgfVxufTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmF0aXZlVHlwZXNDb25maWcuanMubWFwIiwiaW1wb3J0IHsgTmF0aXZlRHJhZ1NvdXJjZSB9IGZyb20gJy4vTmF0aXZlRHJhZ1NvdXJjZS5qcyc7XG5pbXBvcnQgeyBuYXRpdmVUeXBlc0NvbmZpZyB9IGZyb20gJy4vbmF0aXZlVHlwZXNDb25maWcuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU5hdGl2ZURyYWdTb3VyY2UodHlwZSwgZGF0YVRyYW5zZmVyKSB7XG4gICAgY29uc3QgY29uZmlnID0gbmF0aXZlVHlwZXNDb25maWdbdHlwZV07XG4gICAgaWYgKCFjb25maWcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBuYXRpdmUgdHlwZSAke3R5cGV9IGhhcyBubyBjb25maWd1cmF0aW9uYCk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBOYXRpdmVEcmFnU291cmNlKGNvbmZpZyk7XG4gICAgcmVzdWx0LmxvYWREYXRhVHJhbnNmZXIoZGF0YVRyYW5zZmVyKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoTmF0aXZlSXRlbVR5cGUoZGF0YVRyYW5zZmVyKSB7XG4gICAgaWYgKCFkYXRhVHJhbnNmZXIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGRhdGFUcmFuc2ZlclR5cGVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZGF0YVRyYW5zZmVyLnR5cGVzIHx8IFtdKTtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMobmF0aXZlVHlwZXNDb25maWcpLmZpbHRlcigobmF0aXZlSXRlbVR5cGUpPT57XG4gICAgICAgIGNvbnN0IHR5cGVDb25maWcgPSBuYXRpdmVUeXBlc0NvbmZpZ1tuYXRpdmVJdGVtVHlwZV07XG4gICAgICAgIGlmICghKHR5cGVDb25maWcgPT09IG51bGwgfHwgdHlwZUNvbmZpZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogdHlwZUNvbmZpZy5tYXRjaGVzVHlwZXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHR5cGVDb25maWcubWF0Y2hlc1R5cGVzLnNvbWUoKHQpPT5kYXRhVHJhbnNmZXJUeXBlcy5pbmRleE9mKHQpID4gLTFcbiAgICAgICAgKTtcbiAgICB9KVswXSB8fCBudWxsO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJpbXBvcnQgeyBtZW1vaXplIH0gZnJvbSAnLi91dGlscy9qc191dGlscy5qcyc7XG5leHBvcnQgY29uc3QgaXNGaXJlZm94ID0gbWVtb2l6ZSgoKT0+L2ZpcmVmb3gvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpXG4pO1xuZXhwb3J0IGNvbnN0IGlzU2FmYXJpID0gbWVtb2l6ZSgoKT0+Qm9vbGVhbih3aW5kb3cuc2FmYXJpKVxuKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QnJvd3NlckRldGVjdG9yLmpzLm1hcCIsImV4cG9ydCBjbGFzcyBNb25vdG9uaWNJbnRlcnBvbGFudCB7XG4gICAgaW50ZXJwb2xhdGUoeCkge1xuICAgICAgICBjb25zdCB7IHhzICwgeXMgLCBjMXMgLCBjMnMgLCBjM3MgIH0gPSB0aGlzO1xuICAgICAgICAvLyBUaGUgcmlnaHRtb3N0IHBvaW50IGluIHRoZSBkYXRhc2V0IHNob3VsZCBnaXZlIGFuIGV4YWN0IHJlc3VsdFxuICAgICAgICBsZXQgaSA9IHhzLmxlbmd0aCAtIDE7XG4gICAgICAgIGlmICh4ID09PSB4c1tpXSkge1xuICAgICAgICAgICAgcmV0dXJuIHlzW2ldO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNlYXJjaCBmb3IgdGhlIGludGVydmFsIHggaXMgaW4sIHJldHVybmluZyB0aGUgY29ycmVzcG9uZGluZyB5IGlmIHggaXMgb25lIG9mIHRoZSBvcmlnaW5hbCB4c1xuICAgICAgICBsZXQgbG93ID0gMDtcbiAgICAgICAgbGV0IGhpZ2ggPSBjM3MubGVuZ3RoIC0gMTtcbiAgICAgICAgbGV0IG1pZDtcbiAgICAgICAgd2hpbGUobG93IDw9IGhpZ2gpe1xuICAgICAgICAgICAgbWlkID0gTWF0aC5mbG9vcigwLjUgKiAobG93ICsgaGlnaCkpO1xuICAgICAgICAgICAgY29uc3QgeEhlcmUgPSB4c1ttaWRdO1xuICAgICAgICAgICAgaWYgKHhIZXJlIDwgeCkge1xuICAgICAgICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHhIZXJlID4geCkge1xuICAgICAgICAgICAgICAgIGhpZ2ggPSBtaWQgLSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geXNbbWlkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpID0gTWF0aC5tYXgoMCwgaGlnaCk7XG4gICAgICAgIC8vIEludGVycG9sYXRlXG4gICAgICAgIGNvbnN0IGRpZmYgPSB4IC0geHNbaV07XG4gICAgICAgIGNvbnN0IGRpZmZTcSA9IGRpZmYgKiBkaWZmO1xuICAgICAgICByZXR1cm4geXNbaV0gKyBjMXNbaV0gKiBkaWZmICsgYzJzW2ldICogZGlmZlNxICsgYzNzW2ldICogZGlmZiAqIGRpZmZTcTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoeHMsIHlzKXtcbiAgICAgICAgY29uc3QgeyBsZW5ndGggIH0gPSB4cztcbiAgICAgICAgLy8gUmVhcnJhbmdlIHhzIGFuZCB5cyBzbyB0aGF0IHhzIGlzIHNvcnRlZFxuICAgICAgICBjb25zdCBpbmRleGVzID0gW107XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBpbmRleGVzLnB1c2goaSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXhlcy5zb3J0KChhLCBiKT0+eHNbYV0gPCB4c1tiXSA/IC0xIDogMVxuICAgICAgICApO1xuICAgICAgICAvLyBHZXQgY29uc2VjdXRpdmUgZGlmZmVyZW5jZXMgYW5kIHNsb3Blc1xuICAgICAgICBjb25zdCBkeXMgPSBbXTtcbiAgICAgICAgY29uc3QgZHhzID0gW107XG4gICAgICAgIGNvbnN0IG1zID0gW107XG4gICAgICAgIGxldCBkeDtcbiAgICAgICAgbGV0IGR5O1xuICAgICAgICBmb3IobGV0IGkxID0gMDsgaTEgPCBsZW5ndGggLSAxOyBpMSsrKXtcbiAgICAgICAgICAgIGR4ID0geHNbaTEgKyAxXSAtIHhzW2kxXTtcbiAgICAgICAgICAgIGR5ID0geXNbaTEgKyAxXSAtIHlzW2kxXTtcbiAgICAgICAgICAgIGR4cy5wdXNoKGR4KTtcbiAgICAgICAgICAgIGR5cy5wdXNoKGR5KTtcbiAgICAgICAgICAgIG1zLnB1c2goZHkgLyBkeCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gR2V0IGRlZ3JlZS0xIGNvZWZmaWNpZW50c1xuICAgICAgICBjb25zdCBjMXMgPSBbXG4gICAgICAgICAgICBtc1swXVxuICAgICAgICBdO1xuICAgICAgICBmb3IobGV0IGkyID0gMDsgaTIgPCBkeHMubGVuZ3RoIC0gMTsgaTIrKyl7XG4gICAgICAgICAgICBjb25zdCBtMiA9IG1zW2kyXTtcbiAgICAgICAgICAgIGNvbnN0IG1OZXh0ID0gbXNbaTIgKyAxXTtcbiAgICAgICAgICAgIGlmIChtMiAqIG1OZXh0IDw9IDApIHtcbiAgICAgICAgICAgICAgICBjMXMucHVzaCgwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZHggPSBkeHNbaTJdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGR4TmV4dCA9IGR4c1tpMiArIDFdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbW1vbiA9IGR4ICsgZHhOZXh0O1xuICAgICAgICAgICAgICAgIGMxcy5wdXNoKDMgKiBjb21tb24gLyAoKGNvbW1vbiArIGR4TmV4dCkgLyBtMiArIChjb21tb24gKyBkeCkgLyBtTmV4dCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGMxcy5wdXNoKG1zW21zLmxlbmd0aCAtIDFdKTtcbiAgICAgICAgLy8gR2V0IGRlZ3JlZS0yIGFuZCBkZWdyZWUtMyBjb2VmZmljaWVudHNcbiAgICAgICAgY29uc3QgYzJzID0gW107XG4gICAgICAgIGNvbnN0IGMzcyA9IFtdO1xuICAgICAgICBsZXQgbTtcbiAgICAgICAgZm9yKGxldCBpMyA9IDA7IGkzIDwgYzFzLmxlbmd0aCAtIDE7IGkzKyspe1xuICAgICAgICAgICAgbSA9IG1zW2kzXTtcbiAgICAgICAgICAgIGNvbnN0IGMxID0gYzFzW2kzXTtcbiAgICAgICAgICAgIGNvbnN0IGludkR4ID0gMSAvIGR4c1tpM107XG4gICAgICAgICAgICBjb25zdCBjb21tb24gPSBjMSArIGMxc1tpMyArIDFdIC0gbSAtIG07XG4gICAgICAgICAgICBjMnMucHVzaCgobSAtIGMxIC0gY29tbW9uKSAqIGludkR4KTtcbiAgICAgICAgICAgIGMzcy5wdXNoKGNvbW1vbiAqIGludkR4ICogaW52RHgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMueHMgPSB4cztcbiAgICAgICAgdGhpcy55cyA9IHlzO1xuICAgICAgICB0aGlzLmMxcyA9IGMxcztcbiAgICAgICAgdGhpcy5jMnMgPSBjMnM7XG4gICAgICAgIHRoaXMuYzNzID0gYzNzO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TW9ub3RvbmljSW50ZXJwb2xhbnQuanMubWFwIiwiaW1wb3J0IHsgaXNGaXJlZm94LCBpc1NhZmFyaSB9IGZyb20gJy4vQnJvd3NlckRldGVjdG9yLmpzJztcbmltcG9ydCB7IE1vbm90b25pY0ludGVycG9sYW50IH0gZnJvbSAnLi9Nb25vdG9uaWNJbnRlcnBvbGFudC5qcyc7XG5jb25zdCBFTEVNRU5UX05PREUgPSAxO1xuZXhwb3J0IGZ1bmN0aW9uIGdldE5vZGVDbGllbnRPZmZzZXQobm9kZSkge1xuICAgIGNvbnN0IGVsID0gbm9kZS5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFID8gbm9kZSA6IG5vZGUucGFyZW50RWxlbWVudDtcbiAgICBpZiAoIWVsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCB7IHRvcCAsIGxlZnQgIH0gPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiBsZWZ0LFxuICAgICAgICB5OiB0b3BcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEV2ZW50Q2xpZW50T2Zmc2V0KGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiBlLmNsaWVudFgsXG4gICAgICAgIHk6IGUuY2xpZW50WVxuICAgIH07XG59XG5mdW5jdGlvbiBpc0ltYWdlTm9kZShub2RlKSB7XG4gICAgdmFyIHJlZjtcbiAgICByZXR1cm4gbm9kZS5ub2RlTmFtZSA9PT0gJ0lNRycgJiYgKGlzRmlyZWZveCgpIHx8ICEoKHJlZiA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkgPT09IG51bGwgfHwgcmVmID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZWYuY29udGFpbnMobm9kZSkpKTtcbn1cbmZ1bmN0aW9uIGdldERyYWdQcmV2aWV3U2l6ZShpc0ltYWdlLCBkcmFnUHJldmlldywgc291cmNlV2lkdGgsIHNvdXJjZUhlaWdodCkge1xuICAgIGxldCBkcmFnUHJldmlld1dpZHRoID0gaXNJbWFnZSA/IGRyYWdQcmV2aWV3LndpZHRoIDogc291cmNlV2lkdGg7XG4gICAgbGV0IGRyYWdQcmV2aWV3SGVpZ2h0ID0gaXNJbWFnZSA/IGRyYWdQcmV2aWV3LmhlaWdodCA6IHNvdXJjZUhlaWdodDtcbiAgICAvLyBXb3JrIGFyb3VuZCBAMnggY29vcmRpbmF0ZSBkaXNjcmVwYW5jaWVzIGluIGJyb3dzZXJzXG4gICAgaWYgKGlzU2FmYXJpKCkgJiYgaXNJbWFnZSkge1xuICAgICAgICBkcmFnUHJldmlld0hlaWdodCAvPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbiAgICAgICAgZHJhZ1ByZXZpZXdXaWR0aCAvPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZHJhZ1ByZXZpZXdXaWR0aCxcbiAgICAgICAgZHJhZ1ByZXZpZXdIZWlnaHRcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldERyYWdQcmV2aWV3T2Zmc2V0KHNvdXJjZU5vZGUsIGRyYWdQcmV2aWV3LCBjbGllbnRPZmZzZXQsIGFuY2hvclBvaW50LCBvZmZzZXRQb2ludCkge1xuICAgIC8vIFRoZSBicm93c2VycyB3aWxsIHVzZSB0aGUgaW1hZ2UgaW50cmluc2ljIHNpemUgdW5kZXIgZGlmZmVyZW50IGNvbmRpdGlvbnMuXG4gICAgLy8gRmlyZWZveCBvbmx5IGNhcmVzIGlmIGl0J3MgYW4gaW1hZ2UsIGJ1dCBXZWJLaXQgYWxzbyB3YW50cyBpdCB0byBiZSBkZXRhY2hlZC5cbiAgICBjb25zdCBpc0ltYWdlID0gaXNJbWFnZU5vZGUoZHJhZ1ByZXZpZXcpO1xuICAgIGNvbnN0IGRyYWdQcmV2aWV3Tm9kZSA9IGlzSW1hZ2UgPyBzb3VyY2VOb2RlIDogZHJhZ1ByZXZpZXc7XG4gICAgY29uc3QgZHJhZ1ByZXZpZXdOb2RlT2Zmc2V0RnJvbUNsaWVudCA9IGdldE5vZGVDbGllbnRPZmZzZXQoZHJhZ1ByZXZpZXdOb2RlKTtcbiAgICBjb25zdCBvZmZzZXRGcm9tRHJhZ1ByZXZpZXcgPSB7XG4gICAgICAgIHg6IGNsaWVudE9mZnNldC54IC0gZHJhZ1ByZXZpZXdOb2RlT2Zmc2V0RnJvbUNsaWVudC54LFxuICAgICAgICB5OiBjbGllbnRPZmZzZXQueSAtIGRyYWdQcmV2aWV3Tm9kZU9mZnNldEZyb21DbGllbnQueVxuICAgIH07XG4gICAgY29uc3QgeyBvZmZzZXRXaWR0aDogc291cmNlV2lkdGggLCBvZmZzZXRIZWlnaHQ6IHNvdXJjZUhlaWdodCAgfSA9IHNvdXJjZU5vZGU7XG4gICAgY29uc3QgeyBhbmNob3JYICwgYW5jaG9yWSAgfSA9IGFuY2hvclBvaW50O1xuICAgIGNvbnN0IHsgZHJhZ1ByZXZpZXdXaWR0aCAsIGRyYWdQcmV2aWV3SGVpZ2h0ICB9ID0gZ2V0RHJhZ1ByZXZpZXdTaXplKGlzSW1hZ2UsIGRyYWdQcmV2aWV3LCBzb3VyY2VXaWR0aCwgc291cmNlSGVpZ2h0KTtcbiAgICBjb25zdCBjYWxjdWxhdGVZT2Zmc2V0ID0gKCk9PntcbiAgICAgICAgY29uc3QgaW50ZXJwb2xhbnRZID0gbmV3IE1vbm90b25pY0ludGVycG9sYW50KFtcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAwLjUsXG4gICAgICAgICAgICAxXG4gICAgICAgIF0sIFtcbiAgICAgICAgICAgIC8vIERvY2sgdG8gdGhlIHRvcFxuICAgICAgICAgICAgb2Zmc2V0RnJvbURyYWdQcmV2aWV3LnksXG4gICAgICAgICAgICAvLyBBbGlnbiBhdCB0aGUgY2VudGVyXG4gICAgICAgICAgICAob2Zmc2V0RnJvbURyYWdQcmV2aWV3LnkgLyBzb3VyY2VIZWlnaHQpICogZHJhZ1ByZXZpZXdIZWlnaHQsXG4gICAgICAgICAgICAvLyBEb2NrIHRvIHRoZSBib3R0b21cbiAgICAgICAgICAgIG9mZnNldEZyb21EcmFnUHJldmlldy55ICsgZHJhZ1ByZXZpZXdIZWlnaHQgLSBzb3VyY2VIZWlnaHQsIFxuICAgICAgICBdKTtcbiAgICAgICAgbGV0IHkgPSBpbnRlcnBvbGFudFkuaW50ZXJwb2xhdGUoYW5jaG9yWSk7XG4gICAgICAgIC8vIFdvcmsgYXJvdW5kIFNhZmFyaSA4IHBvc2l0aW9uaW5nIGJ1Z1xuICAgICAgICBpZiAoaXNTYWZhcmkoKSAmJiBpc0ltYWdlKSB7XG4gICAgICAgICAgICAvLyBXZSdsbCBoYXZlIHRvIHdhaXQgZm9yIEAzeCB0byBzZWUgaWYgdGhpcyBpcyBlbnRpcmVseSBjb3JyZWN0XG4gICAgICAgICAgICB5ICs9ICh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyAtIDEpICogZHJhZ1ByZXZpZXdIZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHk7XG4gICAgfTtcbiAgICBjb25zdCBjYWxjdWxhdGVYT2Zmc2V0ID0gKCk9PntcbiAgICAgICAgLy8gSW50ZXJwb2xhdGUgY29vcmRpbmF0ZXMgZGVwZW5kaW5nIG9uIGFuY2hvciBwb2ludFxuICAgICAgICAvLyBJZiB5b3Uga25vdyBhIHNpbXBsZXIgd2F5IHRvIGRvIHRoaXMsIGxldCBtZSBrbm93XG4gICAgICAgIGNvbnN0IGludGVycG9sYW50WCA9IG5ldyBNb25vdG9uaWNJbnRlcnBvbGFudChbXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgMC41LFxuICAgICAgICAgICAgMVxuICAgICAgICBdLCBbXG4gICAgICAgICAgICAvLyBEb2NrIHRvIHRoZSBsZWZ0XG4gICAgICAgICAgICBvZmZzZXRGcm9tRHJhZ1ByZXZpZXcueCxcbiAgICAgICAgICAgIC8vIEFsaWduIGF0IHRoZSBjZW50ZXJcbiAgICAgICAgICAgIChvZmZzZXRGcm9tRHJhZ1ByZXZpZXcueCAvIHNvdXJjZVdpZHRoKSAqIGRyYWdQcmV2aWV3V2lkdGgsXG4gICAgICAgICAgICAvLyBEb2NrIHRvIHRoZSByaWdodFxuICAgICAgICAgICAgb2Zmc2V0RnJvbURyYWdQcmV2aWV3LnggKyBkcmFnUHJldmlld1dpZHRoIC0gc291cmNlV2lkdGgsIFxuICAgICAgICBdKTtcbiAgICAgICAgcmV0dXJuIGludGVycG9sYW50WC5pbnRlcnBvbGF0ZShhbmNob3JYKTtcbiAgICB9O1xuICAgIC8vIEZvcmNlIG9mZnNldHMgaWYgc3BlY2lmaWVkIGluIHRoZSBvcHRpb25zLlxuICAgIGNvbnN0IHsgb2Zmc2V0WCAsIG9mZnNldFkgIH0gPSBvZmZzZXRQb2ludDtcbiAgICBjb25zdCBpc01hbnVhbE9mZnNldFggPSBvZmZzZXRYID09PSAwIHx8IG9mZnNldFg7XG4gICAgY29uc3QgaXNNYW51YWxPZmZzZXRZID0gb2Zmc2V0WSA9PT0gMCB8fCBvZmZzZXRZO1xuICAgIHJldHVybiB7XG4gICAgICAgIHg6IGlzTWFudWFsT2Zmc2V0WCA/IG9mZnNldFggOiBjYWxjdWxhdGVYT2Zmc2V0KCksXG4gICAgICAgIHk6IGlzTWFudWFsT2Zmc2V0WSA/IG9mZnNldFkgOiBjYWxjdWxhdGVZT2Zmc2V0KClcbiAgICB9O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1PZmZzZXRVdGlscy5qcy5tYXAiLCJleHBvcnQgY2xhc3MgT3B0aW9uc1JlYWRlciB7XG4gICAgZ2V0IHdpbmRvdygpIHtcbiAgICAgICAgaWYgKHRoaXMuZ2xvYmFsQ29udGV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2xvYmFsQ29udGV4dDtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBnZXQgZG9jdW1lbnQoKSB7XG4gICAgICAgIHZhciByZWY7XG4gICAgICAgIGlmICgocmVmID0gdGhpcy5nbG9iYWxDb250ZXh0KSA9PT0gbnVsbCB8fCByZWYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlZi5kb2N1bWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2xvYmFsQ29udGV4dC5kb2N1bWVudDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLndpbmRvdykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMud2luZG93LmRvY3VtZW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgcm9vdEVsZW1lbnQoKSB7XG4gICAgICAgIHZhciByZWY7XG4gICAgICAgIHJldHVybiAoKHJlZiA9IHRoaXMub3B0aW9uc0FyZ3MpID09PSBudWxsIHx8IHJlZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVmLnJvb3RFbGVtZW50KSB8fCB0aGlzLndpbmRvdztcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZ2xvYmFsQ29udGV4dCwgb3B0aW9ucyl7XG4gICAgICAgIHRoaXMub3duZXJEb2N1bWVudCA9IG51bGw7XG4gICAgICAgIHRoaXMuZ2xvYmFsQ29udGV4dCA9IGdsb2JhbENvbnRleHQ7XG4gICAgICAgIHRoaXMub3B0aW9uc0FyZ3MgPSBvcHRpb25zO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T3B0aW9uc1JlYWRlci5qcy5tYXAiLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgaWYgKGtleSBpbiBvYmopIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbn1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7XG4gICAgZm9yKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgICAgICB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gICAgICAgIGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgb3duS2V5cyA9IG93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24oc3ltKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuaW1wb3J0IHsgRW50ZXJMZWF2ZUNvdW50ZXIgfSBmcm9tICcuL0VudGVyTGVhdmVDb3VudGVyLmpzJztcbmltcG9ydCB7IGNyZWF0ZU5hdGl2ZURyYWdTb3VyY2UsIG1hdGNoTmF0aXZlSXRlbVR5cGUgfSBmcm9tICcuL05hdGl2ZURyYWdTb3VyY2VzL2luZGV4LmpzJztcbmltcG9ydCAqIGFzIE5hdGl2ZVR5cGVzIGZyb20gJy4vTmF0aXZlVHlwZXMuanMnO1xuaW1wb3J0IHsgZ2V0RHJhZ1ByZXZpZXdPZmZzZXQsIGdldEV2ZW50Q2xpZW50T2Zmc2V0LCBnZXROb2RlQ2xpZW50T2Zmc2V0IH0gZnJvbSAnLi9PZmZzZXRVdGlscy5qcyc7XG5pbXBvcnQgeyBPcHRpb25zUmVhZGVyIH0gZnJvbSAnLi9PcHRpb25zUmVhZGVyLmpzJztcbmV4cG9ydCBjbGFzcyBIVE1MNUJhY2tlbmRJbXBsIHtcbiAgICAvKipcblx0ICogR2VuZXJhdGUgcHJvZmlsaW5nIHN0YXRpc3RpY3MgZm9yIHRoZSBIVE1MNUJhY2tlbmQuXG5cdCAqLyBwcm9maWxlKCkge1xuICAgICAgICB2YXIgcmVmLCByZWYxO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc291cmNlUHJldmlld05vZGVzOiB0aGlzLnNvdXJjZVByZXZpZXdOb2Rlcy5zaXplLFxuICAgICAgICAgICAgc291cmNlUHJldmlld05vZGVPcHRpb25zOiB0aGlzLnNvdXJjZVByZXZpZXdOb2RlT3B0aW9ucy5zaXplLFxuICAgICAgICAgICAgc291cmNlTm9kZU9wdGlvbnM6IHRoaXMuc291cmNlTm9kZU9wdGlvbnMuc2l6ZSxcbiAgICAgICAgICAgIHNvdXJjZU5vZGVzOiB0aGlzLnNvdXJjZU5vZGVzLnNpemUsXG4gICAgICAgICAgICBkcmFnU3RhcnRTb3VyY2VJZHM6ICgocmVmID0gdGhpcy5kcmFnU3RhcnRTb3VyY2VJZHMpID09PSBudWxsIHx8IHJlZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVmLmxlbmd0aCkgfHwgMCxcbiAgICAgICAgICAgIGRyb3BUYXJnZXRJZHM6IHRoaXMuZHJvcFRhcmdldElkcy5sZW5ndGgsXG4gICAgICAgICAgICBkcmFnRW50ZXJUYXJnZXRJZHM6IHRoaXMuZHJhZ0VudGVyVGFyZ2V0SWRzLmxlbmd0aCxcbiAgICAgICAgICAgIGRyYWdPdmVyVGFyZ2V0SWRzOiAoKHJlZjEgPSB0aGlzLmRyYWdPdmVyVGFyZ2V0SWRzKSA9PT0gbnVsbCB8fCByZWYxID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZWYxLmxlbmd0aCkgfHwgMFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBwdWJsaWMgZm9yIHRlc3RcbiAgICBnZXQgd2luZG93KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndpbmRvdztcbiAgICB9XG4gICAgZ2V0IGRvY3VtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmRvY3VtZW50O1xuICAgIH1cbiAgICAvKipcblx0ICogR2V0IHRoZSByb290IGVsZW1lbnQgdG8gdXNlIGZvciBldmVudCBzdWJzY3JpcHRpb25zXG5cdCAqLyBnZXQgcm9vdEVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMucm9vdEVsZW1lbnQ7XG4gICAgfVxuICAgIHNldHVwKCkge1xuICAgICAgICBjb25zdCByb290ID0gdGhpcy5yb290RWxlbWVudDtcbiAgICAgICAgaWYgKHJvb3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyb290Ll9faXNSZWFjdERuZEJhY2tlbmRTZXRVcCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgaGF2ZSB0d28gSFRNTDUgYmFja2VuZHMgYXQgdGhlIHNhbWUgdGltZS4nKTtcbiAgICAgICAgfVxuICAgICAgICByb290Ll9faXNSZWFjdERuZEJhY2tlbmRTZXRVcCA9IHRydWU7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMocm9vdCk7XG4gICAgfVxuICAgIHRlYXJkb3duKCkge1xuICAgICAgICBjb25zdCByb290ID0gdGhpcy5yb290RWxlbWVudDtcbiAgICAgICAgaWYgKHJvb3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJvb3QuX19pc1JlYWN0RG5kQmFja2VuZFNldFVwID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnModGhpcy5yb290RWxlbWVudCk7XG4gICAgICAgIHRoaXMuY2xlYXJDdXJyZW50RHJhZ1NvdXJjZU5vZGUoKTtcbiAgICAgICAgaWYgKHRoaXMuYXN5bmNFbmREcmFnRnJhbWVJZCkge1xuICAgICAgICAgICAgdmFyIHJlZjtcbiAgICAgICAgICAgIChyZWYgPSB0aGlzLndpbmRvdykgPT09IG51bGwgfHwgcmVmID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZWYuY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5hc3luY0VuZERyYWdGcmFtZUlkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25uZWN0RHJhZ1ByZXZpZXcoc291cmNlSWQsIG5vZGUsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5zb3VyY2VQcmV2aWV3Tm9kZU9wdGlvbnMuc2V0KHNvdXJjZUlkLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5zb3VyY2VQcmV2aWV3Tm9kZXMuc2V0KHNvdXJjZUlkLCBub2RlKTtcbiAgICAgICAgcmV0dXJuICgpPT57XG4gICAgICAgICAgICB0aGlzLnNvdXJjZVByZXZpZXdOb2Rlcy5kZWxldGUoc291cmNlSWQpO1xuICAgICAgICAgICAgdGhpcy5zb3VyY2VQcmV2aWV3Tm9kZU9wdGlvbnMuZGVsZXRlKHNvdXJjZUlkKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29ubmVjdERyYWdTb3VyY2Uoc291cmNlSWQsIG5vZGUsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5zb3VyY2VOb2Rlcy5zZXQoc291cmNlSWQsIG5vZGUpO1xuICAgICAgICB0aGlzLnNvdXJjZU5vZGVPcHRpb25zLnNldChzb3VyY2VJZCwgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGhhbmRsZURyYWdTdGFydCA9IChlKT0+dGhpcy5oYW5kbGVEcmFnU3RhcnQoZSwgc291cmNlSWQpXG4gICAgICAgIDtcbiAgICAgICAgY29uc3QgaGFuZGxlU2VsZWN0U3RhcnQgPSAoZSk9PnRoaXMuaGFuZGxlU2VsZWN0U3RhcnQoZSlcbiAgICAgICAgO1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZSgnZHJhZ2dhYmxlJywgJ3RydWUnKTtcbiAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCBoYW5kbGVEcmFnU3RhcnQpO1xuICAgICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ3NlbGVjdHN0YXJ0JywgaGFuZGxlU2VsZWN0U3RhcnQpO1xuICAgICAgICByZXR1cm4gKCk9PntcbiAgICAgICAgICAgIHRoaXMuc291cmNlTm9kZXMuZGVsZXRlKHNvdXJjZUlkKTtcbiAgICAgICAgICAgIHRoaXMuc291cmNlTm9kZU9wdGlvbnMuZGVsZXRlKHNvdXJjZUlkKTtcbiAgICAgICAgICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHJhZ3N0YXJ0JywgaGFuZGxlRHJhZ1N0YXJ0KTtcbiAgICAgICAgICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2VsZWN0c3RhcnQnLCBoYW5kbGVTZWxlY3RTdGFydCk7XG4gICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZSgnZHJhZ2dhYmxlJywgJ2ZhbHNlJyk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbm5lY3REcm9wVGFyZ2V0KHRhcmdldElkLCBub2RlKSB7XG4gICAgICAgIGNvbnN0IGhhbmRsZURyYWdFbnRlciA9IChlKT0+dGhpcy5oYW5kbGVEcmFnRW50ZXIoZSwgdGFyZ2V0SWQpXG4gICAgICAgIDtcbiAgICAgICAgY29uc3QgaGFuZGxlRHJhZ092ZXIgPSAoZSk9PnRoaXMuaGFuZGxlRHJhZ092ZXIoZSwgdGFyZ2V0SWQpXG4gICAgICAgIDtcbiAgICAgICAgY29uc3QgaGFuZGxlRHJvcCA9IChlKT0+dGhpcy5oYW5kbGVEcm9wKGUsIHRhcmdldElkKVxuICAgICAgICA7XG4gICAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VudGVyJywgaGFuZGxlRHJhZ0VudGVyKTtcbiAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIGhhbmRsZURyYWdPdmVyKTtcbiAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgaGFuZGxlRHJvcCk7XG4gICAgICAgIHJldHVybiAoKT0+e1xuICAgICAgICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdkcmFnZW50ZXInLCBoYW5kbGVEcmFnRW50ZXIpO1xuICAgICAgICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIGhhbmRsZURyYWdPdmVyKTtcbiAgICAgICAgICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHJvcCcsIGhhbmRsZURyb3ApO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBhZGRFdmVudExpc3RlbmVycyh0YXJnZXQpIHtcbiAgICAgICAgLy8gU1NSIEZpeCAoaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LWRuZC9yZWFjdC1kbmQvcHVsbC84MTNcbiAgICAgICAgaWYgKCF0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCB0aGlzLmhhbmRsZVRvcERyYWdTdGFydCk7XG4gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCB0aGlzLmhhbmRsZVRvcERyYWdTdGFydENhcHR1cmUsIHRydWUpO1xuICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VuZCcsIHRoaXMuaGFuZGxlVG9wRHJhZ0VuZENhcHR1cmUsIHRydWUpO1xuICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VudGVyJywgdGhpcy5oYW5kbGVUb3BEcmFnRW50ZXIpO1xuICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VudGVyJywgdGhpcy5oYW5kbGVUb3BEcmFnRW50ZXJDYXB0dXJlLCB0cnVlKTtcbiAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdsZWF2ZScsIHRoaXMuaGFuZGxlVG9wRHJhZ0xlYXZlQ2FwdHVyZSwgdHJ1ZSk7XG4gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIHRoaXMuaGFuZGxlVG9wRHJhZ092ZXIpO1xuICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLCB0aGlzLmhhbmRsZVRvcERyYWdPdmVyQ2FwdHVyZSwgdHJ1ZSk7XG4gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgdGhpcy5oYW5kbGVUb3BEcm9wKTtcbiAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCB0aGlzLmhhbmRsZVRvcERyb3BDYXB0dXJlLCB0cnVlKTtcbiAgICB9XG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnModGFyZ2V0KSB7XG4gICAgICAgIC8vIFNTUiBGaXggKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1kbmQvcmVhY3QtZG5kL3B1bGwvODEzXG4gICAgICAgIGlmICghdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHJhZ3N0YXJ0JywgdGhpcy5oYW5kbGVUb3BEcmFnU3RhcnQpO1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHJhZ3N0YXJ0JywgdGhpcy5oYW5kbGVUb3BEcmFnU3RhcnRDYXB0dXJlLCB0cnVlKTtcbiAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2RyYWdlbmQnLCB0aGlzLmhhbmRsZVRvcERyYWdFbmRDYXB0dXJlLCB0cnVlKTtcbiAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2RyYWdlbnRlcicsIHRoaXMuaGFuZGxlVG9wRHJhZ0VudGVyKTtcbiAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2RyYWdlbnRlcicsIHRoaXMuaGFuZGxlVG9wRHJhZ0VudGVyQ2FwdHVyZSwgdHJ1ZSk7XG4gICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdkcmFnbGVhdmUnLCB0aGlzLmhhbmRsZVRvcERyYWdMZWF2ZUNhcHR1cmUsIHRydWUpO1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLCB0aGlzLmhhbmRsZVRvcERyYWdPdmVyKTtcbiAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgdGhpcy5oYW5kbGVUb3BEcmFnT3ZlckNhcHR1cmUsIHRydWUpO1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHJvcCcsIHRoaXMuaGFuZGxlVG9wRHJvcCk7XG4gICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdkcm9wJywgdGhpcy5oYW5kbGVUb3BEcm9wQ2FwdHVyZSwgdHJ1ZSk7XG4gICAgfVxuICAgIGdldEN1cnJlbnRTb3VyY2VOb2RlT3B0aW9ucygpIHtcbiAgICAgICAgY29uc3Qgc291cmNlSWQgPSB0aGlzLm1vbml0b3IuZ2V0U291cmNlSWQoKTtcbiAgICAgICAgY29uc3Qgc291cmNlTm9kZU9wdGlvbnMgPSB0aGlzLnNvdXJjZU5vZGVPcHRpb25zLmdldChzb3VyY2VJZCk7XG4gICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHtcbiAgICAgICAgICAgIGRyb3BFZmZlY3Q6IHRoaXMuYWx0S2V5UHJlc3NlZCA/ICdjb3B5JyA6ICdtb3ZlJ1xuICAgICAgICB9LCBzb3VyY2VOb2RlT3B0aW9ucyB8fCB7fSk7XG4gICAgfVxuICAgIGdldEN1cnJlbnREcm9wRWZmZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5pc0RyYWdnaW5nTmF0aXZlSXRlbSgpKSB7XG4gICAgICAgICAgICAvLyBJdCBtYWtlcyBtb3JlIHNlbnNlIHRvIGRlZmF1bHQgdG8gJ2NvcHknIGZvciBuYXRpdmUgcmVzb3VyY2VzXG4gICAgICAgICAgICByZXR1cm4gJ2NvcHknO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRTb3VyY2VOb2RlT3B0aW9ucygpLmRyb3BFZmZlY3Q7XG4gICAgfVxuICAgIGdldEN1cnJlbnRTb3VyY2VQcmV2aWV3Tm9kZU9wdGlvbnMoKSB7XG4gICAgICAgIGNvbnN0IHNvdXJjZUlkID0gdGhpcy5tb25pdG9yLmdldFNvdXJjZUlkKCk7XG4gICAgICAgIGNvbnN0IHNvdXJjZVByZXZpZXdOb2RlT3B0aW9ucyA9IHRoaXMuc291cmNlUHJldmlld05vZGVPcHRpb25zLmdldChzb3VyY2VJZCk7XG4gICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHtcbiAgICAgICAgICAgIGFuY2hvclg6IDAuNSxcbiAgICAgICAgICAgIGFuY2hvclk6IDAuNSxcbiAgICAgICAgICAgIGNhcHR1cmVEcmFnZ2luZ1N0YXRlOiBmYWxzZVxuICAgICAgICB9LCBzb3VyY2VQcmV2aWV3Tm9kZU9wdGlvbnMgfHwge30pO1xuICAgIH1cbiAgICBpc0RyYWdnaW5nTmF0aXZlSXRlbSgpIHtcbiAgICAgICAgY29uc3QgaXRlbVR5cGUgPSB0aGlzLm1vbml0b3IuZ2V0SXRlbVR5cGUoKTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKE5hdGl2ZVR5cGVzKS5zb21lKChrZXkpPT5OYXRpdmVUeXBlc1trZXldID09PSBpdGVtVHlwZVxuICAgICAgICApO1xuICAgIH1cbiAgICBiZWdpbkRyYWdOYXRpdmVJdGVtKHR5cGUsIGRhdGFUcmFuc2Zlcikge1xuICAgICAgICB0aGlzLmNsZWFyQ3VycmVudERyYWdTb3VyY2VOb2RlKCk7XG4gICAgICAgIHRoaXMuY3VycmVudE5hdGl2ZVNvdXJjZSA9IGNyZWF0ZU5hdGl2ZURyYWdTb3VyY2UodHlwZSwgZGF0YVRyYW5zZmVyKTtcbiAgICAgICAgdGhpcy5jdXJyZW50TmF0aXZlSGFuZGxlID0gdGhpcy5yZWdpc3RyeS5hZGRTb3VyY2UodHlwZSwgdGhpcy5jdXJyZW50TmF0aXZlU291cmNlKTtcbiAgICAgICAgdGhpcy5hY3Rpb25zLmJlZ2luRHJhZyhbXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnROYXRpdmVIYW5kbGVcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIHNldEN1cnJlbnREcmFnU291cmNlTm9kZShub2RlKSB7XG4gICAgICAgIHRoaXMuY2xlYXJDdXJyZW50RHJhZ1NvdXJjZU5vZGUoKTtcbiAgICAgICAgdGhpcy5jdXJyZW50RHJhZ1NvdXJjZU5vZGUgPSBub2RlO1xuICAgICAgICAvLyBBIHRpbWVvdXQgb2YgPiAwIGlzIG5lY2Vzc2FyeSB0byByZXNvbHZlIEZpcmVmb3ggaXNzdWUgcmVmZXJlbmNlZFxuICAgICAgICAvLyBTZWU6XG4gICAgICAgIC8vICAgKiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtZG5kL3JlYWN0LWRuZC9wdWxsLzkyOFxuICAgICAgICAvLyAgICogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LWRuZC9yZWFjdC1kbmQvaXNzdWVzLzg2OVxuICAgICAgICBjb25zdCBNT1VTRV9NT1ZFX1RJTUVPVVQgPSAxMDAwO1xuICAgICAgICAvLyBSZWNlaXZpbmcgYSBtb3VzZSBldmVudCBpbiB0aGUgbWlkZGxlIG9mIGEgZHJhZ2dpbmcgb3BlcmF0aW9uXG4gICAgICAgIC8vIG1lYW5zIGl0IGhhcyBlbmRlZCBhbmQgdGhlIGRyYWcgc291cmNlIG5vZGUgZGlzYXBwZWFyZWQgZnJvbSBET00sXG4gICAgICAgIC8vIHNvIHRoZSBicm93c2VyIGRpZG4ndCBkaXNwYXRjaCB0aGUgZHJhZ2VuZCBldmVudC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gV2UgbmVlZCB0byB3YWl0IGJlZm9yZSB3ZSBzdGFydCBsaXN0ZW5pbmcgZm9yIG1vdXNlbW92ZSBldmVudHMuXG4gICAgICAgIC8vIFRoaXMgaXMgbmVlZGVkIGJlY2F1c2UgdGhlIGRyYWcgcHJldmlldyBuZWVkcyB0byBiZSBkcmF3biBvciBlbHNlIGl0IGZpcmVzIGFuICdtb3VzZW1vdmUnIGV2ZW50XG4gICAgICAgIC8vIGltbWVkaWF0ZWx5IGluIHNvbWUgYnJvd3NlcnMuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFNlZTpcbiAgICAgICAgLy8gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1kbmQvcmVhY3QtZG5kL3B1bGwvOTI4XG4gICAgICAgIC8vICAgKiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtZG5kL3JlYWN0LWRuZC9pc3N1ZXMvODY5XG4gICAgICAgIC8vXG4gICAgICAgIHRoaXMubW91c2VNb3ZlVGltZW91dFRpbWVyID0gc2V0VGltZW91dCgoKT0+e1xuICAgICAgICAgICAgdmFyIHJlZjtcbiAgICAgICAgICAgIHJldHVybiAocmVmID0gdGhpcy5yb290RWxlbWVudCkgPT09IG51bGwgfHwgcmVmID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZWYuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5lbmREcmFnSWZTb3VyY2VXYXNSZW1vdmVkRnJvbURPTSwgdHJ1ZSk7XG4gICAgICAgIH0sIE1PVVNFX01PVkVfVElNRU9VVCk7XG4gICAgfVxuICAgIGNsZWFyQ3VycmVudERyYWdTb3VyY2VOb2RlKCkge1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50RHJhZ1NvdXJjZU5vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudERyYWdTb3VyY2VOb2RlID0gbnVsbDtcbiAgICAgICAgICAgIGlmICh0aGlzLnJvb3RFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlZjtcbiAgICAgICAgICAgICAgICAocmVmID0gdGhpcy53aW5kb3cpID09PSBudWxsIHx8IHJlZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVmLmNsZWFyVGltZW91dCh0aGlzLm1vdXNlTW92ZVRpbWVvdXRUaW1lciB8fCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgIHRoaXMucm9vdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5lbmREcmFnSWZTb3VyY2VXYXNSZW1vdmVkRnJvbURPTSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm1vdXNlTW92ZVRpbWVvdXRUaW1lciA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGhhbmRsZURyYWdTdGFydChlLCBzb3VyY2VJZCkge1xuICAgICAgICBpZiAoZS5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmRyYWdTdGFydFNvdXJjZUlkcykge1xuICAgICAgICAgICAgdGhpcy5kcmFnU3RhcnRTb3VyY2VJZHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRyYWdTdGFydFNvdXJjZUlkcy51bnNoaWZ0KHNvdXJjZUlkKTtcbiAgICB9XG4gICAgaGFuZGxlRHJhZ0VudGVyKF9lLCB0YXJnZXRJZCkge1xuICAgICAgICB0aGlzLmRyYWdFbnRlclRhcmdldElkcy51bnNoaWZ0KHRhcmdldElkKTtcbiAgICB9XG4gICAgaGFuZGxlRHJhZ092ZXIoX2UsIHRhcmdldElkKSB7XG4gICAgICAgIGlmICh0aGlzLmRyYWdPdmVyVGFyZ2V0SWRzID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmRyYWdPdmVyVGFyZ2V0SWRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kcmFnT3ZlclRhcmdldElkcy51bnNoaWZ0KHRhcmdldElkKTtcbiAgICB9XG4gICAgaGFuZGxlRHJvcChfZSwgdGFyZ2V0SWQpIHtcbiAgICAgICAgdGhpcy5kcm9wVGFyZ2V0SWRzLnVuc2hpZnQodGFyZ2V0SWQpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihtYW5hZ2VyLCBnbG9iYWxDb250ZXh0LCBvcHRpb25zKXtcbiAgICAgICAgdGhpcy5zb3VyY2VQcmV2aWV3Tm9kZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuc291cmNlUHJldmlld05vZGVPcHRpb25zID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLnNvdXJjZU5vZGVzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLnNvdXJjZU5vZGVPcHRpb25zID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLmRyYWdTdGFydFNvdXJjZUlkcyA9IG51bGw7XG4gICAgICAgIHRoaXMuZHJvcFRhcmdldElkcyA9IFtdO1xuICAgICAgICB0aGlzLmRyYWdFbnRlclRhcmdldElkcyA9IFtdO1xuICAgICAgICB0aGlzLmN1cnJlbnROYXRpdmVTb3VyY2UgPSBudWxsO1xuICAgICAgICB0aGlzLmN1cnJlbnROYXRpdmVIYW5kbGUgPSBudWxsO1xuICAgICAgICB0aGlzLmN1cnJlbnREcmFnU291cmNlTm9kZSA9IG51bGw7XG4gICAgICAgIHRoaXMuYWx0S2V5UHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLm1vdXNlTW92ZVRpbWVvdXRUaW1lciA9IG51bGw7XG4gICAgICAgIHRoaXMuYXN5bmNFbmREcmFnRnJhbWVJZCA9IG51bGw7XG4gICAgICAgIHRoaXMuZHJhZ092ZXJUYXJnZXRJZHMgPSBudWxsO1xuICAgICAgICB0aGlzLmxhc3RDbGllbnRPZmZzZXQgPSBudWxsO1xuICAgICAgICB0aGlzLmhvdmVyUmFmSWQgPSBudWxsO1xuICAgICAgICB0aGlzLmdldFNvdXJjZUNsaWVudE9mZnNldCA9IChzb3VyY2VJZCk9PntcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IHRoaXMuc291cmNlTm9kZXMuZ2V0KHNvdXJjZUlkKTtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2UgJiYgZ2V0Tm9kZUNsaWVudE9mZnNldChzb3VyY2UpIHx8IG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZW5kRHJhZ05hdGl2ZUl0ZW0gPSAoKT0+e1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlzRHJhZ2dpbmdOYXRpdmVJdGVtKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmFjdGlvbnMuZW5kRHJhZygpO1xuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudE5hdGl2ZUhhbmRsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVnaXN0cnkucmVtb3ZlU291cmNlKHRoaXMuY3VycmVudE5hdGl2ZUhhbmRsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnROYXRpdmVIYW5kbGUgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50TmF0aXZlU291cmNlID0gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5pc05vZGVJbkRvY3VtZW50ID0gKG5vZGUpPT57XG4gICAgICAgICAgICAvLyBDaGVjayB0aGUgbm9kZSBlaXRoZXIgaW4gdGhlIG1haW4gZG9jdW1lbnQgb3IgaW4gdGhlIGN1cnJlbnQgY29udGV4dFxuICAgICAgICAgICAgcmV0dXJuIEJvb2xlYW4obm9kZSAmJiB0aGlzLmRvY3VtZW50ICYmIHRoaXMuZG9jdW1lbnQuYm9keSAmJiB0aGlzLmRvY3VtZW50LmJvZHkuY29udGFpbnMobm9kZSkpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmVuZERyYWdJZlNvdXJjZVdhc1JlbW92ZWRGcm9tRE9NID0gKCk9PntcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmN1cnJlbnREcmFnU291cmNlTm9kZTtcbiAgICAgICAgICAgIGlmIChub2RlID09IG51bGwgfHwgdGhpcy5pc05vZGVJbkRvY3VtZW50KG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuY2xlYXJDdXJyZW50RHJhZ1NvdXJjZU5vZGUoKSAmJiB0aGlzLm1vbml0b3IuaXNEcmFnZ2luZygpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zLmVuZERyYWcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY2FuY2VsSG92ZXIoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZUhvdmVyID0gKGRyYWdPdmVyVGFyZ2V0SWRzKT0+e1xuICAgICAgICAgICAgaWYgKHRoaXMuaG92ZXJSYWZJZCA9PT0gbnVsbCAmJiB0eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHRoaXMuaG92ZXJSYWZJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKT0+e1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tb25pdG9yLmlzRHJhZ2dpbmcoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zLmhvdmVyKGRyYWdPdmVyVGFyZ2V0SWRzIHx8IFtdLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50T2Zmc2V0OiB0aGlzLmxhc3RDbGllbnRPZmZzZXRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaG92ZXJSYWZJZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY2FuY2VsSG92ZXIgPSAoKT0+e1xuICAgICAgICAgICAgaWYgKHRoaXMuaG92ZXJSYWZJZCAhPT0gbnVsbCAmJiB0eXBlb2YgY2FuY2VsQW5pbWF0aW9uRnJhbWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5ob3ZlclJhZklkKTtcbiAgICAgICAgICAgICAgICB0aGlzLmhvdmVyUmFmSWQgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmhhbmRsZVRvcERyYWdTdGFydENhcHR1cmUgPSAoKT0+e1xuICAgICAgICAgICAgdGhpcy5jbGVhckN1cnJlbnREcmFnU291cmNlTm9kZSgpO1xuICAgICAgICAgICAgdGhpcy5kcmFnU3RhcnRTb3VyY2VJZHMgPSBbXTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVUb3BEcmFnU3RhcnQgPSAoZSk9PntcbiAgICAgICAgICAgIGlmIChlLmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB7IGRyYWdTdGFydFNvdXJjZUlkcyAgfSA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLmRyYWdTdGFydFNvdXJjZUlkcyA9IG51bGw7XG4gICAgICAgICAgICBjb25zdCBjbGllbnRPZmZzZXQgPSBnZXRFdmVudENsaWVudE9mZnNldChlKTtcbiAgICAgICAgICAgIC8vIEF2b2lkIGNyYXNoaW5nIGlmIHdlIG1pc3NlZCBhIGRyb3AgZXZlbnQgb3Igb3VyIHByZXZpb3VzIGRyYWcgZGllZFxuICAgICAgICAgICAgaWYgKHRoaXMubW9uaXRvci5pc0RyYWdnaW5nKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGlvbnMuZW5kRHJhZygpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2FuY2VsSG92ZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERvbid0IHB1Ymxpc2ggdGhlIHNvdXJjZSBqdXN0IHlldCAoc2VlIHdoeSBiZWxvdylcbiAgICAgICAgICAgIHRoaXMuYWN0aW9ucy5iZWdpbkRyYWcoZHJhZ1N0YXJ0U291cmNlSWRzIHx8IFtdLCB7XG4gICAgICAgICAgICAgICAgcHVibGlzaFNvdXJjZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZ2V0U291cmNlQ2xpZW50T2Zmc2V0OiB0aGlzLmdldFNvdXJjZUNsaWVudE9mZnNldCxcbiAgICAgICAgICAgICAgICBjbGllbnRPZmZzZXRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgeyBkYXRhVHJhbnNmZXIgIH0gPSBlO1xuICAgICAgICAgICAgY29uc3QgbmF0aXZlVHlwZSA9IG1hdGNoTmF0aXZlSXRlbVR5cGUoZGF0YVRyYW5zZmVyKTtcbiAgICAgICAgICAgIGlmICh0aGlzLm1vbml0b3IuaXNEcmFnZ2luZygpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGFUcmFuc2ZlciAmJiB0eXBlb2YgZGF0YVRyYW5zZmVyLnNldERyYWdJbWFnZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBVc2UgY3VzdG9tIGRyYWcgaW1hZ2UgaWYgdXNlciBzcGVjaWZpZXMgaXQuXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGNoaWxkIGRyYWcgc291cmNlIHJlZnVzZXMgZHJhZyBidXQgcGFyZW50IGFncmVlcyxcbiAgICAgICAgICAgICAgICAgICAgLy8gdXNlIHBhcmVudCdzIG5vZGUgYXMgZHJhZyBpbWFnZS4gTmVpdGhlciB3b3JrcyBpbiBJRSB0aG91Z2guXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZUlkID0gdGhpcy5tb25pdG9yLmdldFNvdXJjZUlkKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZU5vZGUgPSB0aGlzLnNvdXJjZU5vZGVzLmdldChzb3VyY2VJZCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRyYWdQcmV2aWV3ID0gdGhpcy5zb3VyY2VQcmV2aWV3Tm9kZXMuZ2V0KHNvdXJjZUlkKSB8fCBzb3VyY2VOb2RlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZHJhZ1ByZXZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgYW5jaG9yWCAsIGFuY2hvclkgLCBvZmZzZXRYICwgb2Zmc2V0WSAgfSA9IHRoaXMuZ2V0Q3VycmVudFNvdXJjZVByZXZpZXdOb2RlT3B0aW9ucygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5jaG9yUG9pbnQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yWCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JZXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0UG9pbnQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRZXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZHJhZ1ByZXZpZXdPZmZzZXQgPSBnZXREcmFnUHJldmlld09mZnNldChzb3VyY2VOb2RlLCBkcmFnUHJldmlldywgY2xpZW50T2Zmc2V0LCBhbmNob3JQb2ludCwgb2Zmc2V0UG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVRyYW5zZmVyLnNldERyYWdJbWFnZShkcmFnUHJldmlldywgZHJhZ1ByZXZpZXdPZmZzZXQueCwgZHJhZ1ByZXZpZXdPZmZzZXQueSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRmlyZWZveCB3b24ndCBkcmFnIHdpdGhvdXQgc2V0dGluZyBkYXRhXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUcmFuc2ZlciA9PT0gbnVsbCB8fCBkYXRhVHJhbnNmZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGFUcmFuc2Zlci5zZXREYXRhKCdhcHBsaWNhdGlvbi9qc29uJywge30pO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIC8vIElFIGRvZXNuJ3Qgc3VwcG9ydCBNSU1FIHR5cGVzIGluIHNldERhdGFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gU3RvcmUgZHJhZyBzb3VyY2Ugbm9kZSBzbyB3ZSBjYW4gY2hlY2sgd2hldGhlclxuICAgICAgICAgICAgICAgIC8vIGl0IGlzIHJlbW92ZWQgZnJvbSBET00gYW5kIHRyaWdnZXIgZW5kRHJhZyBtYW51YWxseS5cbiAgICAgICAgICAgICAgICB0aGlzLnNldEN1cnJlbnREcmFnU291cmNlTm9kZShlLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgLy8gTm93IHdlIGFyZSByZWFkeSB0byBwdWJsaXNoIHRoZSBkcmFnIHNvdXJjZS4uIG9yIGFyZSB3ZSBub3Q/XG4gICAgICAgICAgICAgICAgY29uc3QgeyBjYXB0dXJlRHJhZ2dpbmdTdGF0ZSAgfSA9IHRoaXMuZ2V0Q3VycmVudFNvdXJjZVByZXZpZXdOb2RlT3B0aW9ucygpO1xuICAgICAgICAgICAgICAgIGlmICghY2FwdHVyZURyYWdnaW5nU3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVXN1YWxseSB3ZSB3YW50IHRvIHB1Ymxpc2ggaXQgaW4gdGhlIG5leHQgdGljayBzbyB0aGF0IGJyb3dzZXJcbiAgICAgICAgICAgICAgICAgICAgLy8gaXMgYWJsZSB0byBzY3JlZW5zaG90IHRoZSBjdXJyZW50IChub3QgeWV0IGRyYWdnaW5nKSBzdGF0ZS5cbiAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgLy8gSXQgYWxzbyBuZWF0bHkgYXZvaWRzIGEgc2l0dWF0aW9uIHdoZXJlIHJlbmRlcigpIHJldHVybnMgbnVsbFxuICAgICAgICAgICAgICAgICAgICAvLyBpbiB0aGUgc2FtZSB0aWNrIGZvciB0aGUgc291cmNlIGVsZW1lbnQsIGFuZCBicm93c2VyIGZyZWFrcyBvdXQuXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCk9PnRoaXMuYWN0aW9ucy5wdWJsaXNoRHJhZ1NvdXJjZSgpXG4gICAgICAgICAgICAgICAgICAgICwgMCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSW4gc29tZSBjYXNlcyB0aGUgdXNlciBtYXkgd2FudCB0byBvdmVycmlkZSB0aGlzIGJlaGF2aW9yLCBlLmcuXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvIHdvcmsgYXJvdW5kIElFIG5vdCBzdXBwb3J0aW5nIGN1c3RvbSBkcmFnIHByZXZpZXdzLlxuICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIHVzaW5nIGEgY3VzdG9tIGRyYWcgbGF5ZXIsIHRoZSBvbmx5IHdheSB0byBwcmV2ZW50XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBkZWZhdWx0IGRyYWcgcHJldmlldyBmcm9tIGRyYXdpbmcgaW4gSUUgaXMgdG8gc2NyZWVuc2hvdFxuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgZHJhZ2dpbmcgc3RhdGUgaW4gd2hpY2ggdGhlIG5vZGUgaXRzZWxmIGhhcyB6ZXJvIG9wYWNpdHlcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5kIGhlaWdodC4gSW4gdGhpcyBjYXNlLCB0aG91Z2gsIHJldHVybmluZyBudWxsIGZyb20gcmVuZGVyKClcbiAgICAgICAgICAgICAgICAgICAgLy8gd2lsbCBhYnJ1cHRseSBlbmQgdGhlIGRyYWdnaW5nLCB3aGljaCBpcyBub3Qgb2J2aW91cy5cbiAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBpcyB0aGUgcmVhc29uIHN1Y2ggYmVoYXZpb3IgaXMgc3RyaWN0bHkgb3B0LWluLlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGlvbnMucHVibGlzaERyYWdTb3VyY2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5hdGl2ZVR5cGUpIHtcbiAgICAgICAgICAgICAgICAvLyBBIG5hdGl2ZSBpdGVtIChzdWNoIGFzIFVSTCkgZHJhZ2dlZCBmcm9tIGluc2lkZSB0aGUgZG9jdW1lbnRcbiAgICAgICAgICAgICAgICB0aGlzLmJlZ2luRHJhZ05hdGl2ZUl0ZW0obmF0aXZlVHlwZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFUcmFuc2ZlciAmJiAhZGF0YVRyYW5zZmVyLnR5cGVzICYmIChlLnRhcmdldCAmJiAhZS50YXJnZXQuaGFzQXR0cmlidXRlIHx8ICFlLnRhcmdldC5oYXNBdHRyaWJ1dGUoJ2RyYWdnYWJsZScpKSkge1xuICAgICAgICAgICAgICAgIC8vIExvb2tzIGxpa2UgYSBTYWZhcmkgYnVnOiBkYXRhVHJhbnNmZXIudHlwZXMgaXMgbnVsbCwgYnV0IHRoZXJlIHdhcyBubyBkcmFnZ2FibGUuXG4gICAgICAgICAgICAgICAgLy8gSnVzdCBsZXQgaXQgZHJhZy4gSXQncyBhIG5hdGl2ZSB0eXBlIChVUkwgb3IgdGV4dCkgYW5kIHdpbGwgYmUgcGlja2VkIHVwIGluXG4gICAgICAgICAgICAgICAgLy8gZHJhZ2VudGVyIGhhbmRsZXIuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBieSB0aGlzIHRpbWUgbm8gZHJhZyBzb3VyY2UgcmVhY3RlZCwgdGVsbCBicm93c2VyIG5vdCB0byBkcmFnLlxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVUb3BEcmFnRW5kQ2FwdHVyZSA9ICgpPT57XG4gICAgICAgICAgICBpZiAodGhpcy5jbGVhckN1cnJlbnREcmFnU291cmNlTm9kZSgpICYmIHRoaXMubW9uaXRvci5pc0RyYWdnaW5nKCkpIHtcbiAgICAgICAgICAgICAgICAvLyBGaXJlZm94IGNhbiBkaXNwYXRjaCB0aGlzIGV2ZW50IGluIGFuIGluZmluaXRlIGxvb3BcbiAgICAgICAgICAgICAgICAvLyBpZiBkcmFnZW5kIGhhbmRsZXIgZG9lcyBzb21ldGhpbmcgbGlrZSBzaG93aW5nIGFuIGFsZXJ0LlxuICAgICAgICAgICAgICAgIC8vIE9ubHkgcHJvY2VlZCBpZiB3ZSBoYXZlIG5vdCBoYW5kbGVkIGl0IGFscmVhZHkuXG4gICAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zLmVuZERyYWcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY2FuY2VsSG92ZXIoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVUb3BEcmFnRW50ZXJDYXB0dXJlID0gKGUpPT57XG4gICAgICAgICAgICB0aGlzLmRyYWdFbnRlclRhcmdldElkcyA9IFtdO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNEcmFnZ2luZ05hdGl2ZUl0ZW0oKSkge1xuICAgICAgICAgICAgICAgIHZhciByZWY7XG4gICAgICAgICAgICAgICAgKHJlZiA9IHRoaXMuY3VycmVudE5hdGl2ZVNvdXJjZSkgPT09IG51bGwgfHwgcmVmID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZWYubG9hZERhdGFUcmFuc2ZlcihlLmRhdGFUcmFuc2Zlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBpc0ZpcnN0RW50ZXIgPSB0aGlzLmVudGVyTGVhdmVDb3VudGVyLmVudGVyKGUudGFyZ2V0KTtcbiAgICAgICAgICAgIGlmICghaXNGaXJzdEVudGVyIHx8IHRoaXMubW9uaXRvci5pc0RyYWdnaW5nKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB7IGRhdGFUcmFuc2ZlciAgfSA9IGU7XG4gICAgICAgICAgICBjb25zdCBuYXRpdmVUeXBlID0gbWF0Y2hOYXRpdmVJdGVtVHlwZShkYXRhVHJhbnNmZXIpO1xuICAgICAgICAgICAgaWYgKG5hdGl2ZVR5cGUpIHtcbiAgICAgICAgICAgICAgICAvLyBBIG5hdGl2ZSBpdGVtIChzdWNoIGFzIGZpbGUgb3IgVVJMKSBkcmFnZ2VkIGZyb20gb3V0c2lkZSB0aGUgZG9jdW1lbnRcbiAgICAgICAgICAgICAgICB0aGlzLmJlZ2luRHJhZ05hdGl2ZUl0ZW0obmF0aXZlVHlwZSwgZGF0YVRyYW5zZmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVUb3BEcmFnRW50ZXIgPSAoZSk9PntcbiAgICAgICAgICAgIGNvbnN0IHsgZHJhZ0VudGVyVGFyZ2V0SWRzICB9ID0gdGhpcztcbiAgICAgICAgICAgIHRoaXMuZHJhZ0VudGVyVGFyZ2V0SWRzID0gW107XG4gICAgICAgICAgICBpZiAoIXRoaXMubW9uaXRvci5pc0RyYWdnaW5nKCkpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIHByb2JhYmx5IGEgbmF0aXZlIGl0ZW0gdHlwZSB3ZSBkb24ndCB1bmRlcnN0YW5kLlxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYWx0S2V5UHJlc3NlZCA9IGUuYWx0S2V5O1xuICAgICAgICAgICAgLy8gSWYgdGhlIHRhcmdldCBjaGFuZ2VzIHBvc2l0aW9uIGFzIHRoZSByZXN1bHQgb2YgYGRyYWdlbnRlcmAsIGBkcmFnb3ZlcmAgbWlnaHQgc3RpbGxcbiAgICAgICAgICAgIC8vIGdldCBkaXNwYXRjaGVkIGRlc3BpdGUgdGFyZ2V0IGJlaW5nIG5vIGxvbmdlciB0aGVyZS4gVGhlIGVhc3kgc29sdXRpb24gaXMgdG8gY2hlY2tcbiAgICAgICAgICAgIC8vIHdoZXRoZXIgdGhlcmUgYWN0dWFsbHkgaXMgYSB0YXJnZXQgYmVmb3JlIGZpcmluZyBgaG92ZXJgLlxuICAgICAgICAgICAgaWYgKGRyYWdFbnRlclRhcmdldElkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zLmhvdmVyKGRyYWdFbnRlclRhcmdldElkcywge1xuICAgICAgICAgICAgICAgICAgICBjbGllbnRPZmZzZXQ6IGdldEV2ZW50Q2xpZW50T2Zmc2V0KGUpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjYW5Ecm9wID0gZHJhZ0VudGVyVGFyZ2V0SWRzLnNvbWUoKHRhcmdldElkKT0+dGhpcy5tb25pdG9yLmNhbkRyb3BPblRhcmdldCh0YXJnZXRJZClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoY2FuRHJvcCkge1xuICAgICAgICAgICAgICAgIC8vIElFIHJlcXVpcmVzIHRoaXMgdG8gZmlyZSBkcmFnb3ZlciBldmVudHNcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgaWYgKGUuZGF0YVRyYW5zZmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGUuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3QgPSB0aGlzLmdldEN1cnJlbnREcm9wRWZmZWN0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmhhbmRsZVRvcERyYWdPdmVyQ2FwdHVyZSA9IChlKT0+e1xuICAgICAgICAgICAgdGhpcy5kcmFnT3ZlclRhcmdldElkcyA9IFtdO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNEcmFnZ2luZ05hdGl2ZUl0ZW0oKSkge1xuICAgICAgICAgICAgICAgIHZhciByZWY7XG4gICAgICAgICAgICAgICAgKHJlZiA9IHRoaXMuY3VycmVudE5hdGl2ZVNvdXJjZSkgPT09IG51bGwgfHwgcmVmID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZWYubG9hZERhdGFUcmFuc2ZlcihlLmRhdGFUcmFuc2Zlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlVG9wRHJhZ092ZXIgPSAoZSk9PntcbiAgICAgICAgICAgIGNvbnN0IHsgZHJhZ092ZXJUYXJnZXRJZHMgIH0gPSB0aGlzO1xuICAgICAgICAgICAgdGhpcy5kcmFnT3ZlclRhcmdldElkcyA9IFtdO1xuICAgICAgICAgICAgaWYgKCF0aGlzLm1vbml0b3IuaXNEcmFnZ2luZygpKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBwcm9iYWJseSBhIG5hdGl2ZSBpdGVtIHR5cGUgd2UgZG9uJ3QgdW5kZXJzdGFuZC5cbiAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IGRlZmF1bHQgXCJkcm9wIGFuZCBibG93IGF3YXkgdGhlIHdob2xlIGRvY3VtZW50XCIgYWN0aW9uLlxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBpZiAoZS5kYXRhVHJhbnNmZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9ICdub25lJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hbHRLZXlQcmVzc2VkID0gZS5hbHRLZXk7XG4gICAgICAgICAgICB0aGlzLmxhc3RDbGllbnRPZmZzZXQgPSBnZXRFdmVudENsaWVudE9mZnNldChlKTtcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVIb3ZlcihkcmFnT3ZlclRhcmdldElkcyk7XG4gICAgICAgICAgICBjb25zdCBjYW5Ecm9wID0gKGRyYWdPdmVyVGFyZ2V0SWRzIHx8IFtdKS5zb21lKCh0YXJnZXRJZCk9PnRoaXMubW9uaXRvci5jYW5Ecm9wT25UYXJnZXQodGFyZ2V0SWQpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKGNhbkRyb3ApIHtcbiAgICAgICAgICAgICAgICAvLyBTaG93IHVzZXItc3BlY2lmaWVkIGRyb3AgZWZmZWN0LlxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBpZiAoZS5kYXRhVHJhbnNmZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9IHRoaXMuZ2V0Q3VycmVudERyb3BFZmZlY3QoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNEcmFnZ2luZ05hdGl2ZUl0ZW0oKSkge1xuICAgICAgICAgICAgICAgIC8vIERvbid0IHNob3cgYSBuaWNlIGN1cnNvciBidXQgc3RpbGwgcHJldmVudCBkZWZhdWx0XG4gICAgICAgICAgICAgICAgLy8gXCJkcm9wIGFuZCBibG93IGF3YXkgdGhlIHdob2xlIGRvY3VtZW50XCIgYWN0aW9uLlxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGlmIChlLmRhdGFUcmFuc2Zlcikge1xuICAgICAgICAgICAgICAgICAgICBlLmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVUb3BEcmFnTGVhdmVDYXB0dXJlID0gKGUpPT57XG4gICAgICAgICAgICBpZiAodGhpcy5pc0RyYWdnaW5nTmF0aXZlSXRlbSgpKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaXNMYXN0TGVhdmUgPSB0aGlzLmVudGVyTGVhdmVDb3VudGVyLmxlYXZlKGUudGFyZ2V0KTtcbiAgICAgICAgICAgIGlmICghaXNMYXN0TGVhdmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5pc0RyYWdnaW5nTmF0aXZlSXRlbSgpKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKT0+dGhpcy5lbmREcmFnTmF0aXZlSXRlbSgpXG4gICAgICAgICAgICAgICAgLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY2FuY2VsSG92ZXIoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVUb3BEcm9wQ2FwdHVyZSA9IChlKT0+e1xuICAgICAgICAgICAgdGhpcy5kcm9wVGFyZ2V0SWRzID0gW107XG4gICAgICAgICAgICBpZiAodGhpcy5pc0RyYWdnaW5nTmF0aXZlSXRlbSgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlZjtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgKHJlZiA9IHRoaXMuY3VycmVudE5hdGl2ZVNvdXJjZSkgPT09IG51bGwgfHwgcmVmID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZWYubG9hZERhdGFUcmFuc2ZlcihlLmRhdGFUcmFuc2Zlcik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoTmF0aXZlSXRlbVR5cGUoZS5kYXRhVHJhbnNmZXIpKSB7XG4gICAgICAgICAgICAgICAgLy8gRHJhZ2dpbmcgc29tZSBlbGVtZW50cywgbGlrZSA8YT4gYW5kIDxpbWc+IG1heSBzdGlsbCBiZWhhdmUgbGlrZSBhIG5hdGl2ZSBkcmFnIGV2ZW50LFxuICAgICAgICAgICAgICAgIC8vIGV2ZW4gaWYgdGhlIGN1cnJlbnQgZHJhZyBldmVudCBtYXRjaGVzIGEgdXNlci1kZWZpbmVkIHR5cGUuXG4gICAgICAgICAgICAgICAgLy8gU3RvcCB0aGUgZGVmYXVsdCBiZWhhdmlvciB3aGVuIHdlJ3JlIG5vdCBleHBlY3RpbmcgYSBuYXRpdmUgaXRlbSB0byBiZSBkcm9wcGVkLlxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZW50ZXJMZWF2ZUNvdW50ZXIucmVzZXQoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVUb3BEcm9wID0gKGUpPT57XG4gICAgICAgICAgICBjb25zdCB7IGRyb3BUYXJnZXRJZHMgIH0gPSB0aGlzO1xuICAgICAgICAgICAgdGhpcy5kcm9wVGFyZ2V0SWRzID0gW107XG4gICAgICAgICAgICB0aGlzLmFjdGlvbnMuaG92ZXIoZHJvcFRhcmdldElkcywge1xuICAgICAgICAgICAgICAgIGNsaWVudE9mZnNldDogZ2V0RXZlbnRDbGllbnRPZmZzZXQoZSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5hY3Rpb25zLmRyb3Aoe1xuICAgICAgICAgICAgICAgIGRyb3BFZmZlY3Q6IHRoaXMuZ2V0Q3VycmVudERyb3BFZmZlY3QoKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAodGhpcy5pc0RyYWdnaW5nTmF0aXZlSXRlbSgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmREcmFnTmF0aXZlSXRlbSgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm1vbml0b3IuaXNEcmFnZ2luZygpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zLmVuZERyYWcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY2FuY2VsSG92ZXIoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVTZWxlY3RTdGFydCA9IChlKT0+e1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICAvLyBPbmx5IElFIHJlcXVpcmVzIHVzIHRvIGV4cGxpY2l0bHkgc2F5XG4gICAgICAgICAgICAvLyB3ZSB3YW50IGRyYWcgZHJvcCBvcGVyYXRpb24gdG8gc3RhcnRcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0LmRyYWdEcm9wICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSW5wdXRzIGFuZCB0ZXh0YXJlYXMgc2hvdWxkIGJlIHNlbGVjdGFibGVcbiAgICAgICAgICAgIGlmICh0YXJnZXQudGFnTmFtZSA9PT0gJ0lOUFVUJyB8fCB0YXJnZXQudGFnTmFtZSA9PT0gJ1NFTEVDVCcgfHwgdGFyZ2V0LnRhZ05hbWUgPT09ICdURVhUQVJFQScgfHwgdGFyZ2V0LmlzQ29udGVudEVkaXRhYmxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRm9yIG90aGVyIHRhcmdldHMsIGFzayBJRVxuICAgICAgICAgICAgLy8gdG8gZW5hYmxlIGRyYWcgYW5kIGRyb3BcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRhcmdldC5kcmFnRHJvcCgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBuZXcgT3B0aW9uc1JlYWRlcihnbG9iYWxDb250ZXh0LCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5hY3Rpb25zID0gbWFuYWdlci5nZXRBY3Rpb25zKCk7XG4gICAgICAgIHRoaXMubW9uaXRvciA9IG1hbmFnZXIuZ2V0TW9uaXRvcigpO1xuICAgICAgICB0aGlzLnJlZ2lzdHJ5ID0gbWFuYWdlci5nZXRSZWdpc3RyeSgpO1xuICAgICAgICB0aGlzLmVudGVyTGVhdmVDb3VudGVyID0gbmV3IEVudGVyTGVhdmVDb3VudGVyKHRoaXMuaXNOb2RlSW5Eb2N1bWVudCk7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1IVE1MNUJhY2tlbmRJbXBsLmpzLm1hcCIsImltcG9ydCB7IEhUTUw1QmFja2VuZEltcGwgfSBmcm9tICcuL0hUTUw1QmFja2VuZEltcGwuanMnO1xuaW1wb3J0ICogYXMgX05hdGl2ZVR5cGVzIGZyb20gJy4vTmF0aXZlVHlwZXMuanMnO1xuZXhwb3J0IHsgZ2V0RW1wdHlJbWFnZSB9IGZyb20gJy4vZ2V0RW1wdHlJbWFnZS5qcyc7XG5leHBvcnQgeyBfTmF0aXZlVHlwZXMgYXMgTmF0aXZlVHlwZXMgfTtcbmV4cG9ydCBjb25zdCBIVE1MNUJhY2tlbmQgPSBmdW5jdGlvbiBjcmVhdGVCYWNrZW5kKG1hbmFnZXIsIGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IEhUTUw1QmFja2VuZEltcGwobWFuYWdlciwgY29udGV4dCwgb3B0aW9ucyk7XG59O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJpbXBvcnQgeyBTdHlsZUFwcFdyYXBwZXIgfSBmcm9tIFwiLi9BcHAuc3R5bGVkXCI7XG5pbXBvcnQgV29ya291dFNjaGVkdWxlIGZyb20gXCIuL2NvbnRhaW5lcnMvcGFnZXMvV29ya291dFNjaGVkdWxlL1dvcmtvdXRTY2hlZHVsZVwiO1xuaW1wb3J0IHsgRGF0YVByb3ZpZGVyIH0gZnJvbSBcIi4vZGF0YS9EYXRhUmVkdWNlclwiO1xuaW1wb3J0IHsgRG5kUHJvdmlkZXIgfSBmcm9tIFwicmVhY3QtZG5kXCI7XG5pbXBvcnQgeyBIVE1MNUJhY2tlbmQgfSBmcm9tIFwicmVhY3QtZG5kLWh0bWw1LWJhY2tlbmRcIjtcblxuY29uc3QgQXBwID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxEbmRQcm92aWRlciBiYWNrZW5kPXtIVE1MNUJhY2tlbmR9PlxuICAgICAgPERhdGFQcm92aWRlcj5cbiAgICAgICAgPFN0eWxlQXBwV3JhcHBlcj5cbiAgICAgICAgICA8V29ya291dFNjaGVkdWxlIC8+XG4gICAgICAgIDwvU3R5bGVBcHBXcmFwcGVyPlxuICAgICAgPC9EYXRhUHJvdmlkZXI+XG4gICAgPC9EbmRQcm92aWRlcj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEFwcDtcbiIsImltcG9ydCBcIi4vaW5kZXguY3NzXCI7XG5pbXBvcnQgQXBwIGZyb20gXCIuL0FwcFwiO1xuaW1wb3J0IHsgY3JlYXRlUm9vdCB9IGZyb20gXCJyZWFjdC1kb20vY2xpZW50XCI7XG5cbmNvbnN0IHJvb3QgPSBjcmVhdGVSb290KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKSk7XG5cbnJvb3QucmVuZGVyKDxBcHAgLz4pO1xuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiaSIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsImVxdWFsIiwiYSIsImIiLCJjb25zdHJ1Y3RvciIsImtleXMiLCJBcnJheSIsImlzQXJyYXkiLCJSZWdFeHAiLCJzb3VyY2UiLCJmbGFncyIsInZhbHVlT2YiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJrZXkiLCJyZWFjdElzIiwiUkVBQ1RfU1RBVElDUyIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29udGV4dFR5cGUiLCJjb250ZXh0VHlwZXMiLCJkZWZhdWx0UHJvcHMiLCJkaXNwbGF5TmFtZSIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsInByb3BUeXBlcyIsInR5cGUiLCJLTk9XTl9TVEFUSUNTIiwibmFtZSIsImNhbGxlciIsImNhbGxlZSIsImFyZ3VtZW50cyIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwicmVuZGVyIiwiTWVtbyIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsImRlc2NyaXB0b3IiLCJlIiwiU3ltYm9sIiwiZm9yIiwiYyIsImQiLCJmIiwiZyIsImgiLCJsIiwibSIsIm4iLCJwIiwicSIsInIiLCJ0IiwidiIsInciLCJ4IiwieSIsInoiLCJ1IiwiJCR0eXBlb2YiLCJBIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiRnJhZ21lbnQiLCJMYXp5IiwiUG9ydGFsIiwiUHJvZmlsZXIiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNFbGVtZW50IiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJ0eXBlT2YiLCJhYSIsImNhIiwiZGEiLCJTZXQiLCJlYSIsImZhIiwiaGEiLCJhZGQiLCJpYSIsIndpbmRvdyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImphIiwia2EiLCJsYSIsIm1hIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwicmVtb3ZlRW1wdHlTdHJpbmciLCJzcGxpdCIsImZvckVhY2giLCJ0b0xvd2VyQ2FzZSIsInJhIiwic2EiLCJ0b1VwcGVyQ2FzZSIsInRhIiwic2xpY2UiLCJwYSIsImlzTmFOIiwicWEiLCJ0ZXN0Iiwib2EiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsInJlcGxhY2UiLCJ4bGlua0hyZWYiLCJ1YSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwidmEiLCJ3YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIml0ZXJhdG9yIiwiS2EiLCJMYSIsImFzc2lnbiIsIk1hIiwiRXJyb3IiLCJzdGFjayIsInRyaW0iLCJtYXRjaCIsIk5hIiwiT2EiLCJwcmVwYXJlU3RhY2tUcmFjZSIsInNldCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJpbmNsdWRlcyIsIlBhIiwidGFnIiwiUWEiLCJfY29udGV4dCIsIl9wYXlsb2FkIiwiX2luaXQiLCJSYSIsIlNhIiwiVGEiLCJub2RlTmFtZSIsIlZhIiwiX3ZhbHVlVHJhY2tlciIsImdldCIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiVWEiLCJXYSIsImNoZWNrZWQiLCJ2YWx1ZSIsIlhhIiwiYWN0aXZlRWxlbWVudCIsImJvZHkiLCJZYSIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiWmEiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiYWIiLCJiYiIsImNiIiwiZGIiLCJvd25lckRvY3VtZW50IiwiZWIiLCJmYiIsIm9wdGlvbnMiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsImRpc2FibGVkIiwiZ2IiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImNoaWxkcmVuIiwiaGIiLCJpYiIsImpiIiwidGV4dENvbnRlbnQiLCJrYiIsImxiIiwibWIiLCJuYiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm9iIiwibGFzdENoaWxkIiwibm9kZVR5cGUiLCJub2RlVmFsdWUiLCJwYiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYXNwZWN0UmF0aW8iLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJxYiIsInJiIiwic2IiLCJzdHlsZSIsImluZGV4T2YiLCJzZXRQcm9wZXJ0eSIsImNoYXJBdCIsInN1YnN0cmluZyIsInRiIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwidWIiLCJ2YiIsImlzIiwid2IiLCJ4YiIsInRhcmdldCIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInBhcmVudE5vZGUiLCJ5YiIsInpiIiwiQWIiLCJCYiIsIkNiIiwic3RhdGVOb2RlIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIk5iIiwiYXBwbHkiLCJvbkVycm9yIiwiT2IiLCJQYiIsIlFiIiwiUmIiLCJTYiIsIlRiIiwiVmIiLCJhbHRlcm5hdGUiLCJyZXR1cm4iLCJXYiIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiWGIiLCJaYiIsImNoaWxkIiwic2libGluZyIsImN1cnJlbnQiLCJZYiIsIiRiIiwiYWMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwiYmMiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsImNjIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJkYyIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIkIiLCJ1bnN0YWJsZV9ub3ciLCJlYyIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiZmMiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsImdjIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJoYyIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiaWMiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsImpjIiwidW5zdGFibGVfSWRsZVByaW9yaXR5Iiwia2MiLCJsYyIsIm9jIiwiTWF0aCIsImNsejMyIiwicGMiLCJxYyIsImxvZyIsIkxOMiIsInJjIiwic2MiLCJ0YyIsInVjIiwicGVuZGluZ0xhbmVzIiwic3VzcGVuZGVkTGFuZXMiLCJwaW5nZWRMYW5lcyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsInZjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJldmVudFRpbWVzIiwiQ2MiLCJDIiwiRGMiLCJFYyIsIkZjIiwiR2MiLCJIYyIsIkljIiwiSmMiLCJLYyIsIkxjIiwiTWMiLCJOYyIsIk9jIiwiTWFwIiwiUGMiLCJRYyIsIlJjIiwiU2MiLCJkZWxldGUiLCJwb2ludGVySWQiLCJUYyIsIm5hdGl2ZUV2ZW50IiwiYmxvY2tlZE9uIiwiZG9tRXZlbnROYW1lIiwiZXZlbnRTeXN0ZW1GbGFncyIsInRhcmdldENvbnRhaW5lcnMiLCJWYyIsIldjIiwicHJpb3JpdHkiLCJpc0RlaHlkcmF0ZWQiLCJjb250YWluZXJJbmZvIiwiWGMiLCJZYyIsImRpc3BhdGNoRXZlbnQiLCJzaGlmdCIsIlpjIiwiJGMiLCJhZCIsImJkIiwiY2QiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsImRkIiwiZWQiLCJ0cmFuc2l0aW9uIiwiZmQiLCJnZCIsImhkIiwiVWMiLCJzdG9wUHJvcGFnYXRpb24iLCJqZCIsImtkIiwibGQiLCJtZCIsIm5kIiwib2QiLCJrZXlDb2RlIiwiY2hhckNvZGUiLCJwZCIsInFkIiwicmQiLCJfcmVhY3ROYW1lIiwiX3RhcmdldEluc3QiLCJjdXJyZW50VGFyZ2V0IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJwcmV2ZW50RGVmYXVsdCIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJpc1BlcnNpc3RlbnQiLCJ3ZCIsInhkIiwieWQiLCJzZCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJub3ciLCJpc1RydXN0ZWQiLCJ0ZCIsInVkIiwidmlldyIsImRldGFpbCIsInZkIiwiQWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJnZXRNb2RpZmllclN0YXRlIiwiemQiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiQmQiLCJEZCIsImRhdGFUcmFuc2ZlciIsIkZkIiwiSGQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiSWQiLCJjbGlwYm9hcmREYXRhIiwiSmQiLCJMZCIsIk1kIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIk5kIiwiT2QiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGQiLCJRZCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImNvZGUiLCJsb2NhdGlvbiIsInJlcGVhdCIsImxvY2FsZSIsIndoaWNoIiwiUmQiLCJUZCIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlZkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIlhkIiwiWWQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIlpkIiwiJGQiLCJhZSIsImJlIiwiZG9jdW1lbnRNb2RlIiwiY2UiLCJkZSIsImVlIiwiZmUiLCJnZSIsImhlIiwiaWUiLCJsZSIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsInVybCIsIndlZWsiLCJtZSIsIm5lIiwib2UiLCJldmVudCIsImxpc3RlbmVycyIsInBlIiwicWUiLCJyZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJvbmlucHV0IiwiQWUiLCJkZXRhY2hFdmVudCIsIkJlIiwiQ2UiLCJhdHRhY2hFdmVudCIsIkRlIiwiRWUiLCJGZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwibm9kZSIsIm9mZnNldCIsIm5leHRTaWJsaW5nIiwiTGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTWUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJocmVmIiwiTmUiLCJjb250ZW50RWRpdGFibGUiLCJPZSIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJkb2N1bWVudEVsZW1lbnQiLCJzdGFydCIsImVuZCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwibWluIiwiZGVmYXVsdFZpZXciLCJnZXRTZWxlY3Rpb24iLCJleHRlbmQiLCJyYW5nZUNvdW50IiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwiZWxlbWVudCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwiZm9jdXMiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJWZSIsIldlIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiWGUiLCJZZSIsIlplIiwiYW5pbWF0aW9uIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsImVmIiwiZmYiLCJnZiIsImhmIiwibGYiLCJtZiIsIm5mIiwiVWIiLCJpbnN0YW5jZSIsImxpc3RlbmVyIiwiRCIsIm9mIiwiaGFzIiwicGYiLCJxZiIsInJmIiwicmFuZG9tIiwic2YiLCJiaW5kIiwiY2FwdHVyZSIsInBhc3NpdmUiLCJKIiwiRiIsInRmIiwidWYiLCJwYXJlbnRXaW5kb3ciLCJ2ZiIsIndmIiwibmEiLCJ4YSIsIiRhIiwiYmEiLCJqZSIsImNoYXIiLCJrZSIsInVuc2hpZnQiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiQ2YiLCJEZiIsIkVmIiwiX19odG1sIiwiRmYiLCJzZXRUaW1lb3V0IiwiR2YiLCJjbGVhclRpbWVvdXQiLCJIZiIsIlByb21pc2UiLCJKZiIsInF1ZXVlTWljcm90YXNrIiwicmVzb2x2ZSIsInRoZW4iLCJjYXRjaCIsIklmIiwiS2YiLCJMZiIsIk1mIiwicHJldmlvdXNTaWJsaW5nIiwiTmYiLCJPZiIsIlBmIiwiUWYiLCJSZiIsIlNmIiwiVGYiLCJVZiIsIkUiLCJHIiwiVmYiLCJIIiwiV2YiLCJYZiIsIllmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiWmYiLCIkZiIsImFnIiwiYmciLCJnZXRDaGlsZENvbnRleHQiLCJjZyIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImpnIiwia2ciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwicWciLCJyZyIsInNnIiwidGciLCJ1ZyIsInZnIiwid2ciLCJ4ZyIsInlnIiwiSSIsInpnIiwiQWciLCJCZyIsImVsZW1lbnRUeXBlIiwiZGVsZXRpb25zIiwiQ2ciLCJwZW5kaW5nUHJvcHMiLCJvdmVyZmxvdyIsInRyZWVDb250ZXh0IiwicmV0cnlMYW5lIiwiRGciLCJtb2RlIiwiRWciLCJGZyIsIkdnIiwibWVtb2l6ZWRQcm9wcyIsIkhnIiwiSWciLCJKZyIsIktnIiwiTGciLCJyZWYiLCJfb3duZXIiLCJfc3RyaW5nUmVmIiwicmVmcyIsIk1nIiwiTmciLCJPZyIsImluZGV4IiwiUGciLCJRZyIsInByb3BzIiwiUmciLCJpbXBsZW1lbnRhdGlvbiIsIlNnIiwiVGciLCJuZXh0IiwiZG9uZSIsIlVnIiwiVmciLCJXZyIsIlhnIiwiWWciLCJaZyIsIiRnIiwiYWgiLCJfY3VycmVudFZhbHVlIiwiYmgiLCJjaGlsZExhbmVzIiwiY2giLCJkZXBlbmRlbmNpZXMiLCJmaXJzdENvbnRleHQiLCJsYW5lcyIsImRoIiwiZWgiLCJjb250ZXh0IiwibWVtb2l6ZWRWYWx1ZSIsImZoIiwiZ2giLCJoaCIsImludGVybGVhdmVkIiwiaWgiLCJqaCIsImtoIiwidXBkYXRlUXVldWUiLCJiYXNlU3RhdGUiLCJmaXJzdEJhc2VVcGRhdGUiLCJsYXN0QmFzZVVwZGF0ZSIsInNoYXJlZCIsInBlbmRpbmciLCJlZmZlY3RzIiwibGgiLCJtaCIsImV2ZW50VGltZSIsImxhbmUiLCJwYXlsb2FkIiwiY2FsbGJhY2siLCJuaCIsIksiLCJvaCIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJ1aCIsInZoIiwid2giLCJ4aCIsInloIiwidGFnTmFtZSIsInpoIiwiQWgiLCJCaCIsIkwiLCJDaCIsInJldmVhbE9yZGVyIiwiRGgiLCJFaCIsIl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5IiwiRmgiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiR2giLCJIaCIsIk0iLCJOIiwiTyIsIkloIiwiSmgiLCJLaCIsIkxoIiwiUCIsIk1oIiwiTmgiLCJPaCIsIlBoIiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJiYXNlUXVldWUiLCJxdWV1ZSIsIlVoIiwiVmgiLCJXaCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJhY3Rpb24iLCJoYXNFYWdlclN0YXRlIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZGlzcGF0Y2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiZ2V0U25hcHNob3QiLCJiaSIsImNpIiwiUSIsImRpIiwibGFzdEVmZmVjdCIsInN0b3JlcyIsImVpIiwiZmkiLCJnaSIsImhpIiwiaWkiLCJjcmVhdGUiLCJkZXN0cm95IiwiZGVwcyIsImppIiwia2kiLCJsaSIsIm1pIiwibmkiLCJvaSIsInBpIiwicWkiLCJyaSIsInNpIiwidGkiLCJ1aSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJBaSIsIlIiLCJCaSIsInJlYWRDb250ZXh0IiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUluc2VydGlvbkVmZmVjdCIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJ1c2VNdXRhYmxlU291cmNlIiwidXNlU3luY0V4dGVybmFsU3RvcmUiLCJ1c2VJZCIsInVuc3RhYmxlX2lzTmV3UmVjb25jaWxlciIsImlkZW50aWZpZXJQcmVmaXgiLCJDaSIsIkRpIiwiRWkiLCJpc01vdW50ZWQiLCJfcmVhY3RJbnRlcm5hbHMiLCJlbnF1ZXVlU2V0U3RhdGUiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiRmkiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIkdpIiwic3RhdGUiLCJ1cGRhdGVyIiwiSGkiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJJaSIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwiSmkiLCJtZXNzYWdlIiwiZGlnZXN0IiwiS2kiLCJMaSIsImNvbnNvbGUiLCJlcnJvciIsIk1pIiwiV2Vha01hcCIsIk5pIiwiT2kiLCJQaSIsIlFpIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJSaSIsImNvbXBvbmVudFN0YWNrIiwiU2kiLCJwaW5nQ2FjaGUiLCJUaSIsIlVpIiwiVmkiLCJXaSIsIlJlYWN0Q3VycmVudE93bmVyIiwiWGkiLCJZaSIsIlppIiwiJGkiLCJhaiIsImJqIiwiY2oiLCJkaiIsImJhc2VMYW5lcyIsImNhY2hlUG9vbCIsInRyYW5zaXRpb25zIiwiZWoiLCJmaiIsImdqIiwiaGoiLCJpaiIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsImpqIiwia2oiLCJwZW5kaW5nQ29udGV4dCIsImxqIiwiemoiLCJBaiIsIkJqIiwiQ2oiLCJtaiIsIm5qIiwib2oiLCJmYWxsYmFjayIsInBqIiwicWoiLCJzaiIsImRhdGFzZXQiLCJkZ3N0IiwidGoiLCJ1aiIsIl9yZWFjdFJldHJ5IiwicmoiLCJzdWJ0cmVlRmxhZ3MiLCJ2aiIsIndqIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJsYXN0IiwidGFpbCIsInRhaWxNb2RlIiwieGoiLCJEaiIsIlMiLCJFaiIsIkZqIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsInN1cHByZXNzSHlkcmF0aW9uV2FybmluZyIsIm9uQ2xpY2siLCJvbmNsaWNrIiwic2l6ZSIsImNyZWF0ZUVsZW1lbnROUyIsImF1dG9Gb2N1cyIsImNyZWF0ZVRleHROb2RlIiwiVCIsIkdqIiwiSGoiLCJJaiIsIkpqIiwiVSIsIktqIiwiV2Vha1NldCIsIlYiLCJMaiIsIlciLCJNaiIsIk5qIiwiUGoiLCJRaiIsIlJqIiwiU2oiLCJUaiIsIlVqIiwiVmoiLCJpbnNlcnRCZWZvcmUiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiV2oiLCJYIiwiWGoiLCJZaiIsIlpqIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImFrIiwiYmsiLCJjayIsImRrIiwiZWsiLCJpc0hpZGRlbiIsImZrIiwiZ2siLCJkaXNwbGF5IiwiaGsiLCJpayIsImprIiwia2siLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsInNyYyIsIlZrIiwibGsiLCJjZWlsIiwibWsiLCJuayIsIm9rIiwiWSIsIloiLCJwayIsInFrIiwicmsiLCJzayIsInRrIiwiSW5maW5pdHkiLCJ1ayIsInZrIiwid2siLCJ4ayIsInlrIiwiemsiLCJBayIsIkJrIiwiQ2siLCJEayIsImNhbGxiYWNrTm9kZSIsImV4cGlyYXRpb25UaW1lcyIsImV4cGlyZWRMYW5lcyIsIndjIiwiY2FsbGJhY2tQcmlvcml0eSIsImlnIiwiRWsiLCJGayIsIkdrIiwiSGsiLCJJayIsIkprIiwiS2siLCJMayIsIk1rIiwiTmsiLCJPayIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkTGFuZXMiLCJQayIsInRpbWVvdXRIYW5kbGUiLCJRayIsIlJrIiwiU2siLCJUayIsIlVrIiwibXV0YWJsZVJlYWRMYW5lcyIsIkJjIiwiT2oiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm1jIiwib25SZWNvdmVyYWJsZUVycm9yIiwiV2siLCJvblBvc3RDb21taXRGaWJlclJvb3QiLCJYayIsIllrIiwiJGsiLCJpc1JlYWN0Q29tcG9uZW50IiwicGVuZGluZ0NoaWxkcmVuIiwiYWwiLCJtdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhIiwiYmwiLCJjYWNoZSIsInBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXMiLCJkbCIsImVsIiwiZmwiLCJnbCIsImhsIiwiaWwiLCJ5aiIsIlprIiwia2wiLCJyZXBvcnRFcnJvciIsImxsIiwiX2ludGVybmFsUm9vdCIsIm1sIiwibmwiLCJvbCIsInBsIiwicmwiLCJxbCIsInVubW91bnQiLCJ1bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbiIsInNwbGljZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwic2wiLCJ1c2luZ0NsaWVudEVudHJ5UG9pbnQiLCJFdmVudHMiLCJ0bCIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInZlcnNpb24iLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwidWwiLCJyZW5kZXJlckNvbmZpZyIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoIiwib3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoIiwib3ZlcnJpZGVQcm9wcyIsIm92ZXJyaWRlUHJvcHNEZWxldGVQYXRoIiwib3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGgiLCJzZXRFcnJvckhhbmRsZXIiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsInJlY29uY2lsZXJWZXJzaW9uIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwidmwiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsImNyZWF0ZVBvcnRhbCIsImNsIiwiY3JlYXRlUm9vdCIsInVuc3RhYmxlX3N0cmljdE1vZGUiLCJmaW5kRE9NTm9kZSIsImZsdXNoU3luYyIsImh5ZHJhdGUiLCJoeWRyYXRlUm9vdCIsImh5ZHJhdGVkU291cmNlcyIsIl9nZXRWZXJzaW9uIiwiX3NvdXJjZSIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiY2hlY2tEQ0UiLCJlcnIiLCJSRUFDVF9FTEVNRU5UX1RZUEUiLCJSRUFDVF9QT1JUQUxfVFlQRSIsIlJFQUNUX0ZSQUdNRU5UX1RZUEUiLCJSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFIiwiUkVBQ1RfUFJPRklMRVJfVFlQRSIsIlJFQUNUX0NPTlNVTUVSX1RZUEUiLCJSRUFDVF9DT05URVhUX1RZUEUiLCJSRUFDVF9GT1JXQVJEX1JFRl9UWVBFIiwiUkVBQ1RfU1VTUEVOU0VfVFlQRSIsIlJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSIsIlJFQUNUX01FTU9fVFlQRSIsIlJFQUNUX0xBWllfVFlQRSIsIlJFQUNUX09GRlNDUkVFTl9UWVBFIiwiUkVBQ1RfQ0xJRU5UX1JFRkVSRU5DRSIsImdldE1vZHVsZUlkIiwib2JqZWN0IiwiX19zZWxmIiwiX19zb3VyY2UiLCJqc3giLCJqc3hzIiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsImVzY2FwZSIsIl9zdGF0dXMiLCJfcmVzdWx0IiwiZGVmYXVsdCIsIkNoaWxkcmVuIiwiY291bnQiLCJ0b0FycmF5Iiwib25seSIsIkNvbXBvbmVudCIsIlB1cmVDb21wb25lbnQiLCJhY3QiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiX2RlZmF1bHRWYWx1ZSIsIl9nbG9iYWxOYW1lIiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImZvcndhcmRSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJtZW1vIiwic3RhcnRUcmFuc2l0aW9uIiwidW5zdGFibGVfYWN0IiwicG9wIiwic29ydEluZGV4IiwicGVyZm9ybWFuY2UiLCJzZXRJbW1lZGlhdGUiLCJzdGFydFRpbWUiLCJleHBpcmF0aW9uVGltZSIsInByaW9yaXR5TGV2ZWwiLCJuYXZpZ2F0b3IiLCJzY2hlZHVsaW5nIiwiaXNJbnB1dFBlbmRpbmciLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJmbG9vciIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJvYmpBIiwib2JqQiIsImNvbXBhcmVDb250ZXh0IiwicmV0Iiwia2V5c0EiLCJrZXlzQiIsImJIYXNPd25Qcm9wZXJ0eSIsImlkeCIsInZhbHVlQSIsInZhbHVlQiIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsImluc2VydCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJnZXRUYXJnZXQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZGVmaW5pdGlvbiIsIm8iLCJwcm9wIiwidG9TdHJpbmdUYWciLCJuYyIsImxvY2FscyIsImNoYXJDb2RlQXQiLCJwcmVmaXgiLCJ1c2UiLCJtc0dyaWRSb3ciLCJtc0dyaWRSb3dTcGFuIiwibXNHcmlkQ29sdW1uIiwibXNHcmlkQ29sdW1uU3BhbiIsIldlYmtpdExpbmVDbGFtcCIsIm1lbW9pemUiLCJmbiIsImFyZyIsInJlYWN0UHJvcHNSZWdleCIsImlzUHJvcFZhbGlkIiwiZnJlZXplIiwiXyIsInN0eWxlZENvbXBvbmVudElkIiwicHJvY2VzcyIsImVudiIsIlJFQUNUX0FQUF9TQ19BVFRSIiwiU0NfQVRUUiIsIkJvb2xlYW4iLCJTQ19ESVNBQkxFX1NQRUVEWSIsIlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWSIsImoiLCJncm91cFNpemVzIiwiVWludDMyQXJyYXkiLCJpbmRleE9mR3JvdXAiLCJpbnNlcnRSdWxlcyIsInMiLCJpbnNlcnRSdWxlIiwiY2xlYXJHcm91cCIsImRlbGV0ZVJ1bGUiLCJnZXRHcm91cCIsImdldFJ1bGUiLCJyZWdpc3Rlck5hbWUiLCJwYXJzZUludCIsImdldFRhZyIsImNoaWxkTm9kZXMiLCJoYXNBdHRyaWJ1dGUiLCJzaGVldCIsInN0eWxlU2hlZXRzIiwib3duZXJOb2RlIiwiY3NzUnVsZXMiLCIkIiwibm9kZXMiLCJydWxlcyIsImlzU2VydmVyIiwidXNlQ1NTT01JbmplY3Rpb24iLCJncyIsIm5hbWVzIiwic2VydmVyIiwiZ2V0QXR0cmlidXRlIiwicmVnaXN0ZXJJZCIsInJlY29uc3RydWN0V2l0aE9wdGlvbnMiLCJhbGxvY2F0ZUdTSW5zdGFuY2UiLCJoYXNOYW1lRm9ySWQiLCJjbGVhck5hbWVzIiwiY2xlYXIiLCJjbGVhclJ1bGVzIiwiY2xlYXJUYWciLCJhYnMiLCJzdGF0aWNSdWxlc0lkIiwiaXNTdGF0aWMiLCJjb21wb25lbnRJZCIsImJhc2VIYXNoIiwiYmFzZVN0eWxlIiwiZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMiLCJoYXNoIiwiX2UiLCJwbHVnaW5zIiwibGFzdEluZGV4T2YiLCJyZWR1Y2UiLCJzdHlsaXNQbHVnaW5zIiwiZGlzYWJsZUNTU09NSW5qZWN0aW9uIiwiZGlzYWJsZVZlbmRvclByZWZpeGVzIiwiZ2V0TmFtZSIsImlzQ3NzIiwic3RhcnRzV2l0aCIsImF0dHJzIiwicGFyZW50Q29tcG9uZW50SWQiLCJmaWx0ZXIiLCJzaG91bGRGb3J3YXJkUHJvcCIsImNvbXBvbmVudFN0eWxlIiwiZm9sZGVkQ29tcG9uZW50SWRzIiwidGhlbWUiLCIkYXMiLCJhcyIsImNsYXNzTmFtZSIsIndpdGhDb21wb25lbnQiLCJfZm9sZGVkRGVmYXVsdFByb3BzIiwid2l0aENvbmZpZyIsImNyZWF0ZVN0eWxlcyIsInJlbW92ZVN0eWxlcyIsInJlbmRlclN0eWxlcyIsIl9lbWl0U2hlZXRDU1MiLCJnZXRTdHlsZVRhZ3MiLCJzZWFsZWQiLCJnZXRTdHlsZUVsZW1lbnQiLCJzZWFsIiwiY29sbGVjdFN0eWxlcyIsImludGVybGVhdmVXaXRoTm9kZVN0cmVhbSIsIlN0eWxlQXBwV3JhcHBlciIsInN0eWxlZCIsImRpdiIsIlN0eWxlV29ya291dFNjaGVkdWxlV3JhcHBlciIsIlN0eWxlZFdlZWtEYXlXcmFwcGVyIiwiU3R5bGVkV2Vla0RheUhlYWRlciIsIlN0eWxlZFdlZWtEYXlDb250ZW50IiwiU3R5bGVkV2Vla0RheVRpdGxlIiwiaDMiLCJfcmVmIiwiJGlzQWN0aXZlIiwiZ2V0RGF0ZURhdGEiLCJtb250aERheSIsImdldERhdGUiLCJwYWRTdGFydCIsIndlZWtEYXkiLCJ0b0xvY2FsZURhdGVTdHJpbmciLCJ3ZWVrZGF5IiwiaXNUb2RheSIsInRvRGF0ZVN0cmluZyIsIlN0eWxlZEljb25CdXR0b24iLCIkdmFyaWFudCIsImljb24iLCJfcmVmJHZhcmlhbnQiLCJ2YXJpYW50IiwiX2pzeCIsIlN0eWxlV29ya291dFdyYXBwZXIiLCJTdHlsZVdvcmtvdXRIZWFkZXIiLCJTdHlsZVdvcmtvdXRDb250ZW50IiwiU3R5bGVXb3Jrb3V0Rm9vdGVyIiwiZWxsaXBzaXNPdmVyZmxvdyIsIlN0eWxlZEg1VHlwb2dyYXBoeSIsImg1IiwiU3R5bGVkSDZUeXBvZ3JhcGh5IiwiaDYiLCJTdHlsZWRCb2R5MVR5cG9ncmFwaHkiLCJTdHlsZWRCb2R5MlR5cG9ncmFwaHkiLCJWYXJpYW50Q29tcG9uZW50IiwiYm9keTEiLCJib2R5MiIsInRpdGxlIiwiU3R5bGVkRXhlcmNpc2VXcmFwcGVyIiwiU3R5bGVkRXhlcmNpc2VIZWFkZXIiLCJTdHlsZWRFeGVyY2lzZURldGFpbCIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiLCJ1c2VDb2xsZWN0ZWRQcm9wcyIsImNvbGxlY3RvciIsIm1vbml0b3IiLCJjb25uZWN0b3IiLCJjb2xsZWN0Iiwib25Db2xsZWN0IiwiY29sbGVjdGVkIiwidXBkYXRlQ29sbGVjdGVkIiwib25VcGRhdGUiLCJzZXRDb2xsZWN0ZWQiLCJuZXh0VmFsdWUiLCJ1c2VDb2xsZWN0b3IiLCJoYW5kbGVySWQiLCJnZXRIYW5kbGVySWQiLCJzdWJzY3JpYmVUb1N0YXRlQ2hhbmdlIiwiaGFuZGxlcklkcyIsInVzZU1vbml0b3JPdXRwdXQiLCJyZWNvbm5lY3QiLCJ1c2VPcHRpb25hbEZhY3RvcnkiLCJtZW1vRGVwcyIsInVzZUNvbm5lY3REcm9wVGFyZ2V0IiwiaG9va3MiLCJkcm9wVGFyZ2V0Iiwic2hhbGxvd0VxdWFsIiwiY29tcGFyZVJlc3VsdCIsImlzUmVmIiwiaW52YXJpYW50IiwiY29uZGl0aW9uIiwiZm9ybWF0IiwiYXJncyIsImFyZ0luZGV4IiwiZnJhbWVzVG9Qb3AiLCJ3cmFwQ29ubmVjdG9ySG9va3MiLCJ3cmFwcGVkSG9va3MiLCJob29rIiwiZW5kc1dpdGgiLCJ3cmFwcGVkSG9vayIsImVsZW1lbnRPck5vZGUiLCJ0aHJvd0lmQ29tcG9zaXRlQ29tcG9uZW50RWxlbWVudCIsIm5ld1JlZiIsInByZXZpb3VzUmVmIiwic2V0UmVmIiwiY2xvbmVXaXRoUmVmIiwid3JhcEhvb2tUb1JlY29nbml6ZUVsZW1lbnQiLCJUYXJnZXRDb25uZWN0b3IiLCJjb25uZWN0VGFyZ2V0IiwiZGlkQ2hhbmdlIiwiZGlkSGFuZGxlcklkQ2hhbmdlIiwiZGlkRHJvcFRhcmdldENoYW5nZSIsImRpZE9wdGlvbnNDaGFuZ2UiLCJkaXNjb25uZWN0RHJvcFRhcmdldCIsImxhc3RDb25uZWN0ZWRIYW5kbGVySWQiLCJsYXN0Q29ubmVjdGVkRHJvcFRhcmdldCIsImxhc3RDb25uZWN0ZWREcm9wVGFyZ2V0T3B0aW9ucyIsImRyb3BUYXJnZXRPcHRpb25zIiwidW5zdWJzY3JpYmVEcm9wVGFyZ2V0IiwiYmFja2VuZCIsImNvbm5lY3REcm9wVGFyZ2V0IiwicmVjZWl2ZUhhbmRsZXJJZCIsIm5ld0hhbmRsZXJJZCIsImRyb3BUYXJnZXRPcHRpb25zSW50ZXJuYWwiLCJkcm9wVGFyZ2V0Tm9kZSIsImRyb3BUYXJnZXRSZWYiLCJjbGVhckRyb3BUYXJnZXQiLCJEbmRDb250ZXh0IiwiZHJhZ0Ryb3BNYW5hZ2VyIiwidXNlRHJhZ0Ryb3BNYW5hZ2VyIiwiaXNDYWxsaW5nQ2FuRHJvcCIsIkRyb3BUYXJnZXRNb25pdG9ySW1wbCIsInRhcmdldElkIiwiaW50ZXJuYWxNb25pdG9yIiwiY2FuRHJvcCIsImNhbkRyb3BPblRhcmdldCIsImlzT3ZlciIsImlzT3ZlclRhcmdldCIsImdldEl0ZW1UeXBlIiwiZ2V0SXRlbSIsImdldERyb3BSZXN1bHQiLCJkaWREcm9wIiwiZ2V0SW5pdGlhbENsaWVudE9mZnNldCIsImdldEluaXRpYWxTb3VyY2VDbGllbnRPZmZzZXQiLCJnZXRTb3VyY2VDbGllbnRPZmZzZXQiLCJnZXRDbGllbnRPZmZzZXQiLCJnZXREaWZmZXJlbmNlRnJvbUluaXRpYWxPZmZzZXQiLCJtYW5hZ2VyIiwiZ2V0TW9uaXRvciIsIkRyb3BUYXJnZXRJbXBsIiwic3BlYyIsImhvdmVyIiwiZHJvcCIsInVzZURyb3AiLCJzcGVjQXJnIiwidXNlRHJvcFRhcmdldE1vbml0b3IiLCJnZXRCYWNrZW5kIiwidXNlRHJvcFRhcmdldENvbm5lY3RvciIsInVzZURyb3BUYXJnZXQiLCJhY2NlcHQiLCJ1c2VBY2NlcHQiLCJ1bnJlZ2lzdGVyIiwicmVnaXN0cnkiLCJnZXRSZWdpc3RyeSIsImFkZFRhcmdldCIsInJlbW92ZVRhcmdldCIsInJlZ2lzdGVyVGFyZ2V0IiwidXNlUmVnaXN0ZXJlZERyb3BUYXJnZXQiLCJpbml0aWFsU3RhdGUiLCJ3ZWVrRGF0YSIsIkRhdGFSZWR1Y2VyIiwiX29iamVjdFNwcmVhZCIsIl9hY3Rpb24kcGF5bG9hZCIsImZyb21EYXkiLCJ0b0RheSIsIndvcmtvdXRJZCIsImZyb21EYXlEYXRhIiwiZmluZCIsImRheSIsInRvRGF5RGF0YSIsImZyb21EYXlXb3Jrb3V0cyIsIndvcmtvdXRzIiwid29ya291dCIsInRvZGF5V29ya291dHMiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJfYWN0aW9uJHBheWxvYWQyIiwiZnJvbVdvcmtvdXRJZCIsInRvV29ya291dElkIiwiZXhlcmNpc2VJZCIsImZyb21Xb3Jrb3V0RGF0YSIsImZsYXQiLCJ0b1dvcmtvdXREYXRhIiwiZnJvbVdvcmtvdXRFeGVyY2lzZXMiLCJleGVyY2lzZXMiLCJleGVyY2lzZSIsInRvV29ya291dEV4ZXJjaXNlcyIsIkRhdGFDb250ZXh0IiwiRGF0YVByb3ZpZGVyIiwiX3VzZVJlZHVjZXIyIiwidXNlQ29ubmVjdERyYWdTb3VyY2UiLCJkcmFnU291cmNlIiwidXNlQ29ubmVjdERyYWdQcmV2aWV3IiwiZHJhZ1ByZXZpZXciLCJTb3VyY2VDb25uZWN0b3IiLCJkcmFnU291cmNlT3B0aW9ucyIsImRyYWdTb3VyY2VPcHRpb25zSW50ZXJuYWwiLCJkcmFnUHJldmlld09wdGlvbnMiLCJkcmFnUHJldmlld09wdGlvbnNJbnRlcm5hbCIsInJlY29ubmVjdERyYWdTb3VyY2UiLCJyZWNvbm5lY3REcmFnUHJldmlldyIsImRpZENvbm5lY3RlZERyYWdTb3VyY2VDaGFuZ2UiLCJkaWREcmFnU291cmNlT3B0aW9uc0NoYW5nZSIsImRpc2Nvbm5lY3REcmFnU291cmNlIiwibGFzdENvbm5lY3RlZERyYWdTb3VyY2UiLCJsYXN0Q29ubmVjdGVkRHJhZ1NvdXJjZU9wdGlvbnMiLCJkcmFnU291cmNlVW5zdWJzY3JpYmUiLCJjb25uZWN0RHJhZ1NvdXJjZSIsImZvcmNlRGlkQ2hhbmdlIiwiZGlkQ29ubmVjdGVkRHJhZ1ByZXZpZXdDaGFuZ2UiLCJkaWREcmFnUHJldmlld09wdGlvbnNDaGFuZ2UiLCJkaXNjb25uZWN0RHJhZ1ByZXZpZXciLCJsYXN0Q29ubmVjdGVkRHJhZ1ByZXZpZXciLCJsYXN0Q29ubmVjdGVkRHJhZ1ByZXZpZXdPcHRpb25zIiwiZHJhZ1ByZXZpZXdVbnN1YnNjcmliZSIsImNvbm5lY3REcmFnUHJldmlldyIsImRyYWdQcmV2aWV3Tm9kZSIsImRyYWdQcmV2aWV3UmVmIiwiZHJhZ1NvdXJjZU5vZGUiLCJkcmFnU291cmNlUmVmIiwiY2xlYXJEcmFnU291cmNlIiwiY2xlYXJEcmFnUHJldmlldyIsImlzQ2FsbGluZ0NhbkRyYWciLCJpc0NhbGxpbmdJc0RyYWdnaW5nIiwiRHJhZ1NvdXJjZU1vbml0b3JJbXBsIiwic291cmNlSWQiLCJjYW5EcmFnIiwiY2FuRHJhZ1NvdXJjZSIsImlzRHJhZ2dpbmciLCJpc0RyYWdnaW5nU291cmNlIiwiZ2V0VGFyZ2V0SWRzIiwiaXNTb3VyY2VQdWJsaWMiLCJnZXRTb3VyY2VJZCIsInN1YnNjcmliZVRvT2Zmc2V0Q2hhbmdlIiwiRHJhZ1NvdXJjZUltcGwiLCJiZWdpbkRyYWciLCJnbG9iYWxNb25pdG9yIiwiZW5kRHJhZyIsInVzZURyYWciLCJiZWdpbiIsInVzZURyYWdTb3VyY2VNb25pdG9yIiwidXNlRHJhZ1NvdXJjZUNvbm5lY3RvciIsInByZXZpZXdPcHRpb25zIiwiaGFuZGxlciIsInVzZURyYWdTb3VyY2UiLCJpdGVtVHlwZSIsInVzZURyYWdUeXBlIiwiYWRkU291cmNlIiwicmVtb3ZlU291cmNlIiwicmVnaXN0ZXJTb3VyY2UiLCJ1c2VSZWdpc3RlcmVkRHJhZ1NvdXJjZSIsIl91c2VFeGVyY2lzZURyYWciLCJpc0V4ZXJjaXNlRHJhZ2dpbmciLCJ1c2VFeGVyY2lzZURyYWciLCJfdXNlRXhlcmNpc2VEcmFnMiIsImV4ZXJjaXNlUmVmIiwiX2pzeHMiLCJUeXBvZ3JhcGh5Iiwic2V0cyIsImRldGFpbHMiLCJfdXNlV29ya291dERyYWciLCJpc1dvcmtvdXREcmFnZ2luZyIsInVzZVdvcmtvdXREcmFnIiwiX3VzZVdvcmtvdXREcmFnMiIsIl9zbGljZWRUb0FycmF5Iiwid29ya291dERyYWdSZWYiLCJfdXNlRXhlcmNpc2VEcm9wMiIsInVzZURhdGEiLCJpc0V4ZXJjaXNlRHJvcE92ZXIiLCJ3b3Jrb3V0RHJvcFJlZiIsImJvcmRlcldpZHRoIiwiSWNvbkJ1dHRvbiIsImFsZXJ0IiwiRXhlcmNpc2UiLCJhZGRhYmxlIiwiZGF5RGF0YSIsIl91c2VXb3Jrb3V0RHJvcDIiLCJpc1dvcmtvdXREcm9wT3ZlciIsIndlZWtkYXlEcm9wUmVmIiwiYmFja2dyb3VuZENvbG9yIiwiV29ya291dCIsIlN0eWxlV2Vla1dyYXBwZXIiLCJjdXJyZW50RGF0ZVdpdGhEYXRhIiwiZGF5T2ZXZWVrIiwiZ2V0RGF5IiwiZGF5T2ZNb250aCIsInN0YXJ0T2ZXZWVrIiwic2V0RGF0ZSIsImdldEN1cnJlbnRXZWVrIiwiX3dlZWtEYXRhJGZpbmQkd29ya291IiwiX3dlZWtEYXRhJGZpbmQiLCJkYXRlRGF0YSIsIldlZWtEYXkiLCJnZXRXZWVrRGF0YSIsIldlZWsiLCJmb3JtYXRQcm9kRXJyb3JNZXNzYWdlIiwiJCRvYnNlcnZhYmxlIiwib2JzZXJ2YWJsZSIsInJhbmRvbVN0cmluZyIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIlJFUExBQ0UiLCJQUk9CRV9VTktOT1dOX0FDVElPTiIsImNyZWF0ZVN0b3JlIiwicmVkdWNlciIsInByZWxvYWRlZFN0YXRlIiwiZW5oYW5jZXIiLCJfcmVmMiIsImN1cnJlbnRSZWR1Y2VyIiwiY3VycmVudFN0YXRlIiwiY3VycmVudExpc3RlbmVycyIsIm5leHRMaXN0ZW5lcnMiLCJpc0Rpc3BhdGNoaW5nIiwiZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycyIsImdldFN0YXRlIiwic3Vic2NyaWJlIiwiaXNTdWJzY3JpYmVkIiwicHJvdG8iLCJpc1BsYWluT2JqZWN0IiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsIm91dGVyU3Vic2NyaWJlIiwib2JzZXJ2ZXIiLCJvYnNlcnZlU3RhdGUiLCJ1bnN1YnNjcmliZSIsImlzT2JqZWN0IiwiSU5JVF9DT09SRFMiLCJCRUdJTl9EUkFHIiwiUFVCTElTSF9EUkFHX1NPVVJDRSIsIkhPVkVSIiwiRFJPUCIsIkVORF9EUkFHIiwic2V0Q2xpZW50T2Zmc2V0IiwiY2xpZW50T2Zmc2V0Iiwic291cmNlQ2xpZW50T2Zmc2V0IiwiUmVzZXRDb29yZGluYXRlc0FjdGlvbiIsImNyZWF0ZUJlZ2luRHJhZyIsInNvdXJjZUlkcyIsInB1Ymxpc2hTb3VyY2UiLCJnZXRTb3VyY2UiLCJ2ZXJpZnlJbnZhcmlhbnRzIiwiZ2V0RHJhZ2dhYmxlU291cmNlIiwidmVyaWZ5R2V0U291cmNlQ2xpZW50T2Zmc2V0SXNGdW5jdGlvbiIsInZlcmlmeUl0ZW1Jc09iamVjdCIsInBpblNvdXJjZSIsImdldFNvdXJjZVR5cGUiLCJ3cml0YWJsZSIsIm93bktleXMiLCJzeW0iLCJjcmVhdGVEcm9wIiwidGFyZ2V0SWRzIiwicmV2ZXJzZSIsImdldERyb3BwYWJsZVRhcmdldHMiLCJkcm9wUmVzdWx0IiwidmVyaWZ5RHJvcFJlc3VsdFR5cGUiLCJkZXRlcm1pbmVEcm9wUmVzdWx0IiwiY3JlYXRlRW5kRHJhZyIsInZlcmlmeUlzRHJhZ2dpbmciLCJ1bnBpblNvdXJjZSIsIm1hdGNoZXNUeXBlIiwidGFyZ2V0VHlwZSIsImRyYWdnZWRJdGVtVHlwZSIsInNvbWUiLCJjcmVhdGVIb3ZlciIsInRhcmdldElkc0FyZyIsInZlcmlmeVRhcmdldElkc0lzQXJyYXkiLCJnZXRUYXJnZXRUeXBlIiwicmVtb3ZlTm9uTWF0Y2hpbmdUYXJnZXRJZHMiLCJjaGVja0ludmFyaWFudHMiLCJob3ZlckFsbFRhcmdldHMiLCJjcmVhdGVQdWJsaXNoRHJhZ1NvdXJjZSIsIkRyYWdEcm9wTWFuYWdlckltcGwiLCJyZWNlaXZlQmFja2VuZCIsImdldEFjdGlvbnMiLCJzdG9yZSIsImFjdGlvbnMiLCJwdWJsaXNoRHJhZ1NvdXJjZSIsImNyZWF0ZURyYWdEcm9wQWN0aW9ucyIsImJvdW5kQWN0aW9ucyIsImFjdGlvbkNyZWF0b3IiLCJpc1NldFVwIiwiaGFuZGxlUmVmQ291bnRDaGFuZ2UiLCJzaG91bGRTZXRVcCIsInJlZkNvdW50Iiwic2V0dXAiLCJ0ZWFyZG93biIsInN1YnRyYWN0IiwiTk9ORSIsIkFMTCIsIl9fSVNfTk9ORV9fIiwiX19JU19BTExfXyIsIkRyYWdEcm9wTW9uaXRvckltcGwiLCJwcmV2U3RhdGVJZCIsInN0YXRlSWQiLCJjdXJyZW50U3RhdGVJZCIsImNhblNraXBMaXN0ZW5lciIsImRpcnR5SWRzIiwiaXRlbXNCIiwiYXJlRGlydHkiLCJkaXJ0eUhhbmRsZXJJZHMiLCJwcmV2aW91c1N0YXRlIiwiZHJhZ09mZnNldCIsIm5leHRTdGF0ZSIsInNoYWxsb3ciLCJkcmFnT3BlcmF0aW9uIiwiaW5pdGlhbENsaWVudE9mZnNldCIsImluaXRpYWxTb3VyY2VDbGllbnRPZmZzZXQiLCJzY29wZSIsImdsb2JhbCIsInNlbGYiLCJCcm93c2VyTXV0YXRpb25PYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwibWFrZVJlcXVlc3RDYWxsRnJvbVRpbWVyIiwiaGFuZGxlVGltZXIiLCJpbnRlcnZhbEhhbmRsZSIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsIm1ha2VSZXF1ZXN0Q2FsbCIsInRvZ2dsZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwiUmF3VGFzayIsInRhc2siLCJyZWxlYXNlIiwiYXNhcFF1ZXVlIiwiZW5xdWV1ZVRhc2siLCJyZXF1ZXN0Rmx1c2giLCJmbHVzaGluZyIsInBlbmRpbmdFcnJvcnMiLCJjYXBhY2l0eSIsImZsdXNoIiwiY3VycmVudEluZGV4Iiwic2NhbiIsIm5ld0xlbmd0aCIsInJlZ2lzdGVyUGVuZGluZ0Vycm9yIiwicmVxdWVzdEVycm9yVGhyb3ciLCJ0YXNrRmFjdG9yeSIsInRhc2tzIiwiZnJlZVRhc2tzIiwidDEiLCJBRERfU09VUkNFIiwiQUREX1RBUkdFVCIsIlJFTU9WRV9TT1VSQ0UiLCJSRU1PVkVfVEFSR0VUIiwidmFsaWRhdGVUeXBlIiwiYWxsb3dBcnJheSIsIkhhbmRsZXJSb2xlIiwibmV4dFVuaXF1ZUlkIiwicGFyc2VSb2xlRnJvbUhhbmRsZXJJZCIsIlNPVVJDRSIsIlRBUkdFVCIsIm1hcENvbnRhaW5zVmFsdWUiLCJzZWFyY2hWYWx1ZSIsImVudHJpZXMiLCJpc0RvbmUiLCJIYW5kbGVyUmVnaXN0cnlJbXBsIiwidmFsaWRhdGVTb3VyY2VDb250cmFjdCIsImFkZEhhbmRsZXIiLCJ2YWxpZGF0ZVRhcmdldENvbnRyYWN0IiwiY29udGFpbnNIYW5kbGVyIiwiZHJhZ1NvdXJjZXMiLCJkcm9wVGFyZ2V0cyIsImluY2x1ZGVQaW5uZWQiLCJpc1NvdXJjZUlkIiwicGlubmVkU291cmNlSWQiLCJwaW5uZWRTb3VyY2UiLCJpc1RhcmdldElkIiwidHlwZXMiLCJyb2xlIiwiZ2V0TmV4dEhhbmRsZXJJZCIsInN0cmljdEVxdWFsaXR5IiwiX3N0YXRlIiwicHJldlRhcmdldElkcyIsIml0ZW1zQSIsImluc2VydEl0ZW0iLCJ4b3IiLCJpc0VxdWFsIiwiYXJlQXJyYXlzRXF1YWwiLCJwcmV2SW5uZXJtb3N0VGFyZ2V0SWQiLCJpbm5lcm1vc3RUYXJnZXRJZCIsIm9mZnNldEEiLCJvZmZzZXRCIiwiaXRlbXMiLCJjcmVhdGVEcmFnRHJvcE1hbmFnZXIiLCJiYWNrZW5kRmFjdG9yeSIsImdsb2JhbENvbnRleHQiLCJiYWNrZW5kT3B0aW9ucyIsImRlYnVnTW9kZSIsInJlZHV4RGV2VG9vbHMiLCJfX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fIiwiaW5zdGFuY2VJZCIsIm1ha2VTdG9yZUluc3RhbmNlIiwiSU5TVEFOQ0VfU1lNIiwiRG5kUHJvdmlkZXIiLCJfcGFyYW0iLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsInNvdXJjZVN5bWJvbEtleXMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImlzR2xvYmFsSW5zdGFuY2UiLCJnZXRHbG9iYWxDb250ZXh0IiwiY3R4IiwiY3JlYXRlU2luZ2xldG9uRG5kQ29udGV4dCIsImdldERuZENvbnRleHRWYWx1ZSIsIkVudGVyTGVhdmVDb3VudGVyIiwiZW50ZXIiLCJlbnRlcmluZ05vZGUiLCJwcmV2aW91c0xlbmd0aCIsImVudGVyZWQiLCJ1bmlvbiIsImlzTm9kZUluRG9jdW1lbnQiLCJsZWF2ZSIsImxlYXZpbmdOb2RlIiwicmVzZXQiLCJOYXRpdmVEcmFnU291cmNlIiwiaW5pdGlhbGl6ZUV4cG9zZWRQcm9wZXJ0aWVzIiwiY29uZmlnIiwiZXhwb3NlUHJvcGVydGllcyIsInByb3BlcnR5Iiwid2FybiIsImxvYWREYXRhVHJhbnNmZXIiLCJuZXdQcm9wZXJ0aWVzIiwicHJvcGVydHlGbiIsIm1hdGNoZXNUeXBlcyIsImRlZmluZVByb3BlcnRpZXMiLCJoYW5kbGUiLCJGSUxFIiwiVVJMIiwiVEVYVCIsIkhUTUwiLCJnZXREYXRhRnJvbURhdGFUcmFuc2ZlciIsInR5cGVzVG9UcnkiLCJyZXN1bHRTb0ZhciIsInR5cGVUb1RyeSIsImdldERhdGEiLCJuYXRpdmVUeXBlc0NvbmZpZyIsImZpbGVzIiwiaHRtbCIsInVybHMiLCJtYXRjaE5hdGl2ZUl0ZW1UeXBlIiwiZGF0YVRyYW5zZmVyVHlwZXMiLCJuYXRpdmVJdGVtVHlwZSIsInR5cGVDb25maWciLCJpc0ZpcmVmb3giLCJ1c2VyQWdlbnQiLCJpc1NhZmFyaSIsInNhZmFyaSIsIk1vbm90b25pY0ludGVycG9sYW50IiwiaW50ZXJwb2xhdGUiLCJ4cyIsInlzIiwiYzFzIiwiYzJzIiwiYzNzIiwibWlkIiwibG93IiwiaGlnaCIsInhIZXJlIiwibWF4IiwiZGlmZiIsImRpZmZTcSIsImluZGV4ZXMiLCJzb3J0IiwiZHlzIiwiZHhzIiwibXMiLCJkeCIsImR5IiwiaTEiLCJpMiIsIm0yIiwibU5leHQiLCJkeE5leHQiLCJjb21tb24iLCJpMyIsImMxIiwiaW52RHgiLCJnZXROb2RlQ2xpZW50T2Zmc2V0IiwicGFyZW50RWxlbWVudCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImdldEV2ZW50Q2xpZW50T2Zmc2V0IiwiT3B0aW9uc1JlYWRlciIsInJvb3RFbGVtZW50Iiwib3B0aW9uc0FyZ3MiLCJIVE1MNUJhY2tlbmRJbXBsIiwicHJvZmlsZSIsInJlZjEiLCJzb3VyY2VQcmV2aWV3Tm9kZXMiLCJzb3VyY2VQcmV2aWV3Tm9kZU9wdGlvbnMiLCJzb3VyY2VOb2RlT3B0aW9ucyIsInNvdXJjZU5vZGVzIiwiZHJhZ1N0YXJ0U291cmNlSWRzIiwiZHJvcFRhcmdldElkcyIsImRyYWdFbnRlclRhcmdldElkcyIsImRyYWdPdmVyVGFyZ2V0SWRzIiwicm9vdCIsIl9faXNSZWFjdERuZEJhY2tlbmRTZXRVcCIsImFkZEV2ZW50TGlzdGVuZXJzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJjbGVhckN1cnJlbnREcmFnU291cmNlTm9kZSIsImFzeW5jRW5kRHJhZ0ZyYW1lSWQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImhhbmRsZURyYWdTdGFydCIsImhhbmRsZVNlbGVjdFN0YXJ0IiwiaGFuZGxlRHJhZ0VudGVyIiwiaGFuZGxlRHJhZ092ZXIiLCJoYW5kbGVEcm9wIiwiaGFuZGxlVG9wRHJhZ1N0YXJ0IiwiaGFuZGxlVG9wRHJhZ1N0YXJ0Q2FwdHVyZSIsImhhbmRsZVRvcERyYWdFbmRDYXB0dXJlIiwiaGFuZGxlVG9wRHJhZ0VudGVyIiwiaGFuZGxlVG9wRHJhZ0VudGVyQ2FwdHVyZSIsImhhbmRsZVRvcERyYWdMZWF2ZUNhcHR1cmUiLCJoYW5kbGVUb3BEcmFnT3ZlciIsImhhbmRsZVRvcERyYWdPdmVyQ2FwdHVyZSIsImhhbmRsZVRvcERyb3AiLCJoYW5kbGVUb3BEcm9wQ2FwdHVyZSIsImdldEN1cnJlbnRTb3VyY2VOb2RlT3B0aW9ucyIsImRyb3BFZmZlY3QiLCJhbHRLZXlQcmVzc2VkIiwiZ2V0Q3VycmVudERyb3BFZmZlY3QiLCJpc0RyYWdnaW5nTmF0aXZlSXRlbSIsImdldEN1cnJlbnRTb3VyY2VQcmV2aWV3Tm9kZU9wdGlvbnMiLCJhbmNob3JYIiwiYW5jaG9yWSIsImNhcHR1cmVEcmFnZ2luZ1N0YXRlIiwiYmVnaW5EcmFnTmF0aXZlSXRlbSIsImN1cnJlbnROYXRpdmVTb3VyY2UiLCJjcmVhdGVOYXRpdmVEcmFnU291cmNlIiwiY3VycmVudE5hdGl2ZUhhbmRsZSIsInNldEN1cnJlbnREcmFnU291cmNlTm9kZSIsImN1cnJlbnREcmFnU291cmNlTm9kZSIsIm1vdXNlTW92ZVRpbWVvdXRUaW1lciIsImVuZERyYWdJZlNvdXJjZVdhc1JlbW92ZWRGcm9tRE9NIiwibGFzdENsaWVudE9mZnNldCIsImhvdmVyUmFmSWQiLCJlbmREcmFnTmF0aXZlSXRlbSIsImNhbmNlbEhvdmVyIiwic2NoZWR1bGVIb3ZlciIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm5hdGl2ZVR5cGUiLCJzZXREcmFnSW1hZ2UiLCJzb3VyY2VOb2RlIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJkcmFnUHJldmlld09mZnNldCIsImFuY2hvclBvaW50Iiwib2Zmc2V0UG9pbnQiLCJpc0ltYWdlIiwiZHJhZ1ByZXZpZXdOb2RlT2Zmc2V0RnJvbUNsaWVudCIsIm9mZnNldEZyb21EcmFnUHJldmlldyIsIm9mZnNldFdpZHRoIiwic291cmNlV2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJzb3VyY2VIZWlnaHQiLCJkcmFnUHJldmlld1dpZHRoIiwiZHJhZ1ByZXZpZXdIZWlnaHQiLCJkZXZpY2VQaXhlbFJhdGlvIiwiZ2V0RHJhZ1ByZXZpZXdTaXplIiwiaXNNYW51YWxPZmZzZXRZIiwiY2FsY3VsYXRlWU9mZnNldCIsImdldERyYWdQcmV2aWV3T2Zmc2V0Iiwic2V0RGF0YSIsImVudGVyTGVhdmVDb3VudGVyIiwiZHJhZ0Ryb3AiLCJpc0NvbnRlbnRFZGl0YWJsZSIsIkhUTUw1QmFja2VuZCIsIldvcmtvdXRTY2hlZHVsZSIsImdldEVsZW1lbnRCeUlkIiwiQXBwIl0sInNvdXJjZVJvb3QiOiIifQ==